<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java中使用Redis（Jedis）</title>
    <link href="/20221205230057/"/>
    <url>/20221205230057/</url>
    
    <content type="html"><![CDATA[<h1 id="Jedis快速入门"><a href="#Jedis快速入门" class="headerlink" title="Jedis快速入门"></a>Jedis快速入门</h1><h2 id="官方地址-Github"><a href="#官方地址-Github" class="headerlink" title="官方地址(Github)"></a><a href="https://github.com/redis/jedis">官方地址(Github)</a></h2><h2 id="Java的maven项目中使用jedis"><a href="#Java的maven项目中使用jedis" class="headerlink" title="Java的maven项目中使用jedis"></a>Java的maven项目中使用jedis</h2><ul><li>使用IDEA创建maven项目</li></ul><p><img src="/20221205230057/image-20221205231229753.png" alt="IDEA中创建maven项目1"></p><p><img src="/20221205230057/image-20221205231716161.png" alt="IDEA中创建maven项目2"></p><ul><li><p>pom添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--junit--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>新建测试类来测试jedis</p><p><img src="/20221205230057/image-20221205235141484.png" alt="image-20221205235141484"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.jedis.test;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jedis单元测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前单元测试类中，每次执行test之前都会执行的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.200.123&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">// 连接密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123321&quot;</span>);<br>        <span class="hljs-comment">// 连接库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前单元测试类中，每次执行test之后都会执行的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(jedis != <span class="hljs-literal">null</span>)&#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 存入数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Lisi&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + result);<br>        <span class="hljs-comment">// 取出数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h2><p>通过连接池获取redis连接（不用再通过new的方式创建连接）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jedis连接池</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-comment">// 最大连接数</span><br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最大空闲连接</span><br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最小空闲连接</span><br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 等待时间</span><br>        poolConfig.setMaxWait(Duration.ofSeconds(<span class="hljs-number">10</span>));<br>        <span class="hljs-comment">// 创建连接池对象</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;192.168.200.123&quot;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;123321&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取redis连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Springboot项目与redis"><a href="#Springboot项目与redis" class="headerlink" title="Springboot项目与redis"></a>Springboot项目与redis</h1><h2 id="SpringDataRedis介绍"><a href="#SpringDataRedis介绍" class="headerlink" title="SpringDataRedis介绍"></a>SpringDataRedis介绍</h2><p><img src="/20221205230057/image-20221206002810715.png" alt="SpringDataRedis介绍"></p><p><img src="/20221205230057/image-20221206003142014.png" alt="SpringDataRedis介绍2"></p><h2 id="Springboot项目中使用redis"><a href="#Springboot项目中使用redis" class="headerlink" title="Springboot项目中使用redis"></a>Springboot项目中使用redis</h2><ul><li>创建Springboot项目</li></ul><p><img src="/20221205230057/image-20221206003800697.png" alt="创建Springboot项目"></p><p><img src="/20221205230057/image-20221206003906129.png" alt="创建Springboot项目2"></p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p><p>修改<code>resources</code>文件夹下的properties文件为<code>application.yml</code></p><p><img src="/20221205230057/image-20221206010009918.png" alt="修改配置文件"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.200</span><span class="hljs-number">.123</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Redis</tag>
      
      <tag>Jedis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis数据结构与常用命令</title>
    <link href="/20221205174559/"/>
    <url>/20221205174559/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis数据结构介绍"><a href="#1-Redis数据结构介绍" class="headerlink" title="1. Redis数据结构介绍"></a>1. Redis数据结构介绍</h1><p><img src="/20221205174559/image-20221205143031769.png" alt="Redis数据结构"></p><h1 id="2-操作命令"><a href="#2-操作命令" class="headerlink" title="2. 操作命令"></a>2. 操作命令</h1><ul><li><p><a href="https://redis.io/commands/">操作命令官方文档</a>。</p></li><li><p>在客户端命令行窗口输入：</p><ul><li><p><code>help 命令名称</code>，如：<code>help del</code>就是查看 <code>del</code> 命令的使用文档。</p><p><img src="/20221205174559/image-20221205145103409.png" alt="help命令示例"></p></li><li><p><code>help @groupName</code>，查看某个命令分组下的命令文档，如：<code>help @list</code>就是查看 <code>list</code> 命令相关的文档。命令分组在官方在线文档中有说明。</p></li></ul></li></ul><h2 id="2-1-通用命令"><a href="#2-1-通用命令" class="headerlink" title="2.1. 通用命令"></a>2.1. 通用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有的key</span><br>keys *<br><span class="hljs-meta prompt_"># </span><span class="language-bash">a开头的key（模糊搜索）</span><br>keys a*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除key</span><br>del keyName<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断key是否存在</span><br>exists<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给key设置一个有效期，有效期到期时key会自动被删除</span><br>expire<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看一个key的剩余有效期（-1表示永久有效，-2表示过期）</span><br>ttl<br><br></code></pre></td></tr></table></figure><h2 id="2-2-String类型"><a href="#2-2-String类型" class="headerlink" title="2.2. String类型"></a>2.2. String类型</h2><h3 id="String类型常见命令"><a href="#String类型常见命令" class="headerlink" title="String类型常见命令"></a>String类型常见命令</h3><p><img src="/20221205174559/image-20221205161637493.png" alt="String类型常用命令"></p><h3 id="有层级结构的key"><a href="#有层级结构的key" class="headerlink" title="有层级结构的key"></a>有层级结构的key</h3><p><img src="/20221205174559/image-20221205163300077.png" alt="key层级结构"></p><h2 id="2-3-Hash类型"><a href="#2-3-Hash类型" class="headerlink" title="2.3. Hash类型"></a>2.3. Hash类型</h2><p><img src="/20221205174559/image-20221205163912138.png" alt="Hash类型"></p><h3 id="Hash类型常见命令"><a href="#Hash类型常见命令" class="headerlink" title="Hash类型常见命令"></a>Hash类型常见命令</h3><p><img src="/20221205174559/image-20221205163949163.png" alt="Hash类型常见命令"></p><h2 id="2-4-List类型"><a href="#2-4-List类型" class="headerlink" title="2.4. List类型"></a>2.4. List类型</h2><h3 id="List类型常用命令"><a href="#List类型常用命令" class="headerlink" title="List类型常用命令"></a>List类型常用命令</h3><p><img src="/20221205174559/image-20221205165838811.png" alt="List类型常用命令"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><img src="/20221205174559/image-20221205170314931.png" alt="应用思考"></p><blockquote><p>说明：</p><p>栈的特点：只有一个进出口，先进后出，所以可以利用list的特性，比如：<code>lpush</code>和<code>lpop</code>即可。</p><p>队列：先进的可以先出，不同进出口，比如：<code>lpush</code>和<code>rpop</code>。</p><p>阻塞队列：<code>blpop</code>或者<code>brpop</code>是在有数据的情况就取出，没有数据就等待。</p></blockquote><h2 id="2-5-Set类型"><a href="#2-5-Set类型" class="headerlink" title="2.5. Set类型"></a>2.5. Set类型</h2><h3 id="Set类型介绍"><a href="#Set类型介绍" class="headerlink" title="Set类型介绍"></a>Set类型介绍</h3><p><img src="/20221205174559/image-20221205170949113.png" alt="Set类型介绍"></p><h3 id="Set类型常见命令"><a href="#Set类型常见命令" class="headerlink" title="Set类型常见命令"></a>Set类型常见命令</h3><p><img src="/20221205174559/image-20221205171515423.png" alt="Set类型常见命令"></p><h2 id="2-6-SortedSet"><a href="#2-6-SortedSet" class="headerlink" title="2.6 SortedSet"></a>2.6 SortedSet</h2><h3 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h3><p><img src="/20221205174559/image-20221205171956067.png" alt="SortedSet类型介绍"></p><h3 id="SortedSet类型常见命令"><a href="#SortedSet类型常见命令" class="headerlink" title="SortedSet类型常见命令"></a>SortedSet类型常见命令</h3><p><img src="/20221205174559/image-20221205172144278.png" alt="SortedSet类型常见命令"></p>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Redis命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis安装说明</title>
    <link href="/20221130161457/"/>
    <url>/20221130161457/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis安装说明"><a href="#Redis安装说明" class="headerlink" title="Redis安装说明"></a>Redis安装说明</h1><blockquote><p>文章主要介绍开发本地如何安装Redis。</p><p><a href="https://redis.io/">Redis官方网站</a> 没有提供Windows版本的安装包，本文会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为<em>CentOS 7</em>.</p></blockquote><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1. 单机安装Redis"></a>1. 单机安装Redis</h1><h2 id="1-1-安装Redis依赖"><a href="#1-1-安装Redis依赖" class="headerlink" title="1.1. 安装Redis依赖"></a>1.1. 安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><h2 id="1-2-上传安装包并解压"><a href="#1-2-上传安装包并解压" class="headerlink" title="1.2. 上传安装包并解压"></a>1.2. 上传安装包并解压</h2><p>Redis压缩包上传到虚拟机的任意目录，例如，我放到了***&#x2F;usr&#x2F;local&#x2F;src*** 目录：</p><p>（图片为 <em><strong>Mobaxterm</strong></em> 的页面）</p><p><img src="/20221130161457/image-20211211080151539.png" alt="图片为Mobaxterm的页面"></p><p>或者在Linux进入指定文件夹后，使用如下命令直接下载到文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过下载链接直接下载</span><br>wget https://download.redis.io/releases/redis-6.2.6.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果没有wget可以通过以下命令安装</span><br>yum -y install wget<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动文件到指定文件夹（按需求来，可不执行）</span><br>mv redis-6.2.6.tar.gz /usr/local/src/<br></code></pre></td></tr></table></figure><p>链接获取方式：</p><p><img src="/20221130161457/image-20221202004057636.png" alt="链接获取方式"></p><p>解压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">解压文件</span><br>tar -xzf redis-6.2.6.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压后进入文件夹</span><br>cd redis-6.2.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行编译命令</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="/20221130161457/image-20211211080603710.png" alt="image-20211211080603710"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3. 启动"></a>1.3. 启动</h2><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-1-默认启动"><a href="#1-3-1-默认启动" class="headerlink" title="1.3.1. 默认启动"></a>1.3.1. 默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">redis-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/20221130161457/image-20211211081716167.png" alt="image-20211211081716167"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-2-指定配置启动"><a href="#1-3-2-指定配置启动" class="headerlink" title="1.3.2. 指定配置启动"></a>1.3.2. 指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/20221130161457/image-20211211082225509.png" alt="image-20211211082225509"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份配置文件</span><br>cp redis.conf redis.conf.bak<br></code></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes </span><br><span class="hljs-comment"># 密码，设置后访问Redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123321</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：vi编辑器窗口进行快捷搜索</p><p>英文状态下，按 <code>esc</code> 后 按<code>/</code>，就可以在底部的输入框进行搜索，搜索的时候，通过按<code>n</code>（下一个），<code>N</code>（上一个）来进行前后搜索。</p></blockquote><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis安装目录</span> <br>cd /usr/local/src/redis-6.2.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>redis-server redis.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示运行情况</span><br>ps -ef |grep redis<br></code></pre></td></tr></table></figure><p>通过 <code>redis-cli</code> 进入客户端命令行窗口：</p><p><img src="/20221130161457/image-20221205143946384.png" alt="redis-cli"></p><p>停止服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">因为之前配置了密码，因此需要通过 -u 来指定密码</span><br>redis-cli -u 123321 shutdown<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果报错：Invalid URI scheme，可以尝试以下方式关闭</span><br>redis-cli -a 123321 shutdown<br></code></pre></td></tr></table></figure><h3 id="1-3-3-开机自启"><a href="#1-3-3-开机自启" class="headerlink" title="1.3.3. 开机自启"></a>1.3.3. 开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vi /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动</span><br>systemctl start redis<br><span class="hljs-comment"># 停止</span><br>systemctl stop redis<br><span class="hljs-comment"># 重启</span><br>systemctl restart redis<br><span class="hljs-comment"># 查看状态</span><br>systemctl status redis<br></code></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">enable</span> redis<br></code></pre></td></tr></table></figure><h1 id="2-Redis客户端"><a href="#2-Redis客户端" class="headerlink" title="2. Redis客户端"></a>2. Redis客户端</h1><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h2 id="2-1-Redis命令行客户端"><a href="#2-1-Redis命令行客户端" class="headerlink" title="2.1. Redis命令行客户端"></a>2.1. Redis命令行客户端</h2><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/20221130161457/image-20211211110439353.png" alt="image-20211211110439353"></p><h2 id="2-2-图形化桌面客户端"><a href="#2-2-图形化桌面客户端" class="headerlink" title="2.2. 图形化桌面客户端"></a>2.2. 图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，<a href="https://github.com/uglide/RedisDesktopManager">项目地址</a>。</p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>不过可以在<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">这个仓库</a>可以找到安装包。</p><p><img src="/20221130161457/image-20211211111351885.png" alt="image-20211211111351885"></p><h3 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1. 安装"></a>2.2.1. 安装</h3><p>在课前资料中可以找到Redis的图形化桌面客户端：</p><p><img src="/20221130161457/image-20211214154938770.png" alt="image-20211214154938770"></p><p>解压缩后，运行安装程序即可安装：</p><p><img src="/20221130161457/image-20211214155123841.png" alt="image-20211214155123841"></p><p>此处略。</p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/20221130161457/image-20211211110935819.png" alt="image-20211211110935819"></p><p>双击即可运行：</p><p><img src="/20221130161457/image-20211214155406692.png" alt="image-20211214155406692"></p><h3 id="2-2-2-建立连接"><a href="#2-2-2-建立连接" class="headerlink" title="2.2.2. 建立连接"></a>2.2.2. 建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/20221130161457/image-20211214155424842.png" alt="image-20211214155424842"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/20221130161457/image-20211211111614483.png" alt="image-20211211111614483"></p><p>点击测试连接，如果无法连接，需要检查：</p><ul><li><p>redis的ip配置是否有限制，即：<code>redis.conf</code> 文件中的 <code>bind</code> 配置。</p></li><li><p>访问的虚拟机ip是否正确（如果前面是用远程连接工具操作的，可以排除该项）</p></li><li><p>可能是Linux的防火墙限制（新安装的一般是这个问题），请参考以下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打开防火墙6379端口号</span><br>firewall-cmd --zone=public --permanent --add-port=6379/tcp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">防火墙重新载入</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure></li></ul><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/20221130161457/image-20211214155804523.png" alt="image-20211214155804523"></p><p>点击即可建立连接了：</p><p><img src="/20221130161457/image-20211214155849495.png" alt="image-20211214155849495"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 选择 0号库</span><br>select 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题</title>
    <link href="/20221130101457/"/>
    <url>/20221130101457/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机中CentOS-7如何固定IP地址以及无法访问外网问题"><a href="#虚拟机中CentOS-7如何固定IP地址以及无法访问外网问题" class="headerlink" title="虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题"></a>虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题</h1><blockquote><p>本文主要介绍：</p><p>在虚拟机中的CentOS 7如何配置固定IP地址（动态ip有时候会比较麻烦），</p><p>以及 出现 百度ping不通时问题的解决方案。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">测试外网网络连接情况</span><br>ping www.baidu.com<br></code></pre></td></tr></table></figure><p>如果出现<code>ping: www.baidu.com: Name or service not known </code> 或者 <code>ping: www.baidu.com: 未知的名称或服务</code> 的报错，需要修改一下网络配置：</p><p><em>（说明：设置固定IP也是同样的方案）</em></p><h2 id="1-修改windows的虚拟机网络配置"><a href="#1-修改windows的虚拟机网络配置" class="headerlink" title="1. 修改windows的虚拟机网络配置"></a>1. 修改windows的虚拟机网络配置</h2><p>找到 <em><strong>控制面板 - 网络和Internet - 网络链接</strong></em> 中的 <em><strong>VMnet8</strong></em>，右键查看属性，选择<em><strong>IPv4</strong></em>双击查看，修改为静态的。</p><p>要注意的是：这边的IP地址需要跟虚拟机中配置的网关在同一网段。</p><p><img src="/20221130101457/image-20221202171537537.png" alt="windows下的虚拟机的网络配置1"></p><p><img src="/20221130101457/image-20221202171637623.png" alt="windows下的虚拟机的网络配置2"><img src="/20221130101457/image-20221202171745167.png" alt="windows下的虚拟机的网络配置3"></p><p>通过 <em><strong>cmd</strong></em> 命令我们也可以看到VMnet8的配置情况：</p><p><img src="/20221130101457/image-20221202174810342.png" alt="windows下的虚拟机的网络配置4"></p><h2 id="2-修改一下虚拟机网络配置"><a href="#2-修改一下虚拟机网络配置" class="headerlink" title="2. 修改一下虚拟机网络配置"></a>2. 修改一下虚拟机网络配置</h2><p>选择菜单：<em><strong>编辑 - 虚拟网络编辑器</strong></em></p><p><img src="/20221130101457/image-20221202170729796.png" alt="虚拟机网络配置"></p><p><img src="/20221130101457/image-20221202170600947.png" alt="虚拟机网络配置(记住4的子网掩码和网关配置)"></p><h2 id="3-修改CentOS的网络配置"><a href="#3-修改CentOS的网络配置" class="headerlink" title="3. 修改CentOS的网络配置"></a>3. 修改CentOS的网络配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改CentOS的网络配置（如果文件内容为空请检查是否存在该文件）</span><br>vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改内容</span><br>IPADDR=192.168.200.123 #centOS的ip地址<br>NETMASK=255.255.255.0 #虚拟机中配置的子网掩码<br>GATEWAY=192.168.200.2 #虚拟机中配置的网关<br></code></pre></td></tr></table></figure><p><img src="/20221130101457/image-20221202171259344.png" alt="CentOS 7网络配置"></p><p>修改后重启网络服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">重启网络服务</span><br>service network restart<br></code></pre></td></tr></table></figure><p>再测试是否能ping通百度服务器，应该是可以了的。</p>]]></content>
    
    
    <categories>
      
      <category>问题解决方案</category>
      
      <category>虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>虚拟机</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小火箭测试专用（定时更新）</title>
    <link href="/20221121225436/"/>
    <url>/20221121225436/</url>
    
    <content type="html"><![CDATA[<blockquote><p>最后更新于 2022-11-21 22:54:36</p></blockquote><img src="/20221121225436/20221121-2256.jpg" alt="20221121-2256" style="zoom: 33%;"><blockquote><p>如果无法使用，请留言或联系管理员。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>VPN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小火箭</tag>
      
      <tag>节点</tag>
      
      <tag>VPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客网站搭建（Hexo+Github Page）</title>
    <link href="/20221121173557/"/>
    <url>/20221121173557/</url>
    
    <content type="html"><![CDATA[<p>博客网站搭建（Hexo+Github Page）</p><blockquote><p>文章主要介绍如何通过 Hexo 和 Github Page 来搭建博客网站。</p></blockquote><h2 id="1-安装NodeJS"><a href="#1-安装NodeJS" class="headerlink" title="1. 安装NodeJS"></a>1. 安装NodeJS</h2><ul><li><p>由于Hexo是基于Node.js驱动的一款博客框架，所以需要安装NodeJS，<a href="https://nodejs.org/zh-cn/">官网下载地址</a>。</p><p>如果下载下载较慢，可以尝试<a href="http://nodejs.cn/download/current/">这个链接</a>。</p></li><li><p>安装完执行命令 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功（出现版本号即为安装成功）。</p></li></ul><p><img src="/20221121173557/image-20221119000442361.png" alt="image-20221119000442361"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h2><ul><li><p>下载git，<a href="https://git-scm.com/">Git下载地址</a>。</p></li><li><p>注册github账号。</p></li><li><p>Git配置，打开git bash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局配置用户信息：用户名和邮箱。将会为git提交时的默认的用户信息。如果不需要可以暂时不配置。</span><br>git config --global user.name &quot;名称&quot;<br>git config --global user.email &quot;github邮箱&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置列表</span><br>git config --list<br></code></pre></td></tr></table></figure></li><li><p>安装完执行命令 <code>git --version</code> 确认git安装是否成功（出现版本号即为安装成功）。</p></li></ul><p><img src="/20221121173557/image-20221119001545371.png" alt="image-20221119001545371"></p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><ul><li><p>以上环境准备好了之后，就可以使用 npm 开始安装 Hexo 了，在命令行输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><img src="/20221121173557/image-20221119001332746.png" alt="image-20221119001332746"></p></li><li><p>Hexo安装完成后，选择一个需要放置博客文件的文件夹，这里我选择D盘的doc文件夹，进入文件夹中，右键后选择“Git Bash Here”打开命令行终端。</p><p><img src="/20221121173557/image-20221119004605442.png" alt="image-20221119004605442"></p></li><li><p>输入命令，创建一个名为 <em>MyBlog</em> 的文件夹并初始化相关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init MyBlog<br>cd MyBlog<br>npm install<br></code></pre></td></tr></table></figure></li><li><p>如果以上命令执行过程中都没有报错的话，那么就算安装成功了，接着运行  <code>hexo s</code> 命令来启动项目（其中 s 是 server 的缩写，我这里就输入全拼），启动成功就能看到访问的地址了 <code>http://localhost:4000/</code> （注意：这里不能通过 Ctrl+C 来复制，从提示可以看出这是终止服务的快捷键，可以右键Copy）</p><p><img src="/20221121173557/image-20221119005719242.png" alt="image-20221119005719242"></p><p><img src="/20221121173557/image-20221119010141249.png" alt="image-20221119010141249"></p></li></ul><h3 id="3-1-Hexo-主题修改（以NexT主题为例）"><a href="#3-1-Hexo-主题修改（以NexT主题为例）" class="headerlink" title="3.1 Hexo 主题修改（以NexT主题为例）"></a>3.1 Hexo 主题修改（以NexT主题为例）</h3><ul><li><p><a href="https://hexo.io/themes/">官方主题页</a>。</p></li><li><p>这里我们以较多用户使用的 <em>NexT主题</em> 配置为例，在主题页搜索 <em>next</em> ，选择 <em>NexT</em> 主题，就能进入 Github 页面，就可以看到具体的使用说明文档了。</p><p><img src="/20221121173557/image-20221119011310831.png" alt="image-20221119011310831"></p></li></ul><p><img src="/20221121173557/image-20221119011531221.png" alt="image-20221119011531221"></p><ul><li><p>进入前面创建的 <em>MyBlog</em> 文件夹，打开 <em>git bash</em> 命令窗口，通过以下命令安装主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-theme-next<br></code></pre></td></tr></table></figure><p>或者直接将主题包复制下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/next-theme/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p><em>两种主题安装方式任选一种就行，我这边选择的是第二种，第二条命令是将主题包直接复制到  <strong>MyBlog</strong> 的 <strong>themes&#x2F;next</strong> 文件目录中（比较通用的一种主题安装方式）。Hexo中，themes就是存放主题配置的目录。</em></p><p><img src="/20221121173557/image-20221119013012747.png" alt="image-20221119013012747"></p></li><li><p>主题下载成功后，打开 <em>MyBlog</em> 目录下的 <em><strong>_config.yml</strong></em> 文件（可以使用记事本打开），找到 <em><strong>theme</strong></em> 配置，修改为新的主题名称，主题名称同 <em>themes</em> 下的文件夹名。</p><p><strong>注意，这边的yml的配置，所以冒号后面一定要记得加空格。</strong></p><p><img src="/20221121173557/image-20221121161352813.png" alt="image-20221121161352813"></p></li><li><p>修改之后在 <em>git bash</em> 命令行中执行 <code>hexo g</code> 命令（g 是 generate 的缩写），然后再使用命令 <code>hexo s</code> 启动，再访问 <code>http://localhost:4000/</code> 就能看到新的主题了。</p></li></ul><h3 id="3-2-Hexo-主题配置文件"><a href="#3-2-Hexo-主题配置文件" class="headerlink" title="3.2 Hexo 主题配置文件"></a>3.2 Hexo 主题配置文件</h3><ul><li><p>通过修改 Hexo 主题我们知道了，在 <em><strong>themes</strong></em> 文件目录中的文件夹就是对应的主题，所以如果要修改主题的一些配置，我们就要修改<strong>主题的文件夹中</strong>的 <em><strong>_config.yml</strong></em> 文件。</p><p><img src="/20221121173557/image-20221119015827992.png" alt="image-20221119015827992"></p></li></ul><h2 id="4-将博客部署到Github上"><a href="#4-将博客部署到Github上" class="headerlink" title="4. 将博客部署到Github上"></a>4. 将博客部署到Github上</h2><ul><li><p>进入<a href="https://github.com/">Github官网</a>进行账号注册。</p></li><li><p>账号注册成功后，建立一个新的仓库，github仅能使用一个同名仓库的代码作为一个静态站点，所以仓库名一定要是： <code>用户名.github.io</code></p><p><img src="/20221121173557/image-20221121104502552.png" alt="image-20221121104502552"></p></li><li><p>配置SSH key，要使用git工具需要先配置一下SSH key，为部署本地博客到Github做准备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">非全局配置，仅当前项目生效</span><br>git config user.name &quot;用户名&quot;<br>git config user.email &quot;邮箱地址&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ssh key，这个必须是github的注册邮箱</span><br>ssh-keygen -t rsa -C &quot;git注册邮箱&quot;<br></code></pre></td></tr></table></figure></li><li><p>查看 SSH key 公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>Github上配置 SSH key </p><p>点击头像 -&gt; settings -&gt; SSH and GPG keys，New SSH key，将查看到的  SSH key 公钥内容全部复制粘贴进去。</p></li><li><p>测试连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure></li><li><p>修改 <em>MyBolg</em> 的配置文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/binbiubiu/binbiubiu.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>安装发布插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>博客项目部署到github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">先生成项目</span><br>hexo g<br><span class="hljs-meta prompt_">#</span><span class="language-bash">再部署到github</span><br>hexo d<br></code></pre></td></tr></table></figure></li><li><p>访问网站 <code>用户名.github.io</code></p></li></ul><h2 id="5-写文章"><a href="#5-写文章" class="headerlink" title="5. 写文章"></a>5. 写文章</h2><ul><li><p>在 <em>MyBlog</em> 中通过命令行创建文章的 <em>.md</em> 文件</p><p>其他的命令可以参考 <a href="https://hexo.io/zh-cn/docs/writing">官方文档</a> 进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new 文章标题<br></code></pre></td></tr></table></figure><p>执行完成后，会在 <em>source&#x2F;_posts</em> 目录下看到一个名为 <em><strong>文章标题.md</strong></em> 的文章文件啦。</p></li></ul><h2 id="6-关于文章图片丢失问题"><a href="#6-关于文章图片丢失问题" class="headerlink" title="6. 关于文章图片丢失问题"></a>6. 关于文章图片丢失问题</h2><blockquote><p>我们在md文件中插入了图片，Hexo生成后打开服务却发现找不到图片，需要修改图片设置。</p></blockquote><h3 id="6-1-解决方案-修改配置文件"><a href="#6-1-解决方案-修改配置文件" class="headerlink" title="6.1 解决方案 - 修改配置文件"></a>6.1 解决方案 - 修改配置文件</h3><ul><li><p>修改 Typora 的设置：文件 -&gt; 偏好设置 -&gt; 图像，修改为“插入图片时<em><strong>复制到指定路径</strong></em>”，下方的选项选择“***.&#x2F;${filename}***”（即：当前md文件路径对应的同名文件夹下，如果没有，会自动创建）。</p><img src="/20221121173557/image-20221121165950895.png" alt="image-20221121165950895" style="zoom:80%;"></li></ul><img src="/20221121173557/image-20221121170352273.png" alt="image-20221121170352273" style="zoom: 80%;"><p><img src="/20221121173557/image-20221121170814999.png" alt="image-20221121170814999"></p><ul><li><p>修改Hexo配置。</p><p>修改 <em><strong>MyBlog&#x2F;_config.yml</strong></em> 文件中的 <em><strong>post_asset_folder</strong></em> 的值为 <em><strong>true</strong></em>。</p><p><img src="/20221121173557/image-20221121172551535.png" alt="image-20221121172551535"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装图片插件</span><br>npm install https://github.com/CodeFalling/hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>同样地，在 Hexo 目录的 <em><strong>source&#x2F;_posts</strong></em> 目录中，创建md文件的同名文件夹，将图片资源放在这个文件夹中即可，这样在 Hexo 发布时，也同样会把图片资源进行发布。</p></li></ul><p><img src="/20221121173557/image-20221121171140146.png" alt="image-20221121171140146"></p><h3 id="6-2-解决方案-配置图床"><a href="#6-2-解决方案-配置图床" class="headerlink" title="6.2 解决方案 - 配置图床"></a>6.2 解决方案 - 配置图床</h3><ul><li><p>利用图床，在使用 Typora 编辑时，将图片上传至图床，md中图片直接访问图床的图片链接。</p><p><a href="https://cjc34.gitee.io/2022/10/26/hexo%E9%85%8D%E5%90%88typora/">方案参考链接</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>博客</tag>
      
      <tag>Github Page</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
