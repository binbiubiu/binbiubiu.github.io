<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis基础篇 - 数据结构与常用命令</title>
    <link href="/20221205120000/"/>
    <url>/20221205120000/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis数据结构介绍"><a href="#1-Redis数据结构介绍" class="headerlink" title="1. Redis数据结构介绍"></a>1. Redis数据结构介绍</h1><p><img src="/20221205120000/image-20221205143031769.png" alt="Redis数据结构"></p><h1 id="2-操作命令"><a href="#2-操作命令" class="headerlink" title="2. 操作命令"></a>2. 操作命令</h1><ul><li><p><a href="https://redis.io/commands/">操作命令官方文档</a>。</p></li><li><p>在客户端命令行窗口输入：</p><ul><li><p><code>help 命令名称</code>，如：<code>help del</code>就是查看 <code>del</code> 命令的使用文档。</p><p><img src="/20221205120000/image-20221205145103409.png" alt="help命令示例"></p></li><li><p><code>help @groupName</code>，查看某个命令分组下的命令文档，如：<code>help @list</code>就是查看 <code>list</code> 命令相关的文档。命令分组在官方在线文档中有说明。</p></li></ul></li></ul><h2 id="2-1-通用命令"><a href="#2-1-通用命令" class="headerlink" title="2.1. 通用命令"></a>2.1. 通用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有的key</span><br>keys *<br><span class="hljs-meta prompt_"># </span><span class="language-bash">a开头的key（模糊搜索）</span><br>keys a*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除key</span><br>del keyName<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断key是否存在</span><br>exists<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给key设置一个有效期，有效期到期时key会自动被删除</span><br>expire<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看一个key的剩余有效期（-1表示永久有效，-2表示过期）</span><br>ttl<br><br></code></pre></td></tr></table></figure><h2 id="2-2-String类型"><a href="#2-2-String类型" class="headerlink" title="2.2. String类型"></a>2.2. String类型</h2><h3 id="String类型常见命令"><a href="#String类型常见命令" class="headerlink" title="String类型常见命令"></a>String类型常见命令</h3><p><img src="/20221205120000/image-20221205161637493.png" alt="String类型常用命令"></p><h3 id="有层级结构的key"><a href="#有层级结构的key" class="headerlink" title="有层级结构的key"></a>有层级结构的key</h3><p><img src="/20221205120000/image-20221205163300077.png" alt="key层级结构"></p><h2 id="2-3-Hash类型"><a href="#2-3-Hash类型" class="headerlink" title="2.3. Hash类型"></a>2.3. Hash类型</h2><p><img src="/20221205120000/image-20221205163912138.png" alt="Hash类型"></p><h3 id="Hash类型常见命令"><a href="#Hash类型常见命令" class="headerlink" title="Hash类型常见命令"></a>Hash类型常见命令</h3><p><img src="/20221205120000/image-20221205163949163.png" alt="Hash类型常见命令"></p><h2 id="2-4-List类型"><a href="#2-4-List类型" class="headerlink" title="2.4. List类型"></a>2.4. List类型</h2><h3 id="List类型常用命令"><a href="#List类型常用命令" class="headerlink" title="List类型常用命令"></a>List类型常用命令</h3><p><img src="/20221205120000/image-20221205165838811.png" alt="List类型常用命令"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><img src="/20221205120000/image-20221205170314931.png" alt="应用思考"></p><blockquote><p>说明：</p><p>栈的特点：只有一个进出口，先进后出，所以可以利用list的特性，比如：<code>lpush</code>和<code>lpop</code>即可。</p><p>队列：先进的可以先出，不同进出口，比如：<code>lpush</code>和<code>rpop</code>。</p><p>阻塞队列：<code>blpop</code>或者<code>brpop</code>是在有数据的情况就取出，没有数据就等待。</p></blockquote><h2 id="2-5-Set类型"><a href="#2-5-Set类型" class="headerlink" title="2.5. Set类型"></a>2.5. Set类型</h2><h3 id="Set类型介绍"><a href="#Set类型介绍" class="headerlink" title="Set类型介绍"></a>Set类型介绍</h3><p><img src="/20221205120000/image-20221205170949113.png" alt="Set类型介绍"></p><h3 id="Set类型常见命令"><a href="#Set类型常见命令" class="headerlink" title="Set类型常见命令"></a>Set类型常见命令</h3><p><img src="/20221205120000/image-20221205171515423.png" alt="Set类型常见命令"></p><h2 id="2-6-SortedSet"><a href="#2-6-SortedSet" class="headerlink" title="2.6 SortedSet"></a>2.6 SortedSet</h2><h3 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h3><p><img src="/20221205120000/image-20221205171956067.png" alt="SortedSet类型介绍"></p><h3 id="SortedSet类型常见命令"><a href="#SortedSet类型常见命令" class="headerlink" title="SortedSet类型常见命令"></a>SortedSet类型常见命令</h3><p><img src="/20221205120000/image-20221205172144278.png" alt="SortedSet类型常见命令"></p>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot中使用redis的乱码问题</title>
    <link href="/20221103140000/"/>
    <url>/20221103140000/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>项目中如果直接通过<code>RedisTemplate</code>进行redis的操作，我们在redis数据库可以看到，产生了像乱码一样的东西：</p><p><img src="/20221103140000/image-20221209115920877.png" alt="乱码问题"></p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>严格来说不是乱码，这是因为默认序列化器的问题，RedisTemplate加载时会初始化一个默认序列化器（JdkSerializationRedisSerializer ），程序中使用RedisTemplate将对象序列化后存储到 redis 中就会有这样的问题。</p><p><img src="/20221103140000/image-20221209120830121.png" alt="RedisTemplate默认序列化器加载"></p><p>断点进<code>redisTemplate.opsForValue().set()</code>方法查看源码：</p><p><img src="/20221103140000/image-20221209121159386.png" alt="序列化源码1"></p><p>查看<code>rawValue(value)</code>的实现源码：</p><p><img src="/20221103140000/image-20221209121410693.png" alt="序列化源码2"></p><p>通过查看实现类可以看到，实现<code>valueSerializer().serialize(value)</code>的序列化器有好几个，如果没有初始化的话，默认就是用<code>JdkSerializationRedisSerializer</code>这个序列化器。</p><p>RedisSerializer实现类：</p><p><img src="/20221103140000/image-20221209123056917.png" alt="RedisSerializer实现类"></p><p>继续看<code>JdkSerializationRedisSerializer</code> 序列化器的实现：</p><p><img src="/20221103140000/image-20221209121723099.png" alt="JdkSerializationRedisSerializer序列化实现"></p><p><img src="/20221103140000/image-20221209122156630.png" alt="JdkSerializationRedisSerializer序列化实现2"></p><p><img src="/20221103140000/image-20221209122300378.png" alt="JdkSerializationRedisSerializer序列化实现3"></p><p>最终是通过<code>ObjectOutputStream</code>来序列化的。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>自定义 RedisTemplate 配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.redisdemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        <span class="hljs-comment">// 创建 RedisTemplate 对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">// 设置key序列化器</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.json());<br>        <span class="hljs-comment">// 设置value序列化器</span><br>        template.setValueSerializer(RedisSerializer.json());<br>        template.setHashValueSerializer(RedisSerializer.json());<br><br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>如果有报错（jackson相关），需要添加 jackson 相关的包依赖，如果项目本身有依赖spring-mvc的话不会报错。</p><p>基本实现原理就是以上这样的，网上也可以查找相关：<code>springboot redistemplate 配置</code>，都大同小异。</p>]]></content>
    
    
    <categories>
      
      <category>解决方案</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中使用Redis（Jedis）</title>
    <link href="/20221103130000/"/>
    <url>/20221103130000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何在Java中通过Jedis使用Redis。</p></blockquote><h1 id="Jedis快速入门"><a href="#Jedis快速入门" class="headerlink" title="Jedis快速入门"></a>Jedis快速入门</h1><h2 id="官方地址-Github"><a href="#官方地址-Github" class="headerlink" title="官方地址(Github)"></a><a href="https://github.com/redis/jedis">官方地址(Github)</a></h2><h2 id="Java的maven项目中使用jedis"><a href="#Java的maven项目中使用jedis" class="headerlink" title="Java的maven项目中使用jedis"></a>Java的maven项目中使用jedis</h2><ul><li>使用IDEA创建maven项目</li></ul><p><img src="/20221103130000/image-20221205231229753.png" alt="IDEA中创建maven项目1"></p><p><img src="/20221103130000/image-20221205231716161.png" alt="IDEA中创建maven项目2"></p><ul><li><p>pom添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--junit--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>新建测试类来测试jedis</p><p><img src="/20221103130000/image-20221205235141484.png" alt="image-20221205235141484"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.jedis.test;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jedis单元测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前单元测试类中，每次执行test之前都会执行的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.200.123&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">// 连接密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123321&quot;</span>);<br>        <span class="hljs-comment">// 连接库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前单元测试类中，每次执行test之后都会执行的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(jedis != <span class="hljs-literal">null</span>)&#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 存入数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Lisi&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + result);<br>        <span class="hljs-comment">// 取出数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h2><p>通过连接池获取redis连接（不用再通过new的方式创建连接）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jedis连接池</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-comment">// 最大连接数</span><br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最大空闲连接</span><br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最小空闲连接</span><br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 等待时间</span><br>        poolConfig.setMaxWait(Duration.ofSeconds(<span class="hljs-number">10</span>));<br>        <span class="hljs-comment">// 创建连接池对象</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;192.168.200.123&quot;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;123321&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取redis连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Springboot项目与redis"><a href="#Springboot项目与redis" class="headerlink" title="Springboot项目与redis"></a>Springboot项目与redis</h1><h2 id="SpringDataRedis介绍"><a href="#SpringDataRedis介绍" class="headerlink" title="SpringDataRedis介绍"></a>SpringDataRedis介绍</h2><p><img src="/20221103130000/image-20221206002810715.png" alt="SpringDataRedis介绍"></p><p><img src="/20221103130000/image-20221206003142014.png" alt="SpringDataRedis介绍2"></p><h2 id="Springboot项目中使用redis"><a href="#Springboot项目中使用redis" class="headerlink" title="Springboot项目中使用redis"></a>Springboot项目中使用redis</h2><ul><li>创建Springboot项目</li></ul><p><img src="/20221103130000/image-20221206003800697.png" alt="创建Springboot项目"></p><p><img src="/20221103130000/image-20221206003906129.png" alt="创建Springboot项目2"></p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p><p>[可选]：修改<code>resources</code>文件夹下的<code>application.properties</code>文件为<code>application.yml</code></p><p><img src="/20221103130000/image-20221209115238567.png" alt="修改配置文件"></p><p>yml 配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.18</span><span class="hljs-number">.123</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-comment"># 默认的 lettuce 连接池</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 最大空闲连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 最小空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">1000ms</span><br>    <span class="hljs-comment"># 数据库索引</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>redisTemplate 操作redis</p></li></ul><p><img src="/20221103130000/image-20221209115613064.png" alt="redisTemplate 操作redis"></p><h3 id="”乱码“问题"><a href="#”乱码“问题" class="headerlink" title="”乱码“问题"></a>”乱码“问题</h3><p>如果直接进行上方的操作，我们在redis数据库可以看到，产生了像乱码一样的东西</p><p><img src="/20221103130000/image-20221209115920877.png" alt="乱码问题"></p><p>这是因为默认序列化器的问题，RedisTemplate加载时有初始化一个默认序列化器（JDK的序列化器）：</p><p><img src="/20221103130000/image-20221209120830121.png" alt="RedisTemplate默认序列化器加载"></p><p>断点进<code>redisTemplate.opsForValue().set()</code>方法查看源码：</p><p><img src="/20221103130000/image-20221209121159386.png" alt="序列化源码1"></p><p>查看<code>rawValue(value)</code>的实现源码：</p><p><img src="/20221103130000/image-20221209121410693.png" alt="序列化源码2"></p><p>通过查看实现类可以看到，实现<code>valueSerializer().serialize(value)</code>的序列化器有好几个，如果没有初始化的话，默认就是用<code>JdkSerializationRedisSerializer</code>这个序列化器。</p><p>继续看<code>JdkSerializationRedisSerializer</code> 序列化器的实现：</p><p><img src="/20221103130000/image-20221209121723099.png" alt="JdkSerializationRedisSerializer序列化实现"></p><p><img src="/20221103130000/image-20221209122156630.png" alt="JdkSerializationRedisSerializer序列化实现2"></p><p><img src="/20221103130000/image-20221209122300378.png" alt="JdkSerializationRedisSerializer序列化实现3"></p><p>最终是通过<code>ObjectOutputStream</code>来序列化的。</p><p>解决方案：</p><p>自定义 RedisTemplate 配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.redisdemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        <span class="hljs-comment">// 创建 RedisTemplate 对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">// 设置key序列化器</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.json());<br>        <span class="hljs-comment">// 设置value序列化器</span><br>        template.setValueSerializer(RedisSerializer.json());<br>        template.setHashValueSerializer(RedisSerializer.json());<br><br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>如果有报错（jackson相关），需要添加 jackson 相关的包依赖，如果项目本身有依赖spring-mvc的话不会报错。</p><p>基本实现原理就是以上这样的，网上也可以查找相关：<code>springboot redistemplate 配置</code>，都大同小异。</p><h3 id="数据对象存储问题"><a href="#数据对象存储问题" class="headerlink" title="数据对象存储问题"></a>数据对象存储问题</h3><p>通过指定的序列化器序列化之后，我们可以看到，如果存储的是对象，redis中会写入类信息，这样就多占用了很大一部分存储空间：</p><p><img src="/20221103130000/image-20221209133827502.png" alt="数据对象存储问题"></p><p>解决方案1，使用StringRedisTemplate，并进行手动反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.redisdemo;<br><br><span class="hljs-keyword">import</span> com.demo.redisdemo.pojo.User;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-comment">// 手动序列化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userStr1</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user1);<br>        <span class="hljs-comment">// 存入string类型的数据</span><br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:100&quot;</span>, userStr1);<br><br>        <span class="hljs-comment">// 取出string类型数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userStr2</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:100&quot;</span>);<br>        <span class="hljs-comment">// 手动反序列化</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> objectMapper.readValue(userStr2, User.class);<br><br>        System.out.println(<span class="hljs-string">&quot;user=&quot;</span> + user2);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/20221103130000/image-20221209134904232.png" alt="手动序列化反序列化"></p><h3 id="RedisTemplate的两种序列化实践方案"><a href="#RedisTemplate的两种序列化实践方案" class="headerlink" title="RedisTemplate的两种序列化实践方案"></a>RedisTemplate的两种序列化实践方案</h3><p>方案一：</p><ol><li>自定义<code>RedisTemplate</code>。</li><li>修改<code>RedisTemplate</code>的序列化器为<code>GenericJackson2JsonRedisSerializer</code></li></ol><p>方案二：</p><ol><li>使用<code>StringRedisTemplate</code>。</li><li>写入Redis时，手动把对象序列化为JSON。</li><li>读取Redis时，手动把读取到的JSON数据反序列化为对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Redis</tag>
      
      <tag>Jedis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis安装说明</title>
    <link href="/20221103120000/"/>
    <url>/20221103120000/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis安装说明"><a href="#Redis安装说明" class="headerlink" title="Redis安装说明"></a>Redis安装说明</h1><blockquote><p>文章主要介绍开发本地如何安装Redis。</p><p><a href="https://redis.io/">Redis官方网站</a> 没有提供Windows版本的安装包，本文会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为<em>CentOS 7</em>.</p></blockquote><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1. 单机安装Redis"></a>1. 单机安装Redis</h1><h2 id="1-1-安装Redis依赖"><a href="#1-1-安装Redis依赖" class="headerlink" title="1.1. 安装Redis依赖"></a>1.1. 安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><h2 id="1-2-上传安装包并解压"><a href="#1-2-上传安装包并解压" class="headerlink" title="1.2. 上传安装包并解压"></a>1.2. 上传安装包并解压</h2><p>Redis压缩包上传到虚拟机的任意目录，例如，我放到了***&#x2F;usr&#x2F;local&#x2F;src*** 目录：</p><p>（图片为 <em><strong>Mobaxterm</strong></em> 的页面）</p><p><img src="/20221103120000/image-20211211080151539.png" alt="图片为Mobaxterm的页面"></p><p>或者在Linux进入指定文件夹后，使用如下命令直接下载到文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过下载链接直接下载</span><br>wget https://download.redis.io/releases/redis-6.2.6.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果没有wget可以通过以下命令安装</span><br>yum -y install wget<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动文件到指定文件夹（按需求来，可不执行）</span><br>mv redis-6.2.6.tar.gz /usr/local/src/<br></code></pre></td></tr></table></figure><p>链接获取方式：</p><p><img src="/20221103120000/image-20221202004057636.png" alt="链接获取方式"></p><p>解压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">解压文件</span><br>tar -xzf redis-6.2.6.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压后进入文件夹</span><br>cd redis-6.2.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行编译命令</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="/20221103120000/image-20211211080603710.png" alt="默认安装路径"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3. 启动"></a>1.3. 启动</h2><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-1-默认启动"><a href="#1-3-1-默认启动" class="headerlink" title="1.3.1. 默认启动"></a>1.3.1. 默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/20221103120000/image-20211211081716167.png" alt="启动成功页面"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-2-指定配置启动"><a href="#1-3-2-指定配置启动" class="headerlink" title="1.3.2. 指定配置启动"></a>1.3.2. 指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/20221103120000/image-20211211082225509.png" alt="Redis配置文件"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份配置文件</span><br>cp redis.conf redis.conf.bak<br></code></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes </span><br><span class="hljs-comment"># 密码，设置后访问Redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123321</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：vi编辑器窗口进行快捷搜索</p><p>英文状态下，按 <code>esc</code> 后 按<code>/</code>，就可以在底部的输入框进行搜索，搜索的时候，通过按<code>n</code>（下一个），<code>N</code>（上一个）来进行前后搜索。</p></blockquote><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis安装目录</span> <br>cd /usr/local/src/redis-6.2.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>redis-server redis.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示运行情况</span><br>ps -ef |grep redis<br></code></pre></td></tr></table></figure><p>通过 <code>redis-cli</code> 进入客户端命令行窗口：</p><p><img src="/20221103120000/image-20221205143946384.png" alt="redis-cli"></p><p>停止服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">因为之前配置了密码，因此需要通过 -u 来指定密码</span><br>redis-cli -u 123321 shutdown<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果报错：Invalid URI scheme，可以尝试以下方式关闭</span><br>redis-cli -a 123321 shutdown<br></code></pre></td></tr></table></figure><h3 id="1-3-3-开机自启"><a href="#1-3-3-开机自启" class="headerlink" title="1.3.3. 开机自启"></a>1.3.3. 开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>systemctl start redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止</span><br>systemctl stop redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span><br>systemctl restart redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>systemctl status redis<br></code></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable redis<br></code></pre></td></tr></table></figure><h1 id="2-Redis客户端"><a href="#2-Redis客户端" class="headerlink" title="2. Redis客户端"></a>2. Redis客户端</h1><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h2 id="2-1-Redis命令行客户端"><a href="#2-1-Redis命令行客户端" class="headerlink" title="2.1. Redis命令行客户端"></a>2.1. Redis命令行客户端</h2><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/20221103120000/image-20211211110439353.png" alt="redis-cli"></p><h2 id="2-2-图形化桌面客户端"><a href="#2-2-图形化桌面客户端" class="headerlink" title="2.2. 图形化桌面客户端"></a>2.2. 图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，👉<a href="https://github.com/uglide/RedisDesktopManager">项目地址</a>。</p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>不过可以在👉<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">这个仓库</a>可以找到安装包。</p><p><img src="/20221103120000/image-20211211111351885.png" alt="image-20211211111351885"></p><h3 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1. 安装"></a>2.2.1. 安装</h3><p>下载Redis的图形化桌面客户端后，解压缩，运行安装程序即可安装：</p><p><img src="/20221103120000/image-20211214154938770.png" alt="Redis的图形化桌面客户端压缩包"></p><p><img src="/20221103120000/image-20211214155123841.png" alt="客户端安装程序"></p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/20221103120000/image-20211211110935819.png" alt="image-20211211110935819"></p><p>双击即可运行：</p><p><img src="/20221103120000/image-20211214155406692.png" alt="RDM-GUI"></p><h3 id="2-2-2-建立连接"><a href="#2-2-2-建立连接" class="headerlink" title="2.2.2. 建立连接"></a>2.2.2. 建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/20221103120000/image-20211214155424842.png" alt="连接redis"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/20221103120000/image-20211211111614483.png" alt="连接redis"></p><p>点击测试连接，如果无法连接，需要检查：</p><ul><li><p>redis的ip配置是否有限制，即：<code>redis.conf</code> 文件中的 <code>bind</code> 配置。</p></li><li><p>访问的虚拟机ip是否正确（如果前面是用远程连接工具操作的，可以排除该项）</p></li><li><p>可能是Linux的防火墙限制（新安装的一般是这个问题），请参考以下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打开防火墙6379端口号</span><br>firewall-cmd --zone=public --permanent --add-port=6379/tcp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">防火墙重新载入</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure></li></ul><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/20221103120000/image-20211214155804523.png" alt="连接redis"></p><p>点击即可建立连接了：</p><p><img src="/20221103120000/image-20211214155849495.png" alt="连接redis"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 选择 0号库</span><br>select 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题</title>
    <link href="/20221102120000/"/>
    <url>/20221102120000/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机中CentOS-7如何固定IP地址以及无法访问外网问题"><a href="#虚拟机中CentOS-7如何固定IP地址以及无法访问外网问题" class="headerlink" title="虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题"></a>虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题</h1><blockquote><p>本文主要介绍：</p><p>在虚拟机中的CentOS 7如何配置固定IP地址（动态ip有时候会比较麻烦），</p><p>以及 出现 百度ping不通时问题的解决方案。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">测试外网网络连接情况</span><br>ping www.baidu.com<br></code></pre></td></tr></table></figure><p>如果出现<code>ping: www.baidu.com: Name or service not known </code> 或者 <code>ping: www.baidu.com: 未知的名称或服务</code> 的报错，需要修改一下网络配置：</p><p><em>（说明：设置固定IP也是同样的方案）</em></p><h2 id="1-修改windows的虚拟机网络配置"><a href="#1-修改windows的虚拟机网络配置" class="headerlink" title="1. 修改windows的虚拟机网络配置"></a>1. 修改windows的虚拟机网络配置</h2><p>找到 <em><strong>控制面板 - 网络和Internet - 网络链接</strong></em> 中的 <em><strong>VMnet8</strong></em>，右键查看属性，选择<em><strong>IPv4</strong></em>双击查看，修改为静态的。</p><p>要注意的是：这边的IP地址需要跟虚拟机中配置的网关在同一网段。</p><p><img src="/20221102120000/image-20221202171537537.png" alt="windows下的虚拟机的网络配置1"></p><p><img src="/20221102120000/image-20221202171637623.png" alt="windows下的虚拟机的网络配置2"><img src="/20221102120000/image-20221202171745167.png" alt="windows下的虚拟机的网络配置3"></p><p>通过 <em><strong>cmd</strong></em> 命令我们也可以看到VMnet8的配置情况：</p><p><img src="/20221102120000/image-20221202174810342.png" alt="windows下的虚拟机的网络配置4"></p><h2 id="2-修改一下虚拟机网络配置"><a href="#2-修改一下虚拟机网络配置" class="headerlink" title="2. 修改一下虚拟机网络配置"></a>2. 修改一下虚拟机网络配置</h2><p>选择菜单：<em><strong>编辑 - 虚拟网络编辑器</strong></em></p><p><img src="/20221102120000/image-20221202170729796.png" alt="虚拟机网络配置"></p><p><img src="/20221102120000/image-20221202170600947.png" alt="虚拟机网络配置(记住4的子网掩码和网关配置)"></p><h2 id="3-修改CentOS的网络配置"><a href="#3-修改CentOS的网络配置" class="headerlink" title="3. 修改CentOS的网络配置"></a>3. 修改CentOS的网络配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改CentOS的网络配置（如果文件内容为空请检查是否存在该文件）</span><br>vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改内容</span><br>IPADDR=192.168.200.123 #centOS的ip地址<br>NETMASK=255.255.255.0 #虚拟机中配置的子网掩码<br>GATEWAY=192.168.200.2 #虚拟机中配置的网关<br></code></pre></td></tr></table></figure><p><img src="/20221102120000/image-20221202171259344.png" alt="CentOS 7网络配置"></p><p>修改后重启网络服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">重启网络服务</span><br>service network restart<br></code></pre></td></tr></table></figure><p>再测试是否能ping通百度服务器，应该是可以了的。</p>]]></content>
    
    
    <categories>
      
      <category>解决方案</category>
      
      <category>虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>CentOS</tag>
      
      <tag>虚拟机</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA初始化设置</title>
    <link href="/20221101120000/"/>
    <url>/20221101120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章主要是介绍一些个人常用的idea设置，用于后续初始化idea后进行一些常规设置。</p><p>说明：文章中使用的idea版本为：<code>2021.3.3</code></p></blockquote><h1 id="1-全局设置"><a href="#1-全局设置" class="headerlink" title="1. 全局设置"></a>1. 全局设置</h1><p>全局设置打开方式：启动页-Customize-All settings…</p><p>（如果是打开项目后再进行设置的话是仅对项目有效）</p><p><img src="/20221101120000/image-20221209111557607.png" alt="全局设置"></p><h2 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h2><p>Editor&gt;File encoding</p><p><img src="/20221101120000/image-20221209110958561.png" alt="编码设置"></p><h2 id="自动导包设置"><a href="#自动导包设置" class="headerlink" title="自动导包设置"></a>自动导包设置</h2><p>Editor&gt;Auto import</p><p><img src="/20221101120000/image-20221209111818715.png" alt="自动导包设置"></p><h2 id="项目文件窗口不显示-idea-和-iml-文件"><a href="#项目文件窗口不显示-idea-和-iml-文件" class="headerlink" title="项目文件窗口不显示 .idea 和 *.iml 文件"></a>项目文件窗口不显示 .idea 和 *.iml 文件</h2><p>Editor&gt;File types，在tab中选择 <code>ignored files and folders</code></p><p><img src="/20221101120000/image-20221209112202384.png" alt="项目文件窗口不显示 .idea 和 *.iml 文件"></p><h2 id="Maven-设置"><a href="#Maven-设置" class="headerlink" title="Maven 设置"></a>Maven 设置</h2><p><img src="/20221101120000/image-20221209112516304.png" alt="Maven 设置"></p><h2 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h2><p><img src="/20221101120000/image-20221209112600157.png" alt="自动编译"></p><h2 id="忽略大小写，进行提示"><a href="#忽略大小写，进行提示" class="headerlink" title="忽略大小写，进行提示"></a>忽略大小写，进行提示</h2><p>Editor&gt;General&gt;Code completion</p><p><img src="/20221101120000/image-20221209112724902.png" alt="忽略大小写，进行提示"></p><h2 id="鼠标控制编辑区字体大小"><a href="#鼠标控制编辑区字体大小" class="headerlink" title="鼠标控制编辑区字体大小"></a>鼠标控制编辑区字体大小</h2><p>Editor&gt;General，Mouse Control</p><p><img src="/20221101120000/image-20221209113038919.png" alt="鼠标控制编辑区字体大小"></p><h1 id="2-非全局设置（项目设置）"><a href="#2-非全局设置（项目设置）" class="headerlink" title="2. 非全局设置（项目设置）"></a>2. 非全局设置（项目设置）</h1><p>在项目窗口，File&gt;Settings…</p><p><img src="/20221101120000/image-20221209113546160.png" alt="非全局设置"></p><h1 id="3-常用插件"><a href="#3-常用插件" class="headerlink" title="3. 常用插件"></a>3. 常用插件</h1><ul><li><p>ide-eval-reset，商店无法搜索到，可通过设置插件库地址为 <a href="https://plugins.zhile.io/">https://plugins.zhile.io</a> 获取。</p><p>注意：<em><strong>2021.3以及之后</strong></em> 的idea版本已无法使用。</p></li><li><p>MyBatis Log，可以完整输出带参数的sql语句，结合ide-eval-reset插件可以一直试用。</p></li><li><p>MyBatisCodeHelperPro (Marketplace Edition)，结合ide-eval-reset插件可以一直试用。</p></li><li><p>Alibaba Java Coding Guidelines，阿里巴巴代码检查工具。</p></li><li><p>CamelCase，代码驼峰转换工具。</p></li><li><p>HighlightBracketPair，用不同颜色标记前后括号、引号等成对符号。</p></li><li><p>Key Promoter X，快捷键提示工具。</p></li><li><p>Maven Helper，可以查看maven依赖。</p></li><li><p>Translation，翻译插件。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA设置</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客网站搭建（Hexo+Github Page）</title>
    <link href="/20220101010101/"/>
    <url>/20220101010101/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章主要介绍如何通过 Hexo 和 Github Page 来搭建博客网站。</p></blockquote><h2 id="1-安装NodeJS"><a href="#1-安装NodeJS" class="headerlink" title="1. 安装NodeJS"></a>1. 安装NodeJS</h2><ul><li><p>由于Hexo是基于Node.js驱动的一款博客框架，所以需要安装NodeJS，<a href="https://nodejs.org/zh-cn/">官网下载地址</a>。</p><p>如果下载下载较慢，可以尝试<a href="http://nodejs.cn/download/current/">这个链接</a>。</p></li><li><p>安装完执行命令 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功（出现版本号即为安装成功）。</p></li></ul><p><img src="/20220101010101/image-20221119000442361.png" alt="查看NodeJS版本信息"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h2><ul><li><p>下载git，<a href="https://git-scm.com/">Git下载地址</a>。</p></li><li><p>注册github账号。</p></li><li><p>Git配置，打开git bash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局配置用户信息：用户名和邮箱。将会为git提交时的默认的用户信息。如果不需要可以暂时不配置。</span><br>git config --global user.name &quot;名称&quot;<br>git config --global user.email &quot;github邮箱&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置列表</span><br>git config --list<br></code></pre></td></tr></table></figure></li><li><p>安装完执行命令 <code>git --version</code> 确认git安装是否成功（出现版本号即为安装成功）。</p></li></ul><p><img src="/20220101010101/image-20221119001545371.png" alt="查看Git版本信息"></p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><ul><li><p>以上环境准备好了之后，就可以使用 npm 开始安装 Hexo 了，在命令行输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><img src="/20220101010101/image-20221119001332746.png" alt="安装hexo-cli"></p></li><li><p>Hexo安装完成后，选择一个需要放置博客文件的文件夹，这里我选择D盘的doc文件夹，进入文件夹中，右键后选择“Git Bash Here”打开命令行终端。</p><p><img src="/20220101010101/image-20221119004605442.png" alt="image-20221119004605442"></p></li><li><p>输入命令，创建一个名为 <em>MyBlog</em> 的文件夹并初始化相关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init MyBlog<br>cd MyBlog<br>npm install<br></code></pre></td></tr></table></figure></li><li><p>如果以上命令执行过程中都没有报错的话，那么就算安装成功了，接着运行  <code>hexo s</code> 命令来启动项目（其中 s 是 server 的缩写，我这里就输入全拼），启动成功就能看到访问的地址了 <code>http://localhost:4000/</code> （注意：这里不能通过 Ctrl+C 来复制，从提示可以看出这是终止服务的快捷键，可以右键Copy）</p><p><img src="/20220101010101/image-20221119005719242.png" alt="image-20221119005719242"></p><p><img src="/20220101010101/image-20221119010141249.png" alt="image-20221119010141249"></p></li></ul><h3 id="3-1-Hexo-主题修改（以NexT主题为例）"><a href="#3-1-Hexo-主题修改（以NexT主题为例）" class="headerlink" title="3.1 Hexo 主题修改（以NexT主题为例）"></a>3.1 Hexo 主题修改（以NexT主题为例）</h3><ul><li><p><a href="https://hexo.io/themes/">官方主题页</a>。</p></li><li><p>这里我们以较多用户使用的 <em>NexT主题</em> 配置为例，在主题页搜索 <em>next</em> ，选择 <em>NexT</em> 主题，就能进入 Github 页面，就可以看到具体的使用说明文档了。</p><p><img src="/20220101010101/image-20221119011310831.png" alt="主题搜索"></p></li></ul><p><img src="/20220101010101/image-20221119011531221.png" alt="NexT主题"></p><ul><li><p>进入前面创建的 <em>MyBlog</em> 文件夹，打开 <em>git bash</em> 命令窗口，通过以下命令安装主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-theme-next<br></code></pre></td></tr></table></figure><p>或者直接将主题包复制下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/next-theme/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p><em>两种主题安装方式任选一种就行，我这边选择的是第二种，第二条命令是将主题包直接复制到  <strong>MyBlog</strong> 的 <strong>themes&#x2F;next</strong> 文件目录中（比较通用的一种主题安装方式）。Hexo中，themes就是存放主题配置的目录。</em></p><p><img src="/20220101010101/image-20221119013012747.png" alt="image-20221119013012747"></p></li><li><p>主题下载成功后，打开 <em>MyBlog</em> 目录下的 <em><strong>_config.yml</strong></em> 文件（可以使用记事本打开），找到 <em><strong>theme</strong></em> 配置，修改为新的主题名称，主题名称同 <em>themes</em> 下的文件夹名。</p><p><strong>注意，这边的yml的配置，所以冒号后面一定要记得加空格。</strong></p><p><img src="/20220101010101/image-20221121161352813.png" alt="image-20221121161352813"></p></li><li><p>修改之后在 <em>git bash</em> 命令行中执行 <code>hexo g</code> 命令（g 是 generate 的缩写），然后再使用命令 <code>hexo s</code> 启动，再访问 <code>http://localhost:4000/</code> 就能看到新的主题了。</p></li></ul><h3 id="3-2-Hexo-主题配置文件"><a href="#3-2-Hexo-主题配置文件" class="headerlink" title="3.2 Hexo 主题配置文件"></a>3.2 Hexo 主题配置文件</h3><ul><li><p>通过修改 Hexo 主题我们知道了，在 <em><strong>themes</strong></em> 文件目录中的文件夹就是对应的主题，所以如果要修改主题的一些配置，我们就要修改<strong>主题的文件夹中</strong>的 <em><strong>_config.yml</strong></em> 文件。</p><p><img src="/20220101010101/image-20221119015827992.png" alt="image-20221119015827992"></p></li></ul><h2 id="4-将博客部署到Github上"><a href="#4-将博客部署到Github上" class="headerlink" title="4. 将博客部署到Github上"></a>4. 将博客部署到Github上</h2><ul><li><p>进入<a href="https://github.com/">Github官网</a>进行账号注册。</p></li><li><p>账号注册成功后，建立一个新的仓库，github仅能使用一个同名仓库的代码作为一个静态站点，所以仓库名一定要是： <code>用户名.github.io</code></p><p><img src="/20220101010101/image-20221121104502552.png" alt="image-20221121104502552"></p></li><li><p>配置SSH key，要使用git工具需要先配置一下SSH key，为部署本地博客到Github做准备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">非全局配置，仅当前项目生效</span><br>git config user.name &quot;用户名&quot;<br>git config user.email &quot;邮箱地址&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ssh key，这个必须是github的注册邮箱</span><br>ssh-keygen -t rsa -C &quot;git注册邮箱&quot;<br></code></pre></td></tr></table></figure></li><li><p>查看 SSH key 公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>Github上配置 SSH key </p><p>点击头像 -&gt; settings -&gt; SSH and GPG keys，New SSH key，将查看到的  SSH key 公钥内容全部复制粘贴进去。</p></li><li><p>测试连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure></li><li><p>修改 <em>MyBolg</em> 的配置文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/binbiubiu/binbiubiu.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>安装发布插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>博客项目部署到github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清除缓存数据（可选，建议发布前清一下）</span><br>hexo clean<br><span class="hljs-meta prompt_"># </span><span class="language-bash">先生成项目</span><br>hexo g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">再部署到github</span><br>hexo d<br></code></pre></td></tr></table></figure></li><li><p>访问网站 <code>用户名.github.io</code></p></li></ul><h2 id="5-写文章"><a href="#5-写文章" class="headerlink" title="5. 写文章"></a>5. 写文章</h2><ul><li><p>在 <em>MyBlog</em> 中通过命令行创建文章的 <em>.md</em> 文件</p><p>其他的命令可以参考 <a href="https://hexo.io/zh-cn/docs/writing">官方文档</a> 进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new 文章标题<br></code></pre></td></tr></table></figure><p>执行完成后，会在 <em>source&#x2F;_posts</em> 目录下看到一个名为 <em><strong>文章标题.md</strong></em> 的文章文件啦。</p></li></ul><h2 id="6-图片无法显示-图片丢失问题"><a href="#6-图片无法显示-图片丢失问题" class="headerlink" title="6. 图片无法显示 - 图片丢失问题"></a>6. 图片无法显示 - 图片丢失问题</h2><p><img src="/20220101010101/image-20230310012750690.png" alt="图片丢失"></p><blockquote><p>我们在md文件中插入了图片，Hexo生成后打开服务却发现找不到图片，需要修改图片设置。</p></blockquote><h3 id="6-1-解决方案-修改配置文件"><a href="#6-1-解决方案-修改配置文件" class="headerlink" title="6.1 解决方案 - 修改配置文件"></a>6.1 解决方案 - 修改配置文件</h3><ul><li><p>修改 Typora 的设置：文件 -&gt; 偏好设置 -&gt; 图像，修改为“插入图片时<em><strong>复制到指定路径</strong></em>”，下方的选项选择“***.&#x2F;${filename}***”（即：当前md文件路径对应的同名文件夹下，如果没有，会自动创建）。</p><img src="/20220101010101/image-20221121165950895.png" alt="image-20221121165950895" style="zoom:80%;"></li></ul><img src="/20220101010101/image-20221121170352273.png" alt="image-20221121170352273" style="zoom: 80%;"><p><img src="/20220101010101/image-20221121170814999.png" alt="同名图片资源文件夹"></p><ul><li><p>修改Hexo配置。</p><p>修改 <em><strong>MyBlog&#x2F;_config.yml</strong></em> 文件中的 <em><strong>post_asset_folder</strong></em> 的值为 <em><strong>true</strong></em>。</p><p><img src="/20220101010101/image-20221121172551535.png" alt="image-20221121172551535"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装图片插件</span><br>npm install https://github.com/CodeFalling/hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>同样地，在 Hexo 目录的 <em><strong>source&#x2F;_posts</strong></em> 目录中，创建md文件的同名文件夹，将图片资源放在这个文件夹中即可，这样在 Hexo 发布时，也同样会把图片资源进行发布。</p></li></ul><p><img src="/20220101010101/image-20221121171140146.png" alt="同名图片资源文件夹"></p><h3 id="6-2-解决方案-配置图床"><a href="#6-2-解决方案-配置图床" class="headerlink" title="6.2 解决方案 - 配置图床"></a>6.2 解决方案 - 配置图床</h3><ul><li><p>利用图床，在使用 Typora 编辑时，将图片上传至图床，md中图片直接访问图床的图片链接。</p><p><a href="https://cjc34.gitee.io/2022/10/26/hexo%E9%85%8D%E5%90%88typora/">方案参考链接</a></p></li></ul><h2 id="7-图片无法显示-文件解析失败"><a href="#7-图片无法显示-文件解析失败" class="headerlink" title="7. 图片无法显示 - 文件解析失败"></a>7. 图片无法显示 - 文件解析失败</h2><p><img src="/20220101010101/image-20230309023012184.png" alt="文件解析失败导致的图片无法显示"></p><p>可能原因：</p><ol><li><p>可能是.md文件的命名包含特殊字符导致的（比如 <code>+</code>、<code>（）</code>、<code>-</code> 、<code>空格</code> 等，hexo在解析时可能会出现异常）</p><p>解决方案：避免文件名中使用特殊字符。</p></li><li><p>其他的 .md 文件中出现了语法错误，导致hexo的整个解析都出现了异常。</p><p>解决方案：需要逐个文件确认，尤其是网上复制过来的文章及内容。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>Hexo</tag>
      
      <tag>Github Page</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用手册</title>
    <link href="/20200805120000/"/>
    <url>/20200805120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍git的使用入门，包括安装、配置、常用命令。</p></blockquote><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>本文以 Linux环境安装为例，windows系统大同小异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">linux安装git</span><br>yum install git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过查看安装版本信息看是否安装成功</span><br>git --version<br></code></pre></td></tr></table></figure><h1 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h1><ol><li><p>基本配置（命令行方式配置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置用户信息：（提交时的用户信息）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不建议设置 global 的用户属性，建议只在某一本地仓库进行设置</span><br>git config --global user.name &quot;test&quot;<br>git config --global user.email &quot;test@abc.com&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置提交信息编码(值不能有引号,如果有的话在idea里面会报错)</span><br>git config --global gui.encoding utf-8<br>git config --global i18n.commitencoding utf-8<br>git config --global i18n.logoutputencoding utf-8<br>git config --global svn.pathnameencoding utf-8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置信息</span><br>git config --global --list<br>git config --list<br></code></pre></td></tr></table></figure></li><li><p>授权配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成授信证书</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第一次回车，会让输入生成的文件名，为空就是默认。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二次回车，会让输入生成的密码，为空就是默认。</span><br>ssh-keygen -t rsa -C test@abc.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">到证书目录查看生成的证书。<span class="hljs-built_in">ls</span> 即可查看到生成的文件。id_rsa 和 id_rsa.pub，.pub文件是公钥，另一个是私钥。</span><br>cd ~/.ssh/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看公钥内容并复制</span><br>cat id_rsa.pub<br></code></pre></td></tr></table></figure><p>然后将git证书配置到代码托管平台（如：github或者gitlab），使得Linux服务器与github之间可以连通。</p><ul><li><p>配置github</p><ol><li><p><a href="https://github.com/">登陆github</a>。</p></li><li><p>点击用户头像 &gt; settings &gt; SSH and GPG keys &gt; 选择 New SSH key。title 自定义，key 为 id_rsa.pub 中的内容，然后单击add。</p></li><li><p>测试连接，回到Linux服务器，命令行输入：ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#104;&#117;&#x62;&#46;&#x63;&#x6f;&#109;</a></p><p>连接成功后会提示 Hi xxx! You’ve successfully authenticated…</p></li></ol></li><li><p>配置gitlab</p><ol><li><p>进入gitlab平台。</p><p><img src="/20200805120000/image-20230308234558076.png" alt="image-20230308234558076"></p><p><img src="/20200805120000/image-20230308234619650.png" alt="image-20230308234619650"></p></li><li><p>连接测试：ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x6c;&#x61;&#x62;&#x2e;&#x63;&#x6f;&#x6d;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#x6c;&#x61;&#x62;&#x2e;&#x63;&#x6f;&#x6d;</a></p></li></ol></li></ul></li></ol><h1 id="3-两种Git连接方式"><a href="#3-两种Git连接方式" class="headerlink" title="3. 两种Git连接方式"></a>3. 两种Git连接方式</h1><ol><li><p>SSH链接和HTTPS链接。</p></li><li><p>SSH链接和HTTPS链接的不同：</p><ul><li><p>通过SSH连接获取代码、提交代码的时候不需要输入密码，需要事先配置公钥。</p></li><li><p>通过HTTPS连接获取代码、提交代码的时候需要输入密码。并且：使用该方式进行提交代码的时候，用户需要配有相关权限。</p></li></ul></li></ol><h1 id="4-基本使用命令"><a href="#4-基本使用命令" class="headerlink" title="4. 基本使用命令"></a>4. 基本使用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化当前文件夹为git目录</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关联远程仓库</span><br>git remote add origin https://gitlab.com/RainbowRing/test.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">推送以建立连接</span><br>git push -u origin master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看git状态（文件提交状态）</span><br>git status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加文件到暂存区</span><br>git add 文件路径<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交到本地仓库</span><br>git commit -m &#x27;提交信息&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交代码到远程仓库</span><br>git push<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取远程代码到本地（本地新建一个远程仓库的副本）</span><br>git clone git@gitlab.com:xxx/yyy.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>git clone https://gitlab.com/xxx/yyy.git<br><br></code></pre></td></tr></table></figure><h2 id="git中一些参数选项解释"><a href="#git中一些参数选项解释" class="headerlink" title="git中一些参数选项解释"></a>git中一些参数选项解释</h2><table><thead><tr><th align="center">参数</th><th align="center">参数全名</th><th align="center">释意</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">–force</td><td align="center">强制</td></tr><tr><td align="center">-d</td><td align="center">–delete</td><td align="center">删除</td></tr><tr><td align="center">-D</td><td align="center">–delete –force</td><td align="center">强制删除</td></tr><tr><td align="center">-m</td><td align="center">–move</td><td align="center">移动或重命名</td></tr><tr><td align="center">-M</td><td align="center">–move –force</td><td align="center">强制移动或重命名</td></tr><tr><td align="center">-r</td><td align="center">–remote</td><td align="center">远程</td></tr><tr><td align="center">-a</td><td align="center">–all</td><td align="center">所有</td></tr></tbody></table><h1 id="5-仓库的关联命令"><a href="#5-仓库的关联命令" class="headerlink" title="5. 仓库的关联命令"></a>5. 仓库的关联命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">改变原有关联的远程仓库地址</span><br>git remote set-url origin git@gitlab.com:RainbowRing/fromGithub.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示远程origin地址</span><br>git remote show origin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果遇到“fatal: 远程 origin 已经存在。”问题，解决方案：将远程配置删除，重新添加即可</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程配置</span><br>git remote rm origin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加远程配置</span><br>git remote add origin https://github.com/xxx/xxx.git<br></code></pre></td></tr></table></figure><h1 id="6-分支的基本操作"><a href="#6-分支的基本操作" class="headerlink" title="6. 分支的基本操作"></a>6. 分支的基本操作</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地所有分支</span><br>git branch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程所有分支</span><br>git branch -r  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地和远程的所有分支</span><br>git branch -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建分支</span><br>git branch &lt;branchname&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地分支</span><br>git branch -d &lt;branchname&gt; // <br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程分支，删除后还需推送到服务器</span><br>git branch -d -r &lt;branchname&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除后推送至服务器</span><br>git push origin:&lt;branchname&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重命名本地分支</span><br>git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重命名远程分支：</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">1、删除远程待修改分支</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">2、push本地新分支到远程服务器</span><br></code></pre></td></tr></table></figure><h1 id="7-Git工作模型介绍"><a href="#7-Git工作模型介绍" class="headerlink" title="7. Git工作模型介绍"></a>7. Git工作模型介绍</h1><h2 id="7-1-工作流模型（结合命令）"><a href="#7-1-工作流模型（结合命令）" class="headerlink" title="7.1. 工作流模型（结合命令）"></a>7.1. 工作流模型（结合命令）</h2><p><img src="/20200805120000/image-20230309000444555.png" alt="Git工作流模型"></p><p>Git中代码有三个大环节：暂存区 -&gt; 本地仓库 -&gt; 远程仓库</p><p>对应Git命令说明：</p><ol><li><p>git init</p><p>创建一个本地Repository（也可以通过git clone拉取代码的方式创建一个已经关联远程仓库的本地仓库）。</p></li><li><p>git remote add origin <a href="https://gitlab.com/xxx/yyy.git">https://gitlab.com/xxx/yyy.git</a></p><p>关联远程仓库。</p></li><li><p>git add</p><p>将本地 workspace 内的代码添加近版本控制（即添加进暂存区）。</p></li><li><p>git commit -m ‘提交信息’</p><p>提交到本地仓库（图中Repository）。</p></li><li><p>git push</p><p>提交代码到远程仓库（图中Remote）。</p><p>这也就是svn用户初次使用git会有”为什么要‘提交’两次”的疑惑的原因了。</p></li></ol><h2 id="7-2-版本控制模型"><a href="#7-2-版本控制模型" class="headerlink" title="7.2. 版本控制模型"></a>7.2. 版本控制模型</h2><p><img src="/20200805120000/image-20230309000842601.png" alt="Git版本控制模型"></p><h1 id="8-其他使用问题"><a href="#8-其他使用问题" class="headerlink" title="8. 其他使用问题"></a>8. 其他使用问题</h1><h2 id="git中如何将已commit的代码commit到其它分支"><a href="#git中如何将已commit的代码commit到其它分支" class="headerlink" title="git中如何将已commit的代码commit到其它分支"></a>git中如何将已commit的代码commit到其它分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示已经提交的提交编码</span><br>git log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换分支</span><br>git checkout develop<br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过版本编码更新代码</span><br>git cherry-pick [commit id]<br></code></pre></td></tr></table></figure><h2 id="git-push详解"><a href="#git-push详解" class="headerlink" title="git push详解"></a>git push详解</h2><p>👉<a href="https://www.cnblogs.com/guojuboke/p/12750842.html">参考链接</a></p><h2 id="IDEA中解决-git-pull-冲突"><a href="#IDEA中解决-git-pull-冲突" class="headerlink" title="IDEA中解决 git pull 冲突"></a>IDEA中解决 git pull 冲突</h2><p>👉<a href="https://blog.csdn.net/qq_32118691/article/details/106015780">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Git命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins自动化部署脚本</title>
    <link href="/20200723120000/"/>
    <url>/20200723120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录学习Jenkins时，自动化部署tomcat项目的脚本。</p></blockquote><p>新建 <code>deploy.sh</code> 脚本文件，文件内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br>: &lt;&lt; !<br><span class="hljs-comment"># 该注释内容为 Jenkins 中的shell脚本</span><br><span class="hljs-comment"># 表示部署完不kill进程，jenkins进程执行完会自动关闭，否则会把启动的server也关闭掉，</span><br>BUILD_ID=DONTKILLME<br><span class="hljs-comment"># 加载配置文件</span><br>. /etc/profile<br><br><span class="hljs-comment"># 执行.sh前需要配置(声明)如下参数</span><br><span class="hljs-comment"># 1.服务器上项目路径(不含项目名)</span><br><span class="hljs-built_in">export</span> PROJECT_PATH=/root/projects/java<br><br><span class="hljs-comment"># 2.项目名,同xxx.git</span><br><span class="hljs-built_in">export</span> PROJECT_NAME=LoginDemo<br><br><span class="hljs-comment"># 3.tomcat在服务机器上的全路径</span><br><span class="hljs-built_in">export</span> TOMCAT_PATH=/root/apache-tomcat-9.0.37<br><br><span class="hljs-comment"># 4.运行部署脚本（项目目录下的deploy.sh脚本）</span><br>sh <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span>/deploy.sh<br>!<br><br><br><span class="hljs-comment"># 以下为脚本正文：</span><br><span class="hljs-comment"># 自动部署步骤：git同步最新代码 &gt; maven 打包 &gt; 停止tomcat &gt; 部署应用 &gt; 启动tomcat</span><br><br><span class="hljs-comment">### 函数:关闭tomcat(也可以通过 Tomcat 的 shutdown.sh 停止服务器)</span><br><span class="hljs-function"><span class="hljs-title">killTomcat</span></span>()<br>&#123;<br>    pid=`ps -ef|grep tomcat|grep java|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tomcat Id list :<span class="hljs-variable">$pid</span>&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$pid</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]<br>    <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no tomcat pid alive&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$pid</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 删除本地旧代码(文件夹)</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span><br><span class="hljs-comment"># 拉取新代码</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$PROJECT_PATH</span><br>git <span class="hljs-built_in">clone</span> git@gitlab.com:RainbowRing/LoginDemo.git<br><br><span class="hljs-comment"># 构建项目</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span><br>mvn clean install<br><br><span class="hljs-comment"># 停止tomcat</span><br>killTomcat<br><br><span class="hljs-comment"># 删除原有工程</span><br><span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$TOMCAT_PATH</span>/webapps/<span class="hljs-variable">$PROJECT_NAME</span>.war<br><br><span class="hljs-comment"># 复制maven打包后的工程到tomcat的webapps目录下</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span>/target/<span class="hljs-variable">$PROJECT_NAME</span>.war <span class="hljs-variable">$TOMCAT_PATH</span>/webapps/<br><br><span class="hljs-comment"># 重命名工程(如果需要的话)</span><br><span class="hljs-comment">#cd $TOMCAT_PATH/webapps/</span><br><span class="hljs-comment">#mv LoginDemo loginDemo</span><br><br><span class="hljs-comment"># 启动Tomcat</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$TOMCAT_PATH</span>/<br>sh bin/startup.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>Jenkins脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IE浏览器部分网站中文无法正常显示问题</title>
    <link href="/20200722120000/"/>
    <url>/20200722120000/</url>
    
    <content type="html"><![CDATA[<h1 id="IE浏览器部分网站中文无法正常显示问题"><a href="#IE浏览器部分网站中文无法正常显示问题" class="headerlink" title="IE浏览器部分网站中文无法正常显示问题"></a>IE浏览器部分网站中文无法正常显示问题</h1><p>问题描述：IE浏览器部分网站中文无法正常显示，显示为英文。</p><p>问题说明：由于 IE11 中微软弃用了 zh_CN 语言，进而采用 zh_hans_CN， 造成前台请求后台数据后，前台页面不能正常国际化问题。</p><p>解决方案：</p><ul><li><p>方案1. 修改windows注册表信息。</p><p>新建一个 <code>xxx.reg</code> 文件，内容如下：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br><br>[HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\International]<br><span class="hljs-string">&quot;AcceptLanguage&quot;</span>=<span class="hljs-string">&quot;zh-CN;zh-Hans-CN,zh-Nans;en-US;en;&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p>​保存后执行注册表文件即可。</p><ul><li><p>方案2. 如果是网站开发人员，可以修改网站的相关国际化配置来解决该问题。</p><p>可参考文章👉<a href="https://blog.csdn.net/juemodanqing/article/details/106226047">IE11 zh_HANS_CN国际化问题</a>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>解决方案</category>
      
      <category>IE浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IE浏览器</tag>
      
      <tag>汉化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins使用手册</title>
    <link href="/20200717120000/"/>
    <url>/20200717120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍Jenkins的安装与使用。</p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>👉<a href="https://www.jenkins.io/">Jenkins官网</a> 的 <a href="https://www.jenkins.io/zh/download/">下载页面</a>。</p><p>windows就下载for windows版本的（这里以windows环境安装为例）。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><img src="/20200717120000/image-20230309002331438.png" alt="Jenkins安装"></p><p>安装完毕后会自动进入登陆页面：</p><p><img src="/20200717120000/image-20230309002401085.png" alt="Jenkins登陆页面"></p><h1 id="配置与使用"><a href="#配置与使用" class="headerlink" title="配置与使用"></a>配置与使用</h1><p>第一次启动你可能会有这样的问题：它会一直在这个登录页面自动刷新。</p><p>主要原因是Jenkins在启动的时候会去加载相关镜像文件，默认的镜像文件配置地址对我们比较不友好（你懂的），这就需要我们手动修改这个文件。</p><h2 id="镜像配置"><a href="#镜像配置" class="headerlink" title="镜像配置"></a>镜像配置</h2><p>在Jenkins安装目录下，找到 <code>hudson.model.UpdateCenter.xml</code> 文件，打开并修改url为：<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></p><p><img src="/20200717120000/image-20230309002900344.png" alt="镜像配置"></p><p><img src="/20200717120000/image-20230309002914803.png" alt="镜像配置"></p><p>修改后需要重启Jenkins服务。</p><p>当然你也有可能遇到端口冲突的问题，那么来修改一下端口吧。</p><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>在安装目录下找到 <code>Jenkins.xml</code> 文件，这个就是端口配置的文件了。</p><h2 id="启动Jenkins服务"><a href="#启动Jenkins服务" class="headerlink" title="启动Jenkins服务"></a>启动Jenkins服务</h2><p>如果是通过msi方式安装Jenkins的话（比如本安装教程），需要在系统的“服务”中找到Jenkins服务，点击重启即可（可自行百度怎么进入服务管理页面，这里直接用搜索工具进入）</p><p><img src="/20200717120000/image-20230309003131885.png" alt="windows启动Jenkins服务"></p><p><img src="/20200717120000/image-20230309003139392.png" alt="windows启动Jenkins服务"></p><p>重启后再进入登陆页面就可以正常进入了：</p><p><img src="/20200717120000/image-20230309003155681.png" alt="Jenkins首次登录页面"></p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><p>第一次登陆时需要修改密码，密码在页面上有提示其文件地址（在安装目录下 <code>\secrets\initialAdminPassword</code> 文件中），打开这个文件就能看到初始化密码了。</p><p><img src="/20200717120000/image-20230309003243071.png" alt="初始化密码"></p><p>将其复制进页面的输入框即可进入自定义Jenkins页面，这里选择第一个“安装推荐的插件”。</p><p><img src="/20200717120000/image-20230309003304652.png" alt="首次插件安装"></p><p><img src="/20200717120000/image-20230309003313434.png" alt="首次插件安装"></p><p>若有部分插件安装失败，可以点“重试”，或者点击“继续”以后再安装。</p><p><img src="/20200717120000/image-20230309003337074.png" alt="首次插件安装"></p><p>点击继续后就进入了初始化账户的页面：</p><p><img src="/20200717120000/image-20230309003350745.png" alt="初始化账户"></p><p>最后一步可能会提示你部分插件重启，那我们就点击重启，也可以手动重启服务。</p><p>重启后的登陆页面就变了：</p><p><img src="/20200717120000/image-20230309003406451.png" alt="登录页面"></p><p>输入刚才配置的账户密码即可进入功能页面了：</p><p><img src="/20200717120000/image-20230309003425900.png" alt="工作台"></p><h2 id="添加插件（自选）"><a href="#添加插件（自选）" class="headerlink" title="添加插件（自选）"></a>添加插件（自选）</h2><p>管理Jenkins &gt; 插件管理 &gt; 可选插件 &gt; 搜索框</p><p><img src="/20200717120000/image-20230309003444965.png" alt="插件安装"></p><p><img src="/20200717120000/image-20230309003449283.png" alt="插件安装"></p><p><img src="/20200717120000/image-20230309003453813-1678293294326-1.png" alt="插件安装"></p><p><img src="/20200717120000/image-20230309003503103.png" alt="插件安装"></p><p>这里我安装了：</p><ul><li>常用插件：Rebuilder、safe restart</li><li>Git相关插件：GitLab、GitLab API  </li><li>SSH相关插件：SSH Agent、SSH</li></ul><h2 id="用户及权限配置"><a href="#用户及权限配置" class="headerlink" title="用户及权限配置"></a>用户及权限配置</h2><h3 id="添加自定义用户"><a href="#添加自定义用户" class="headerlink" title="添加自定义用户"></a>添加自定义用户</h3><p>管理Jenkins &gt; Security &gt; 用户管理 &gt; 新建用户</p><p>新建用户后需要给该用户授权。</p><p>（这里我创建了一个test01用户）</p><h3 id="配置全局安全属性（授权）"><a href="#配置全局安全属性（授权）" class="headerlink" title="配置全局安全属性（授权）"></a>配置全局安全属性（授权）</h3><p>管理Jenkins &gt; Security &gt; Configure Global Security</p><p>在“授权策略”中选择“安全矩阵” &gt; 添加用户&#x2F;组，添加用户后，可以在表格中进行勾选，勾选后点击保存（表格最后面有个全选按钮）。例如：如果不想要给予用户访问系统管理的权限，全勾选后去掉第一项。</p><p><img src="/20200717120000/image-20230309003701457.png" alt="配置全局安全属性（授权）"></p><h2 id="将Linux注册到Jenkins上"><a href="#将Linux注册到Jenkins上" class="headerlink" title="将Linux注册到Jenkins上"></a>将Linux注册到Jenkins上</h2><h3 id="新建节点"><a href="#新建节点" class="headerlink" title="新建节点"></a>新建节点</h3><p>进入Jenkins，管理Jenkins &gt; 管理节点 &gt; 新建节点</p><p>输入name</p><p>远程工作目录：&#x2F;root&#x2F;.jenkins</p><p>​    启动方法：launch slave agents via SSH</p><p>​    主机：linux 的ip地址，</p><p>点击 credentials 下的 add 按钮，添加用户名和密码（linux的账户密码），添加完成后通过下拉框选择</p><p>​    保存</p><p><img src="/20200717120000/image-20230309003740927.png" alt="管理节点"></p><p><img src="/20200717120000/image-20230309003748084.png" alt="新建节点"></p><p>（新版本的启动方式是 launch agents via SSH，需要将 Host Key Verification Strategy 修改为 Non verifying Verification Strategy）</p><h3 id="测试节点"><a href="#测试节点" class="headerlink" title="测试节点"></a>测试节点</h3><p>在jenkins的节点页面，选择上一步新增的节点，点击节点名，进入页面后点击 launch agent 按钮(或者启动代理)即可连接。</p><p><img src="/20200717120000/image-20230309003820212.png" alt="测试节点"></p><p><img src="/20200717120000/image-20230309003825982.png" alt="测试节点"></p><p>节点配置好了，现在开始新建一个任务吧！</p><h2 id="任务创建与构建"><a href="#任务创建与构建" class="headerlink" title="任务创建与构建"></a>任务创建与构建</h2><ol><li><p>在Jenkins主页，新建一个任务 &gt; 构建一个自由风格的软件项目 &gt; OK。</p></li><li><p>在General标签页，勾选 Restrict where this project can be run，在 Label Expression中输入刚才创建的Linux环境的名称（只允许在指定环境上运行）。</p></li><li><p>在构建标签页，增加构建步骤，excute shell，输入要执行的命令（如 ifconfig）。</p></li><li><p>保存。</p></li><li><p>回到Jenkins主页，点击立即构建。</p></li><li><p>执行完毕后，点击下方的执行记录的任务名（如#1），进入任务详情页，点击 console output ，就可以看到刚才的命令（ifconfig）输出了。</p></li></ol><p><img src="/20200717120000/image-20230309003907541.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003913189.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003921720.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003928911.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003935299.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004004086.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004014886.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004026782.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004040680.png" alt="任务创建与构建"></p><h2 id="本次分享中的构建脚本示例"><a href="#本次分享中的构建脚本示例" class="headerlink" title="本次分享中的构建脚本示例"></a>本次分享中的构建脚本示例</h2><p><img src="/20200717120000/image-20230309004059676.png" alt="构建脚本示例"></p><p>另外，Jenkins也可以实现定时任务自动构建（已演示）。</p><p><img src="/20200717120000/image-20230309004138691.png" alt="构建触发器"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本次分享中未涉及Jenkins与git持续集成，如果有类似“在提交代码到服务器后能够自动构建“的需求，可网上自行搜索解决方案，这里可以提供一个方案参考：webhook。</p>]]></content>
    
    
    <categories>
      
      <category>技术教程</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
