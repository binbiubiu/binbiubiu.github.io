<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Redis高级篇 - 分布式缓存</title>
    <link href="/20221205140000/"/>
    <url>/20221205140000/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h1><p>基于Redis集群解决单机Redis存在的问题</p><p>单机的Redis存在四大问题：</p><p><img src="/20221205140000/image-20210725144240631.png" alt="单机的Redis存在四大问题"></p><h1 id="1-Redis持久化"><a href="#1-Redis持久化" class="headerlink" title="1.Redis持久化"></a>1.Redis持久化</h1><p>Redis有两种持久化方案：</p><ul><li>RDB持久化</li><li>AOF持久化</li></ul><h2 id="1-1-RDB持久化"><a href="#1-1-RDB持久化" class="headerlink" title="1.1.RDB持久化"></a>1.1.RDB持久化</h2><p>RDB全称Redis Database Backup file（Redis数据备份文件），也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。快照文件称为RDB文件，默认是保存在当前运行目录。</p><h3 id="1-1-1-执行时机"><a href="#1-1-1-执行时机" class="headerlink" title="1.1.1.执行时机"></a>1.1.1.执行时机</h3><p>RDB持久化在四种情况下会执行：</p><ul><li>执行save命令</li><li>执行bgsave命令</li><li>Redis停机时</li><li>触发RDB条件时</li></ul><p><strong>1）save命令</strong></p><p>执行下面的命令，可以立即执行一次RDB：</p><p><img src="/20221205140000/image-20210725144536958.png" alt="image-20210725144536958"></p><p>save命令会导致主进程执行RDB，这个过程中其它所有命令都会被阻塞。只有在数据迁移时可能用到。</p><p><strong>2）bgsave命令</strong></p><p>下面的命令可以异步执行RDB：</p><p><img src="/20221205140000/image-20210725144725943.png" alt="image-20210725144725943"></p><p>这个命令执行后会开启独立进程完成RDB，主进程可以持续处理用户请求，不受影响。</p><p><strong>3）停机时</strong></p><p>Redis停机时会执行一次save命令，实现RDB持久化。</p><p><strong>4）触发RDB条件</strong></p><p>Redis内部有触发RDB的机制，可以在redis.conf文件中找到，格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 900秒内，如果至少有1个key被修改，则执行bgsave ， 如果是save &quot;&quot; 则表示禁用RDB</span><br><span class="hljs-attr">save</span> <span class="hljs-string">900 1  </span><br><span class="hljs-attr">save</span> <span class="hljs-string">300 10  </span><br><span class="hljs-attr">save</span> <span class="hljs-string">60 10000 </span><br></code></pre></td></tr></table></figure><p>RDB的其它配置也可以在redis.conf文件中设置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 是否压缩 ,建议不开启，压缩也会消耗cpu，磁盘的话不值钱</span><br><span class="hljs-attr">rdbcompression</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># RDB文件名称</span><br><span class="hljs-attr">dbfilename</span> <span class="hljs-string">dump.rdb  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 文件保存的路径目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">./ </span><br></code></pre></td></tr></table></figure><h3 id="1-1-2-RDB原理"><a href="#1-1-2-RDB原理" class="headerlink" title="1.1.2.RDB原理"></a>1.1.2.RDB原理</h3><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件。</p><p>fork采用的是copy-on-write技术：</p><ul><li>当主进程执行读操作时，访问共享内存；</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作。</li></ul><p><img src="/20221205140000/image-20210725151319695.png" alt="image-20210725151319695"></p><h3 id="1-1-3-小结"><a href="#1-1-3-小结" class="headerlink" title="1.1.3.小结"></a>1.1.3.小结</h3><p>RDB方式bgsave的基本流程？</p><ul><li>fork主进程得到一个子进程，共享内存空间</li><li>子进程读取内存数据并写入新的RDB文件</li><li>用新RDB文件替换旧的RDB文件</li></ul><p>RDB会在什么时候执行？save 60 1000代表什么含义？</p><ul><li>默认是服务停止时</li><li>代表60秒内至少执行1000次修改则触发RDB</li></ul><p>RDB的缺点？</p><ul><li>RDB执行间隔时间长，两次RDB之间写入数据有丢失的风险</li><li>fork子进程、压缩、写出RDB文件都比较耗时</li></ul><h2 id="1-2-AOF持久化"><a href="#1-2-AOF持久化" class="headerlink" title="1.2.AOF持久化"></a>1.2.AOF持久化</h2><h3 id="1-2-1-AOF原理"><a href="#1-2-1-AOF原理" class="headerlink" title="1.2.1.AOF原理"></a>1.2.1.AOF原理</h3><p>AOF全称为Append Only File（追加文件）。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p><p><img src="/20221205140000/image-20210725151543640.png" alt="image-20210725151543640"></p><h3 id="1-2-2-AOF配置"><a href="#1-2-2-AOF配置" class="headerlink" title="1.2.2.AOF配置"></a>1.2.2.AOF配置</h3><p>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 是否开启AOF功能，默认是no</span><br><span class="hljs-attr">appendonly</span> <span class="hljs-string">yes</span><br><span class="hljs-comment"># AOF文件的名称</span><br><span class="hljs-attr">appendfilename</span> <span class="hljs-string">&quot;appendonly.aof&quot;</span><br></code></pre></td></tr></table></figure><p>AOF的命令记录的频率也可以通过redis.conf文件来配：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 表示每执行一次写命令，立即记录到AOF文件</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">always </span><br><span class="hljs-comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">everysec </span><br><span class="hljs-comment"># 写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span><br><span class="hljs-attr">appendfsync</span> <span class="hljs-string">no</span><br></code></pre></td></tr></table></figure><p>三种策略对比：</p><p><img src="/20221205140000/image-20210725151654046.png" alt="image-20210725151654046"></p><h3 id="1-2-3-AOF文件重写"><a href="#1-2-3-AOF文件重写" class="headerlink" title="1.2.3.AOF文件重写"></a>1.2.3.AOF文件重写</h3><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对同一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="/20221205140000/image-20210725151729118.png" alt="image-20210725151729118"></p><p>如图，AOF原本有三个命令，但是<code>set num 123 和 set num 666</code>都是对num的操作，第二次会覆盖第一次的值，因此第一个命令记录下来没有意义。</p><p>所以重写命令后，AOF文件内容就是：<code>mset name jack num 666</code></p><p>Redis也会在触发阈值时自动去重写AOF文件。阈值也可以在redis.conf中配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># AOF文件比上次文件 增长超过多少百分比则触发重写</span><br><span class="hljs-attr">auto-aof-rewrite-percentage</span> <span class="hljs-string">100</span><br><span class="hljs-comment"># AOF文件体积最小多大以上才触发重写 </span><br><span class="hljs-attr">auto-aof-rewrite-min-size</span> <span class="hljs-string">64mb </span><br></code></pre></td></tr></table></figure><h2 id="1-3-RDB与AOF对比"><a href="#1-3-RDB与AOF对比" class="headerlink" title="1.3.RDB与AOF对比"></a>1.3.RDB与AOF对比</h2><p>RDB和AOF各有自己的优缺点，如果对数据安全性要求较高，在实际开发中往往会<strong>结合</strong>两者来使用。</p><p><img src="/20221205140000/image-20210725151940515.png" alt="image-20210725151940515"></p><h1 id="2-Redis主从"><a href="#2-Redis主从" class="headerlink" title="2.Redis主从"></a>2.Redis主从</h1><h2 id="2-1-搭建主从架构"><a href="#2-1-搭建主从架构" class="headerlink" title="2.1.搭建主从架构"></a>2.1.搭建主从架构</h2><p>单节点Redis的并发能力是有上限的，要进一步提高Redis的并发能力，就需要搭建主从集群，实现读写分离。</p><p><img src="/20221205140000/image-20210725152037611.png" alt="image-20210725152037611"></p><p>具体搭建流程参考课前资料《Redis集群.md》：</p><p><img src="/20221205140000/image-20210725152052501.png" alt="image-20210725152052501"> </p><h2 id="2-2-主从数据同步原理"><a href="#2-2-主从数据同步原理" class="headerlink" title="2.2.主从数据同步原理"></a>2.2.主从数据同步原理</h2><h3 id="2-2-1-全量同步"><a href="#2-2-1-全量同步" class="headerlink" title="2.2.1.全量同步"></a>2.2.1.全量同步</h3><p>主从第一次建立连接时，会执行<strong>全量同步</strong>，将master节点的所有数据都拷贝给slave节点，流程：</p><p><img src="/20221205140000/image-20210725152222497.png" alt="image-20210725152222497"></p><p>这里有一个问题，master如何得知salve是第一次来连接呢？？</p><p>有几个概念，可以作为判断依据：</p><ul><li><strong>Replication Id</strong>：简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replid，slave则会继承master节点的replid</li><li><strong>offset</strong>：偏移量，随着记录在repl_baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset。如果slave的offset小于master的offset，说明slave数据落后于master，需要更新。</li></ul><p>因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据。</p><p>因为slave原本也是一个master，有自己的replid和offset，当第一次变成slave，与master建立连接时，发送的replid和offset是自己的replid和offset。</p><p>master判断发现slave发送来的replid与自己的不一致，说明这是一个全新的slave，就知道要做全量同步了。</p><p>master会将自己的replid和offset都发送给这个slave，slave保存这些信息。以后slave的replid就与master一致了。</p><p>因此，<strong>master判断一个节点是否是第一次同步的依据，就是看replid是否一致</strong>。</p><p>如图：</p><p><img src="/20221205140000/image-20210725152700914.png" alt="image-20210725152700914"></p><p>完整流程描述：</p><ul><li>slave节点请求增量同步</li><li>master节点判断replid，发现不一致，拒绝增量同步</li><li>master将完整内存数据生成RDB，发送RDB到slave</li><li>slave清空本地数据，加载master的RDB</li><li>master将RDB期间的命令记录在repl_baklog，并持续将log中的命令发送给slave</li><li>slave执行接收到的命令，保持与master之间的同步</li></ul><h3 id="2-2-2-增量同步"><a href="#2-2-2-增量同步" class="headerlink" title="2.2.2.增量同步"></a>2.2.2.增量同步</h3><p>全量同步需要先做RDB，然后将RDB文件通过网络传输个slave，成本太高了。因此除了第一次做全量同步，其它大多数时候slave与master都是做<strong>增量同步</strong>。</p><p>什么是增量同步？就是只更新slave与master存在差异的部分数据。如图：</p><p><img src="/20221205140000/image-20210725153201086.png" alt="image-20210725153201086"></p><p>那么master怎么知道slave与自己的数据差异在哪里呢?</p><h3 id="2-2-3-repl-backlog原理"><a href="#2-2-3-repl-backlog原理" class="headerlink" title="2.2.3.repl_backlog原理"></a>2.2.3.repl_backlog原理</h3><p>master怎么知道slave与自己的数据差异在哪里呢?</p><p>这就要说到全量同步时的repl_baklog文件了。</p><p>这个文件是一个固定大小的数组，只不过数组是环形，也就是说<strong>角标到达数组末尾后，会再次从0开始读写</strong>，这样数组头部的数据就会被覆盖。</p><p>repl_baklog中会记录Redis处理过的命令日志及offset，包括master当前的offset，和slave已经拷贝到的offset：</p><p><img src="/20221205140000/image-20210725153359022.png" alt="image-20210725153359022"> </p><p>slave与master的offset之间的差异，就是salve需要增量拷贝的数据了。</p><p>随着不断有数据写入，master的offset逐渐变大，slave也不断的拷贝，追赶master的offset：</p><p><img src="/20221205140000/image-20210725153524190.png" alt="image-20210725153524190"> </p><p>直到数组被填满：</p><p><img src="/20221205140000/image-20210725153715910.png" alt="image-20210725153715910"> </p><p>此时，如果有新的数据写入，就会覆盖数组中的旧数据。不过，旧的数据只要是绿色的，说明是已经被同步到slave的数据，即便被覆盖了也没什么影响。因为未同步的仅仅是红色部分。</p><p>但是，如果slave出现网络阻塞，导致master的offset远远超过了slave的offset： </p><p><img src="/20221205140000/image-20210725153937031.png" alt="image-20210725153937031"> </p><p>如果master继续写入新数据，其offset就会覆盖旧的数据，直到将slave现在的offset也覆盖：</p><p><img src="/20221205140000/image-20210725154155984.png" alt="image-20210725154155984"> </p><p>棕色框中的红色部分，就是尚未同步，但是却已经被覆盖的数据。此时如果slave恢复，需要同步，却发现自己的offset都没有了，无法完成增量同步了。只能做全量同步。</p><p><img src="/20221205140000/image-20210725154216392.png" alt="image-20210725154216392"></p><h2 id="2-3-主从同步优化"><a href="#2-3-主从同步优化" class="headerlink" title="2.3.主从同步优化"></a>2.3.主从同步优化</h2><p>主从同步可以保证主从数据的一致性，非常重要。</p><p>可以从以下几个方面来优化Redis主从就集群：</p><ul><li>在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘IO。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘IO</li><li>适当提高repl_baklog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力</li></ul><p>主从从架构图：</p><p><img src="/20221205140000/image-20210725154405899.png" alt="image-20210725154405899"></p><h2 id="2-4-小结"><a href="#2-4-小结" class="headerlink" title="2.4.小结"></a>2.4.小结</h2><p>简述全量同步和增量同步区别？</p><ul><li>全量同步：master将完整内存数据生成RDB，发送RDB到slave。后续命令则记录在repl_baklog，逐个发送给slave。</li><li>增量同步：slave提交自己的offset到master，master获取repl_baklog中从offset之后的命令给slave</li></ul><p>什么时候执行全量同步？</p><ul><li>slave节点第一次连接master节点时</li><li>slave节点断开时间太久，repl_baklog中的offset已经被覆盖时</li></ul><p>什么时候执行增量同步？</p><ul><li>slave节点断开又恢复，并且在repl_baklog中能找到offset时</li></ul><h1 id="3-Redis哨兵"><a href="#3-Redis哨兵" class="headerlink" title="3.Redis哨兵"></a>3.Redis哨兵</h1><p>Redis提供了哨兵（Sentinel）机制来实现主从集群的自动故障恢复。</p><h2 id="3-1-哨兵原理"><a href="#3-1-哨兵原理" class="headerlink" title="3.1.哨兵原理"></a>3.1.哨兵原理</h2><h3 id="3-1-1-集群结构和作用"><a href="#3-1-1-集群结构和作用" class="headerlink" title="3.1.1.集群结构和作用"></a>3.1.1.集群结构和作用</h3><p>哨兵的结构如图：</p><p><img src="/20221205140000/image-20210725154528072.png" alt="image-20210725154528072"></p><p>哨兵的作用如下：</p><ul><li><strong>监控</strong>：Sentinel 会不断检查您的master和slave是否按预期工作</li><li><strong>自动故障恢复</strong>：如果master故障，Sentinel会将一个slave提升为master。当故障实例恢复后也以新的master为主</li><li><strong>通知</strong>：Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</li></ul><h3 id="3-1-2-集群监控原理"><a href="#3-1-2-集群监控原理" class="headerlink" title="3.1.2.集群监控原理"></a>3.1.2.集群监控原理</h3><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令：</p><p>•主观下线：如果某sentinel节点发现某实例未在规定时间响应，则认为该实例<strong>主观下线</strong>。</p><p>•客观下线：若超过指定数量（quorum）的sentinel都认为该实例主观下线，则该实例<strong>客观下线</strong>。quorum值最好超过Sentinel实例数量的一半。</p><p><img src="/20221205140000/image-20210725154632354.png" alt="image-20210725154632354"></p><h3 id="3-1-3-集群故障恢复原理"><a href="#3-1-3-集群故障恢复原理" class="headerlink" title="3.1.3.集群故障恢复原理"></a>3.1.3.集群故障恢复原理</h3><p>一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的：</p><ul><li>首先会判断slave节点与master节点断开时间长短，如果超过指定值（down-after-milliseconds * 10）则会排除该slave节点</li><li>然后判断slave节点的slave-priority值，越小优先级越高，如果是0则永不参与选举</li><li>如果slave-prority一样，则判断slave节点的offset值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的运行id大小，越小优先级越高。</li></ul><p>当选出一个新的master后，该如何实现切换呢？</p><p>流程如下：</p><ul><li>sentinel给备选的slave1节点发送slaveof no one命令，让该节点成为master</li><li>sentinel给所有其它slave发送slaveof 192.168.150.101 7002 命令，让这些slave成为新master的从节点，开始从新的master上同步数据。</li><li>最后，sentinel将故障节点标记为slave，当故障节点恢复后会自动成为新的master的slave节点</li></ul><p><img src="/20221205140000/image-20210725154816841.png" alt="image-20210725154816841"></p><h3 id="3-1-4-小结"><a href="#3-1-4-小结" class="headerlink" title="3.1.4.小结"></a>3.1.4.小结</h3><p>Sentinel的三个作用是什么？</p><ul><li>监控</li><li>故障转移</li><li>通知</li></ul><p>Sentinel如何判断一个redis实例是否健康？</p><ul><li>每隔1秒发送一次ping命令，如果超过一定时间没有相向则认为是主观下线</li><li>如果大多数sentinel都认为实例主观下线，则判定服务下线</li></ul><p>故障转移步骤有哪些？</p><ul><li>首先选定一个slave作为新的master，执行slaveof no one</li><li>然后让所有节点都执行slaveof 新master</li><li>修改故障节点配置，添加slaveof 新master</li></ul><h2 id="3-2-搭建哨兵集群"><a href="#3-2-搭建哨兵集群" class="headerlink" title="3.2.搭建哨兵集群"></a>3.2.搭建哨兵集群</h2><p>具体搭建流程参考课前资料《Redis集群.md》：</p><p><img src="/20221205140000/image-20210725155019276.png" alt="image-20210725155019276"> </p><h2 id="3-3-RedisTemplate"><a href="#3-3-RedisTemplate" class="headerlink" title="3.3.RedisTemplate"></a>3.3.RedisTemplate</h2><p>在Sentinel集群监管下的Redis主从集群，其节点会因为自动故障转移而发生变化，Redis的客户端必须感知这种变化，及时更新连接信息。Spring的RedisTemplate底层利用lettuce实现了节点的感知和自动切换。</p><p>下面，我们通过一个测试来实现RedisTemplate集成哨兵机制。</p><h3 id="3-3-1-导入Demo工程"><a href="#3-3-1-导入Demo工程" class="headerlink" title="3.3.1.导入Demo工程"></a>3.3.1.导入Demo工程</h3><p>首先，我们引入课前资料提供的Demo工程：</p><p><img src="/20221205140000/image-20210725155124958.png" alt="image-20210725155124958"> </p><h3 id="3-3-2-引入依赖"><a href="#3-3-2-引入依赖" class="headerlink" title="3.3.2.引入依赖"></a>3.3.2.引入依赖</h3><p>在项目的pom文件中引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-3-3-配置Redis地址"><a href="#3-3-3-配置Redis地址" class="headerlink" title="3.3.3.配置Redis地址"></a>3.3.3.配置Redis地址</h3><p>然后在配置文件application.yml中指定redis的sentinel相关信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  redis:<br>    sentinel:<br>      master: mymaster<br>      nodes:<br>        - <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span>:<span class="hljs-number">27001</span><br>        - <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span>:<span class="hljs-number">27002</span><br>        - <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span>:<span class="hljs-number">27003</span><br></code></pre></td></tr></table></figure><h3 id="3-3-4-配置读写分离"><a href="#3-3-4-配置读写分离" class="headerlink" title="3.3.4.配置读写分离"></a>3.3.4.配置读写分离</h3><p>在项目的启动类中，添加一个新的bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> LettuceClientConfigurationBuilderCustomizer <span class="hljs-title function_">clientConfigurationBuilderCustomizer</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> clientConfigurationBuilder -&gt; clientConfigurationBuilder.readFrom(ReadFrom.REPLICA_PREFERRED);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个bean中配置的就是读写策略，包括四种：</p><ul><li>MASTER：从主节点读取</li><li>MASTER_PREFERRED：优先从master节点读取，master不可用才读取replica</li><li>REPLICA：从slave（replica）节点读取</li><li>REPLICA _PREFERRED：优先从slave（replica）节点读取，所有的slave都不可用才读取master</li></ul><h1 id="4-Redis分片集群"><a href="#4-Redis分片集群" class="headerlink" title="4.Redis分片集群"></a>4.Redis分片集群</h1><h2 id="4-1-搭建分片集群"><a href="#4-1-搭建分片集群" class="headerlink" title="4.1.搭建分片集群"></a>4.1.搭建分片集群</h2><p>主从和哨兵可以解决高可用、高并发读的问题。但是依然有两个问题没有解决：</p><ul><li><p>海量数据存储问题</p></li><li><p>高并发写的问题</p></li></ul><p>使用分片集群可以解决上述问题，如图:</p><p><img src="/20221205140000/image-20210725155747294.png" alt="image-20210725155747294"></p><p>分片集群特征：</p><ul><li><p>集群中有多个master，每个master保存不同数据</p></li><li><p>每个master都可以有多个slave节点</p></li><li><p>master之间通过ping监测彼此健康状态</p></li><li><p>客户端请求可以访问集群任意节点，最终都会被转发到正确节点</p></li></ul><p>具体搭建流程参考课前资料《Redis集群.md》：</p><p><img src="/20221205140000/image-20210725155806288.png" alt="image-20210725155806288"> </p><h2 id="4-2-散列插槽"><a href="#4-2-散列插槽" class="headerlink" title="4.2.散列插槽"></a>4.2.散列插槽</h2><h3 id="4-2-1-插槽原理"><a href="#4-2-1-插槽原理" class="headerlink" title="4.2.1.插槽原理"></a>4.2.1.插槽原理</h3><p>Redis会把每一个master节点映射到0~16383共16384个插槽（hash slot）上，查看集群信息时就能看到：</p><p><img src="/20221205140000/image-20210725155820320.png" alt="image-20210725155820320"></p><p>数据key不是与节点绑定，而是与插槽绑定。redis会根据key的有效部分计算插槽值，分两种情况：</p><ul><li>key中包含”{}”，且“{}”中至少包含1个字符，“{}”中的部分是有效部分</li><li>key中不包含“{}”，整个key都是有效部分</li></ul><p>例如：key是num，那么就根据num计算，如果是{itcast}num，则根据itcast计算。计算方式是利用CRC16算法得到一个hash值，然后对16384取余，得到的结果就是slot值。</p><p><img src="/20221205140000/image-20210725155850200.png" alt="image-20210725155850200"> </p><p>如图，在7001这个节点执行set a 1时，对a做hash运算，对16384取余，得到的结果是15495，因此要存储到103节点。</p><p>到了7003后，执行<code>get num</code>时，对num做hash运算，对16384取余，得到的结果是2765，因此需要切换到7001节点</p><h3 id="4-2-1-小结"><a href="#4-2-1-小结" class="headerlink" title="4.2.1.小结"></a>4.2.1.小结</h3><p>Redis如何判断某个key应该在哪个实例？</p><ul><li>将16384个插槽分配到不同的实例</li><li>根据key的有效部分计算哈希值，对16384取余</li><li>余数作为插槽，寻找插槽所在实例即可</li></ul><p>如何将同一类数据固定的保存在同一个Redis实例？</p><ul><li>这一类数据使用相同的有效部分，例如key都以{typeId}为前缀</li></ul><h2 id="4-3-集群伸缩"><a href="#4-3-集群伸缩" class="headerlink" title="4.3.集群伸缩"></a>4.3.集群伸缩</h2><p>redis-cli –cluster提供了很多操作集群的命令，可以通过下面方式查看：</p><p><img src="/20221205140000/image-20210725160138290.png" alt="image-20210725160138290"></p><p>比如，添加节点的命令：</p><p><img src="/20221205140000/image-20210725160448139.png" alt="image-20210725160448139"></p><h3 id="4-3-1-需求分析"><a href="#4-3-1-需求分析" class="headerlink" title="4.3.1.需求分析"></a>4.3.1.需求分析</h3><p>需求：向集群中添加一个新的master节点，并向其中存储 num &#x3D; 10</p><ul><li>启动一个新的redis实例，端口为7004</li><li>添加7004到之前的集群，并作为一个master节点</li><li>给7004节点分配插槽，使得num这个key可以存储到7004实例</li></ul><p>这里需要两个新的功能：</p><ul><li>添加一个节点到集群中</li><li>将部分插槽分配到新插槽</li></ul><h3 id="4-3-2-创建新的redis实例"><a href="#4-3-2-创建新的redis实例" class="headerlink" title="4.3.2.创建新的redis实例"></a>4.3.2.创建新的redis实例</h3><p>创建一个文件夹：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> 7004<br></code></pre></td></tr></table></figure><p>拷贝配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cp</span> redis.conf /7004<br></code></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed /s/6379/7004/g 7004/redis.conf<br></code></pre></td></tr></table></figure><p>启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-server 7004/redis.conf<br></code></pre></td></tr></table></figure><h3 id="4-3-3-添加新节点到redis"><a href="#4-3-3-添加新节点到redis" class="headerlink" title="4.3.3.添加新节点到redis"></a>4.3.3.添加新节点到redis</h3><p>添加节点的语法如下：</p><p><img src="/20221205140000/image-20210725160448139.png" alt="image-20210725160448139"></p><p>执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli --cluster add-node  192.168.150.101:7004 192.168.150.101:7001<br></code></pre></td></tr></table></figure><p>通过命令查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -p 7001 cluster nodes<br></code></pre></td></tr></table></figure><p>如图，7004加入了集群，并且默认是一个master节点：</p><p><img src="/20221205140000/image-20210725161007099.png" alt="image-20210725161007099"></p><p>但是，可以看到7004节点的插槽数量为0，因此没有任何数据可以存储到7004上</p><h3 id="4-3-4-转移插槽"><a href="#4-3-4-转移插槽" class="headerlink" title="4.3.4.转移插槽"></a>4.3.4.转移插槽</h3><p>我们要将num存储到7004节点，因此需要先看看num的插槽是多少：</p><p><img src="/20221205140000/image-20210725161241793.png" alt="image-20210725161241793"></p><p>如上图所示，num的插槽为2765.</p><p>我们可以将0~3000的插槽从7001转移到7004，命令格式如下：</p><p><img src="/20221205140000/image-20210725161401925.png" alt="image-20210725161401925"></p><p>具体命令如下：</p><p>建立连接：</p><p><img src="/20221205140000/image-20210725161506241.png" alt="image-20210725161506241"></p><p>得到下面的反馈：</p><p><img src="/20221205140000/image-20210725161540841.png" alt="image-20210725161540841"></p><p>询问要移动多少个插槽，我们计划是3000个：</p><p>新的问题来了：</p><p><img src="/20221205140000/image-20210725161637152.png" alt="image-20210725161637152"></p><p>那个node来接收这些插槽？？</p><p>显然是7004，那么7004节点的id是多少呢？</p><p><img src="/20221205140000/image-20210725161731738.png" alt="image-20210725161731738"></p><p>复制这个id，然后拷贝到刚才的控制台后：</p><p><img src="/20221205140000/image-20210725161817642.png" alt="image-20210725161817642"></p><p>这里询问，你的插槽是从哪里移动过来的？</p><ul><li>all：代表全部，也就是三个节点各转移一部分</li><li>具体的id：目标节点的id</li><li>done：没有了</li></ul><p>这里我们要从7001获取，因此填写7001的id：</p><p><img src="/20221205140000/image-20210725162030478.png" alt="image-20210725162030478"></p><p>填完后，点击done，这样插槽转移就准备好了：</p><p><img src="/20221205140000/image-20210725162101228.png" alt="image-20210725162101228"></p><p>确认要转移吗？输入yes：</p><p>然后，通过命令查看结果：</p><p><img src="/20221205140000/image-20210725162145497.png" alt="image-20210725162145497"> </p><p>可以看到： </p><p><img src="/20221205140000/image-20210725162224058.png" alt="image-20210725162224058"></p><p>目的达成。</p><h2 id="4-4-故障转移"><a href="#4-4-故障转移" class="headerlink" title="4.4.故障转移"></a>4.4.故障转移</h2><p>集群初识状态是这样的：</p><p><img src="/20221205140000/image-20210727161152065.png" alt="image-20210727161152065"></p><p>其中7001、7002、7003都是master，我们计划让7002宕机。</p><h3 id="4-4-1-自动故障转移"><a href="#4-4-1-自动故障转移" class="headerlink" title="4.4.1.自动故障转移"></a>4.4.1.自动故障转移</h3><p>当集群中有一个master宕机会发生什么呢？</p><p>直接停止一个redis实例，例如7002：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -p 7002 shutdown<br></code></pre></td></tr></table></figure><p>1）首先是该实例与其它实例失去连接</p><p>2）然后是疑似宕机：</p><p><img src="/20221205140000/image-20210725162319490.png" alt="image-20210725162319490"></p><p>3）最后是确定下线，自动提升一个slave为新的master：</p><p><img src="/20221205140000/image-20210725162408979.png" alt="image-20210725162408979"></p><p>4）当7002再次启动，就会变为一个slave节点了：</p><p><img src="/20221205140000/image-20210727160803386.png" alt="image-20210727160803386"></p><h3 id="4-4-2-手动故障转移"><a href="#4-4-2-手动故障转移" class="headerlink" title="4.4.2.手动故障转移"></a>4.4.2.手动故障转移</h3><p>利用cluster failover命令可以手动让集群中的某个master宕机，切换到执行cluster failover命令的这个slave节点，实现无感知的数据迁移。其流程如下：</p><p><img src="/20221205140000/image-20210725162441407.png" alt="image-20210725162441407"></p><p>这种failover命令可以指定三种模式：</p><ul><li>缺省：默认的流程，如图1~6歩</li><li>force：省略了对offset的一致性校验</li><li>takeover：直接执行第5歩，忽略数据一致性、忽略master状态和其它master的意见</li></ul><p><strong>案例需求</strong>：在7002这个slave节点执行手动故障转移，重新夺回master地位</p><p>步骤如下：</p><p>1）利用redis-cli连接7002这个节点</p><p>2）执行cluster failover命令</p><p>如图：</p><p><img src="/20221205140000/image-20210727160037766.png" alt="image-20210727160037766"></p><p>效果：</p><p><img src="/20221205140000/image-20210727161152065.png" alt="image-20210727161152065"></p><h2 id="4-5-RedisTemplate访问分片集群"><a href="#4-5-RedisTemplate访问分片集群" class="headerlink" title="4.5.RedisTemplate访问分片集群"></a>4.5.RedisTemplate访问分片集群</h2><p>RedisTemplate底层同样基于lettuce实现了分片集群的支持，而使用的步骤与哨兵模式基本一致：</p><p>1）引入redis的starter依赖</p><p>2）配置分片集群地址</p><p>3）配置读写分离</p><p>与哨兵模式相比，其中只有分片集群的配置方式略有差异，如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">cluster:</span><br>      <span class="hljs-attr">nodes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:7001</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:7002</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:7003</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:8001</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:8002</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-number">192.168</span><span class="hljs-number">.150</span><span class="hljs-number">.101</span><span class="hljs-string">:8003</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis高级篇 - 集群搭建</title>
    <link href="/20221205130000/"/>
    <url>/20221205130000/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h1><p>本章是基于CentOS7下的Redis集群教程，包括：</p><ul><li>单机安装Redis</li><li>Redis主从</li><li>Redis分片集群</li></ul><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1.单机安装Redis"></a>1.单机安装Redis</h1><p>首先需要安装Redis所需要的依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><p>然后将课前资料提供的Redis安装包上传到虚拟机的任意目录：</p><p><img src="/20221205130000/image-20210629114325516.png" alt="image-20210629114325516"></p><p>例如，我放到了&#x2F;tmp目录：</p><p><img src="/20221205130000/image-20210629114830642.png" alt="image-20210629114830642"></p><p>解压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">tar -xzf redis-6.2.4.tar.gz<br></code></pre></td></tr></table></figure><p>解压后：</p><p><img src="/20221205130000/image-20210629114941810.png" alt="image-20210629114941810"></p><p>进入redis目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> redis-6.2.4<br></code></pre></td></tr></table></figure><p>运行编译命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 绑定地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 保护模式，关闭保护模式</span><br><span class="hljs-attr">protected-mode</span> <span class="hljs-string">no</span><br><span class="hljs-comment"># 数据库数量，设置为1</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-server redis.conf<br></code></pre></td></tr></table></figure><p>停止redis服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli shutdown<br></code></pre></td></tr></table></figure><h1 id="2-Redis主从集群"><a href="#2-Redis主从集群" class="headerlink" title="2.Redis主从集群"></a>2.Redis主从集群</h1><h2 id="2-1-集群结构"><a href="#2-1-集群结构" class="headerlink" title="2.1.集群结构"></a>2.1.集群结构</h2><p>我们搭建的主从集群结构如图：</p><p><img src="/20221205130000/image-20210630111505799.png" alt="image-20210630111505799"></p><p>共包含三个节点，一个主节点，两个从节点。</p><p>这里我们会在同一台虚拟机中开启3个redis实例，模拟主从集群，信息如下：</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.150.101</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7002</td><td align="center">slave</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7003</td><td align="center">slave</td></tr></tbody></table><h2 id="2-2-准备实例和配置"><a href="#2-2-准备实例和配置" class="headerlink" title="2.2.准备实例和配置"></a>2.2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>1）创建目录</p><p>我们创建三个文件夹，名字分别叫7001、7002、7003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">mkdir</span> 7001 7002 7003<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/20221205130000/image-20210630113929868.png" alt="image-20210630113929868"></p><p>2）恢复原始配置</p><p>修改redis-6.2.4&#x2F;redis.conf文件，将其中的持久化模式改为默认的RDB模式，AOF保持关闭状态。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 开启RDB</span><br><span class="hljs-comment"># save &quot;&quot;</span><br><span class="hljs-attr">save</span> <span class="hljs-string">3600 1</span><br><span class="hljs-attr">save</span> <span class="hljs-string">300 100</span><br><span class="hljs-attr">save</span> <span class="hljs-string">60 10000</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 关闭AOF</span><br><span class="hljs-attr">appendonly</span> <span class="hljs-string">no</span><br></code></pre></td></tr></table></figure><p>3）拷贝配置文件到每个实例目录</p><p>然后将redis-6.2.4&#x2F;redis.conf文件拷贝到三个目录中（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方式一：逐个拷贝</span><br><span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf 7001<br><span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf 7002<br><span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf 7003<br><br><span class="hljs-comment"># 方式二：管道组合命令，一键拷贝</span><br><span class="hljs-built_in">echo</span> 7001 7002 7003 | xargs -t -n 1 <span class="hljs-built_in">cp</span> redis-6.2.4/redis.conf<br></code></pre></td></tr></table></figure><p>4）修改每个实例的端口、工作目录</p><p>修改每个文件夹内的配置文件，将端口分别修改为7001、7002、7003，将rdb文件保存位置都修改为自己所在目录（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i -e <span class="hljs-string">&#x27;s/6379/7001/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/tmp\/7001\//g&#x27;</span> 7001/redis.conf<br>sed -i -e <span class="hljs-string">&#x27;s/6379/7002/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/tmp\/7002\//g&#x27;</span> 7002/redis.conf<br>sed -i -e <span class="hljs-string">&#x27;s/6379/7003/g&#x27;</span> -e <span class="hljs-string">&#x27;s/dir .\//dir \/tmp\/7003\//g&#x27;</span> 7003/redis.conf<br></code></pre></td></tr></table></figure><p>5）修改每个实例的声明IP</p><p>虚拟机本身有多个IP，为了避免将来混乱，我们需要在redis.conf文件中指定每一个实例的绑定ip信息，格式如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># redis实例的声明 IP</span><br><span class="hljs-attr">replica-announce-ip</span> <span class="hljs-string">192.168.150.101</span><br></code></pre></td></tr></table></figure><p>每个目录都要改，我们一键完成修改（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 逐一执行</span><br>sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> 7001/redis.conf<br>sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> 7002/redis.conf<br>sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> 7003/redis.conf<br><br><span class="hljs-comment"># 或者一键修改</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t sed -i <span class="hljs-string">&#x27;1a replica-announce-ip 192.168.150.101&#x27;</span> &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><h2 id="2-3-启动"><a href="#2-3-启动" class="headerlink" title="2.3.启动"></a>2.3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 第1个</span><br>redis-server 7001/redis.conf<br><span class="hljs-comment"># 第2个</span><br>redis-server 7002/redis.conf<br><span class="hljs-comment"># 第3个</span><br>redis-server 7003/redis.conf<br></code></pre></td></tr></table></figure><p>启动后：</p><p><img src="/20221205130000/image-20210630183914491.png" alt="image-20210630183914491"></p><p>如果要一键停止，可以运行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown<br></code></pre></td></tr></table></figure><h2 id="2-4-开启主从关系"><a href="#2-4-开启主从关系" class="headerlink" title="2.4.开启主从关系"></a>2.4.开启主从关系</h2><p>现在三个实例还没有任何关系，要配置主从可以使用replicaof 或者slaveof（5.0以前）命令。</p><p>有临时和永久两种模式：</p><ul><li><p>修改配置文件（永久生效）</p><ul><li>在redis.conf中添加一行配置：<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul></li><li><p>使用redis-cli客户端连接到redis服务，执行slaveof命令（重启后失效）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">slaveof &lt;masterip&gt; &lt;masterport&gt;<br></code></pre></td></tr></table></figure></li></ul><p><strong><font color="red">注意</font></strong>：在5.0以后新增命令replicaof，与salveof效果一致。</p><p>这里我们为了演示方便，使用方式二。</p><p>通过redis-cli命令连接7002，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接 7002</span><br>redis-cli -p 7002<br><span class="hljs-comment"># 执行slaveof</span><br>slaveof 192.168.150.101 7001<br></code></pre></td></tr></table></figure><p>通过redis-cli命令连接7003，执行下面命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接 7003</span><br>redis-cli -p 7003<br><span class="hljs-comment"># 执行slaveof</span><br>slaveof 192.168.150.101 7001<br></code></pre></td></tr></table></figure><p>然后连接 7001节点，查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接 7001</span><br>redis-cli -p 7001<br><span class="hljs-comment"># 查看状态</span><br>info replication<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/20221205130000/image-20210630201258802.png" alt="image-20210630201258802"></p><h2 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5.测试"></a>2.5.测试</h2><p>执行下列操作以测试：</p><ul><li><p>利用redis-cli连接7001，执行<code>set num 123</code></p></li><li><p>利用redis-cli连接7002，执行<code>get num</code>，再执行<code>set num 666</code></p></li><li><p>利用redis-cli连接7003，执行<code>get num</code>，再执行<code>set num 888</code></p></li></ul><p>可以发现，只有在7001这个master节点上可以执行写操作，7002和7003这两个slave节点只能执行读操作。</p><h1 id="3-搭建哨兵集群"><a href="#3-搭建哨兵集群" class="headerlink" title="3.搭建哨兵集群"></a>3.搭建哨兵集群</h1><h2 id="3-1-集群结构"><a href="#3-1-集群结构" class="headerlink" title="3.1.集群结构"></a>3.1.集群结构</h2><p>这里我们搭建一个三节点形成的Sentinel集群，来监管之前的Redis主从集群。如图：</p><p><img src="/20221205130000/image-20210701215227018.png" alt="image-20210701215227018"></p><p>三个sentinel实例信息如下：</p><table><thead><tr><th>节点</th><th align="center">IP</th><th align="center">PORT</th></tr></thead><tbody><tr><td>s1</td><td align="center">192.168.150.101</td><td align="center">27001</td></tr><tr><td>s2</td><td align="center">192.168.150.101</td><td align="center">27002</td></tr><tr><td>s3</td><td align="center">192.168.150.101</td><td align="center">27003</td></tr></tbody></table><h2 id="3-2-准备实例和配置"><a href="#3-2-准备实例和配置" class="headerlink" title="3.2.准备实例和配置"></a>3.2.准备实例和配置</h2><p>要在同一台虚拟机开启3个实例，必须准备三份不同的配置文件和目录，配置文件所在目录也就是工作目录。</p><p>我们创建三个文件夹，名字分别叫s1、s2、s3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">mkdir</span> s1 s2 s3<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/20221205130000/image-20210701215534714.png" alt="image-20210701215534714"></p><p>然后我们在s1目录创建一个sentinel.conf文件，添加下面的内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini">port 27001<br>sentinel announce-ip 192.168.150.101<br>sentinel monitor mymaster 192.168.150.101 7001 2<br>sentinel down-after-milliseconds mymaster 5000<br>sentinel failover-timeout mymaster 60000<br>dir &quot;/tmp/s1&quot;<br></code></pre></td></tr></table></figure><p>解读：</p><ul><li><code>port 27001</code>：是当前sentinel实例的端口</li><li><code>sentinel monitor mymaster 192.168.150.101 7001 2</code>：指定主节点信息<ul><li><code>mymaster</code>：主节点名称，自定义，任意写</li><li><code>192.168.150.101 7001</code>：主节点的ip和端口</li><li><code>2</code>：选举master时的quorum值</li></ul></li></ul><p>然后将s1&#x2F;sentinel.conf文件拷贝到s2、s3两个目录中（在&#x2F;tmp目录执行下列命令）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 方式一：逐个拷贝</span><br><span class="hljs-built_in">cp</span> s1/sentinel.conf s2<br><span class="hljs-built_in">cp</span> s1/sentinel.conf s3<br><span class="hljs-comment"># 方式二：管道组合命令，一键拷贝</span><br><span class="hljs-built_in">echo</span> s2 s3 | xargs -t -n 1 <span class="hljs-built_in">cp</span> s1/sentinel.conf<br></code></pre></td></tr></table></figure><p>修改s2、s3两个文件夹内的配置文件，将端口分别修改为27002、27003：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">sed -i -e <span class="hljs-string">&#x27;s/27001/27002/g&#x27;</span> -e <span class="hljs-string">&#x27;s/s1/s2/g&#x27;</span> s2/sentinel.conf<br>sed -i -e <span class="hljs-string">&#x27;s/27001/27003/g&#x27;</span> -e <span class="hljs-string">&#x27;s/s1/s3/g&#x27;</span> s3/sentinel.conf<br></code></pre></td></tr></table></figure><h2 id="3-3-启动"><a href="#3-3-启动" class="headerlink" title="3.3.启动"></a>3.3.启动</h2><p>为了方便查看日志，我们打开3个ssh窗口，分别启动3个redis实例，启动命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 第1个</span><br>redis-sentinel s1/sentinel.conf<br><span class="hljs-comment"># 第2个</span><br>redis-sentinel s2/sentinel.conf<br><span class="hljs-comment"># 第3个</span><br>redis-sentinel s3/sentinel.conf<br></code></pre></td></tr></table></figure><p>启动后：</p><p><img src="/20221205130000/image-20210701220714104.png" alt="image-20210701220714104"></p><h2 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4.测试"></a>3.4.测试</h2><p>尝试让master节点7001宕机，查看sentinel日志：</p><p><img src="/20221205130000/image-20210701222857997.png" alt="image-20210701222857997"></p><p>查看7003的日志：</p><p><img src="/20221205130000/image-20210701223025709.png" alt="image-20210701223025709"></p><p>查看7002的日志：</p><p><img src="/20221205130000/image-20210701223131264.png" alt="image-20210701223131264"></p><h1 id="4-搭建分片集群"><a href="#4-搭建分片集群" class="headerlink" title="4.搭建分片集群"></a>4.搭建分片集群</h1><h2 id="4-1-集群结构"><a href="#4-1-集群结构" class="headerlink" title="4.1.集群结构"></a>4.1.集群结构</h2><p>分片集群需要的节点数量较多，这里我们搭建一个最小的分片集群，包含3个master节点，每个master包含一个slave节点，结构如下：</p><p><img src="/20221205130000/image-20210702164116027.png" alt="image-20210702164116027"></p><p>这里我们会在同一台虚拟机中开启6个redis实例，模拟分片集群，信息如下：</p><table><thead><tr><th align="center">IP</th><th align="center">PORT</th><th align="center">角色</th></tr></thead><tbody><tr><td align="center">192.168.150.101</td><td align="center">7001</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7002</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">7003</td><td align="center">master</td></tr><tr><td align="center">192.168.150.101</td><td align="center">8001</td><td align="center">slave</td></tr><tr><td align="center">192.168.150.101</td><td align="center">8002</td><td align="center">slave</td></tr><tr><td align="center">192.168.150.101</td><td align="center">8003</td><td align="center">slave</td></tr></tbody></table><h2 id="4-2-准备实例和配置"><a href="#4-2-准备实例和配置" class="headerlink" title="4.2.准备实例和配置"></a>4.2.准备实例和配置</h2><p>删除之前的7001、7002、7003这几个目录，重新创建出7001、7002、7003、8001、8002、8003目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 删除旧的，避免配置干扰</span><br><span class="hljs-built_in">rm</span> -rf 7001 7002 7003<br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-built_in">mkdir</span> 7001 7002 7003 8001 8002 8003<br></code></pre></td></tr></table></figure><p>在&#x2F;tmp下准备一个新的redis.conf文件，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ini">port 6379<br><span class="hljs-comment"># 开启集群功能</span><br>cluster-enabled yes<br><span class="hljs-comment"># 集群的配置文件名称，不需要我们创建，由redis自己维护</span><br>cluster-config-file /tmp/6379/nodes.conf<br><span class="hljs-comment"># 节点心跳失败的超时时间</span><br>cluster-node-timeout 5000<br><span class="hljs-comment"># 持久化文件存放目录</span><br>dir /tmp/6379<br><span class="hljs-comment"># 绑定地址</span><br>bind 0.0.0.0<br><span class="hljs-comment"># 让redis后台运行</span><br>daemonize yes<br><span class="hljs-comment"># 注册的实例ip</span><br>replica-announce-ip 192.168.150.101<br><span class="hljs-comment"># 保护模式</span><br>protected-mode no<br><span class="hljs-comment"># 数据库数量</span><br>databases 1<br><span class="hljs-comment"># 日志</span><br>logfile /tmp/6379/run.log<br></code></pre></td></tr></table></figure><p>将这个文件拷贝到每个目录下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 执行拷贝</span><br><span class="hljs-built_in">echo</span> 7001 7002 7003 8001 8002 8003 | xargs -t -n 1 <span class="hljs-built_in">cp</span> redis.conf<br></code></pre></td></tr></table></figure><p>修改每个目录下的redis.conf，将其中的6379修改为与所在目录一致：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 修改配置文件</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t sed -i <span class="hljs-string">&#x27;s/6379/&#123;&#125;/g&#x27;</span> &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><h2 id="4-3-启动"><a href="#4-3-启动" class="headerlink" title="4.3.启动"></a>4.3.启动</h2><p>因为已经配置了后台启动模式，所以可以直接启动服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入/tmp目录</span><br><span class="hljs-built_in">cd</span> /tmp<br><span class="hljs-comment"># 一键启动所有服务</span><br><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-server &#123;&#125;/redis.conf<br></code></pre></td></tr></table></figure><p>通过ps查看状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps -ef | grep redis<br></code></pre></td></tr></table></figure><p>发现服务都已经正常启动：</p><p><img src="/20221205130000/image-20210702174255799.png" alt="image-20210702174255799"></p><p>如果要关闭所有进程，可以执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ps -ef | grep redis | awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs <span class="hljs-built_in">kill</span><br></code></pre></td></tr></table></figure><p>或者（推荐这种方式）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">printf</span> <span class="hljs-string">&#x27;%s\n&#x27;</span> 7001 7002 7003 8001 8002 8003 | xargs -I&#123;&#125; -t redis-cli -p &#123;&#125; shutdown<br></code></pre></td></tr></table></figure><h2 id="4-4-创建集群"><a href="#4-4-创建集群" class="headerlink" title="4.4.创建集群"></a>4.4.创建集群</h2><p>虽然服务启动了，但是目前每个服务之间都是独立的，没有任何关联。</p><p>我们需要执行命令来创建集群，在Redis5.0之前创建集群比较麻烦，5.0之后集群管理命令都集成到了redis-cli中。</p><p>1）Redis5.0之前</p><p>Redis5.0之前集群命令都是用redis安装包下的src&#x2F;redis-trib.rb来实现的。因为redis-trib.rb是有ruby语言编写的所以需要安装ruby环境。</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 安装依赖</span><br>yum -y install zlib ruby rubygems<br>gem install redis<br></code></pre></td></tr></table></figure><p>然后通过命令来管理集群：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入redis的src目录</span><br><span class="hljs-built_in">cd</span> /tmp/redis-6.2.4/src<br><span class="hljs-comment"># 创建集群</span><br>./redis-trib.rb create --replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003<br></code></pre></td></tr></table></figure><p>2）Redis5.0以后</p><p>我们使用的是Redis6.2.4版本，集群管理以及集成到了redis-cli中，格式如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli --cluster create --cluster-replicas 1 192.168.150.101:7001 192.168.150.101:7002 192.168.150.101:7003 192.168.150.101:8001 192.168.150.101:8002 192.168.150.101:8003<br></code></pre></td></tr></table></figure><p>命令说明：</p><ul><li><code>redis-cli --cluster</code>或者<code>./redis-trib.rb</code>：代表集群操作命令</li><li><code>create</code>：代表是创建集群</li><li><code>--replicas 1</code>或者<code>--cluster-replicas 1</code> ：指定集群中每个master的副本个数为1，此时<code>节点总数 ÷ (replicas + 1)</code> 得到的就是master的数量。因此节点列表中的前n个就是master，其它节点都是slave节点，随机分配到不同master</li></ul><p>运行后的样子：</p><p><img src="/20221205130000/image-20210702181101969.png" alt="image-20210702181101969"></p><p>这里输入yes，则集群开始创建：</p><p><img src="/20221205130000/image-20210702181215705.png" alt="image-20210702181215705"></p><p>通过命令可以查看集群状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -p 7001 cluster nodes<br></code></pre></td></tr></table></figure><p><img src="/20221205130000/image-20210702181922809.png" alt="image-20210702181922809"></p><h2 id="4-5-测试"><a href="#4-5-测试" class="headerlink" title="4.5.测试"></a>4.5.测试</h2><p>尝试连接7001节点，存储一个数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 连接</span><br>redis-cli -p 7001<br><span class="hljs-comment"># 存储数据</span><br><span class="hljs-built_in">set</span> num 123<br><span class="hljs-comment"># 读取数据</span><br>get num<br><span class="hljs-comment"># 再次存储</span><br><span class="hljs-built_in">set</span> a 1<br></code></pre></td></tr></table></figure><p>结果悲剧了：</p><p><img src="/20221205130000/image-20210702182343979.png" alt="image-20210702182343979"></p><p>集群操作时，需要给<code>redis-cli</code>加上<code>-c</code>参数才可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">redis-cli -c -p 7001<br></code></pre></td></tr></table></figure><p>这次可以了：</p><p><img src="/20221205130000/image-20210702182602145.png" alt="image-20210702182602145"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis实战篇 - 黑马点评项目</title>
    <link href="/20221205120000/"/>
    <url>/20221205120000/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis实战篇（黑马点评项目）"><a href="#Redis实战篇（黑马点评项目）" class="headerlink" title="Redis实战篇（黑马点评项目）"></a>Redis实战篇（黑马点评项目）</h1><h2 id="开篇导读"><a href="#开篇导读" class="headerlink" title="开篇导读"></a>开篇导读</h2><p>亲爱的小伙伴们大家好，马上咱们就开始实战篇的内容了，相信通过本章的学习，小伙伴们就能理解各种redis的使用啦，接下来咱们来一起看看实战篇我们要学习一些什么样的内容</p><ul><li>短信登录</li></ul><p>这一块我们会使用redis共享session来实现</p><ul><li>商户查询缓存</li></ul><p>通过本章节，我们会理解缓存击穿，缓存穿透，缓存雪崩等问题，让小伙伴的对于这些概念的理解不仅仅是停留在概念上，更是能在代码中看到对应的内容</p><p><a href="https://www.bilibili.com/video/BV1cr4y1671t/?p=47&spm_id_from=pageDriver&vd_source=a07c282e889f7133403a50b521d35bc7">查看阶段总结</a></p><ul><li>优惠券秒杀</li></ul><p>通过本章节，我们可以学会Redis的计数器功能， 结合Lua完成高性能的redis操作，同时学会Redis分布式锁的原理，包括Redis的三种消息队列</p><ul><li>附近的商户</li></ul><p>我们利用Redis的GEOHash来完成对于地理坐标的操作</p><ul><li>UV统计</li></ul><p>主要是使用Redis来完成统计功能</p><ul><li>用户签到</li></ul><p>使用Redis的BitMap数据统计功能</p><ul><li>好友关注</li></ul><p>基于Set集合的关注、取消关注，共同关注等等功能，这一块知识咱们之前就讲过，这次我们在项目中来使用一下</p><ul><li>打人探店</li></ul><p>基于List来完成点赞列表的操作，同时基于SortedSet来完成点赞的排行榜功能</p><p>以上这些内容咱们统统都会给小伙伴们讲解清楚，让大家充分理解如何使用Redis</p><p><img src="/20221205120000/1653056228879.png" alt="系统功能介绍"></p><h2 id="1、短信登录"><a href="#1、短信登录" class="headerlink" title="1、短信登录"></a>1、短信登录</h2><h3 id="1-1、导入黑马点评项目"><a href="#1-1、导入黑马点评项目" class="headerlink" title="1.1、导入黑马点评项目"></a>1.1、导入黑马点评项目</h3><h4 id="1-1-1-、导入SQL"><a href="#1-1-1-、导入SQL" class="headerlink" title="1.1.1 、导入SQL"></a>1.1.1 、导入SQL</h4><p><img src="/20221205120000/1653057872536.png" alt="相关表"></p><h4 id="1-1-2、有关当前模型"><a href="#1-1-2、有关当前模型" class="headerlink" title="1.1.2、有关当前模型"></a>1.1.2、有关当前模型</h4><p>手机或者app端发起请求，请求我们的nginx服务器，nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开tomcat访问redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游tomcat服务器，打散流量，我们都知道一台4核8G的tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过nginx的负载均衡分流后，利用集群支撑起整个项目，同时nginx在部署了前端项目后，更是可以做到动静分离，进一步降低tomcat服务的压力，这些功能都得靠nginx起作用，所以nginx是整个项目中重要的一环。</p><p>在tomcat支撑起并发流量后，我们如果让tomcat直接去访问Mysql，根据经验Mysql企业级服务器只要上点并发，一般是16或32 核心cpu，32 或64G内存，像企业级mysql加上固态硬盘能够支撑的并发，大概就是4000起~7000左右，上万并发， 瞬间就会让Mysql服务器的cpu，硬盘全部打满，容易崩溃，所以我们在高并发场景下，会选择使用mysql集群，同时为了进一步降低Mysql的压力，同时增加访问的性能，我们也会加入Redis，同时使用Redis集群使得Redis对外提供更好的服务。</p><p><img src="/20221205120000/1653059409865.png" alt="系统架构图"></p><h4 id="1-1-3、导入后端项目"><a href="#1-1-3、导入后端项目" class="headerlink" title="1.1.3、导入后端项目"></a>1.1.3、导入后端项目</h4><p>在资料中提供了一个项目源码：</p><p><img src="/20221205120000/1653060237073.png" alt="1653060237073"></p><h4 id="1-1-4、导入前端工程"><a href="#1-1-4、导入前端工程" class="headerlink" title="1.1.4、导入前端工程"></a>1.1.4、导入前端工程</h4><p><img src="/20221205120000/1653060337562.png" alt="1653060337562"></p><h4 id="1-1-5-运行前端项目"><a href="#1-1-5-运行前端项目" class="headerlink" title="1.1.5 运行前端项目"></a>1.1.5 运行前端项目</h4><p><img src="/20221205120000/1653060588190.png" alt="1653060588190"></p><h3 id="1-2-、基于Session实现登录流程"><a href="#1-2-、基于Session实现登录流程" class="headerlink" title="1.2 、基于Session实现登录流程"></a>1.2 、基于Session实现登录流程</h3><p><strong>发送验证码：</strong></p><p>用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号</p><p>如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户</p><p><strong>短信验证码登录、注册：</strong></p><p>用户将验证码和手机号进行输入，后台从session中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到session中，方便后续获得当前登录信息</p><p><strong>校验登录状态:</strong></p><p>用户在请求时候，会从cookie中携带者JsessionId到后台，后台通过JsessionId从session中拿到用户信息，如果没有session信息，则进行拦截，如果有session信息，则将用户信息保存到threadLocal中，并且放行</p><p><img src="/20221205120000/1653066208144.png" alt="1653066208144"></p><h3 id="1-3-、实现发送短信验证码功能"><a href="#1-3-、实现发送短信验证码功能" class="headerlink" title="1.3 、实现发送短信验证码功能"></a>1.3 、实现发送短信验证码功能</h3><p><strong>页面流程</strong></p><p><img src="/20221205120000/1653067054461.png" alt="1653067054461"></p><p><strong>具体代码如下</strong></p><p><strong>贴心小提示：</strong></p><p>具体逻辑上文已经分析，我们仅仅只需要按照提示的逻辑写出代码即可。</p><ul><li>发送验证码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sendCode</span><span class="hljs-params">(String phone, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 1.校验手机号</span><br>    <span class="hljs-keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;<br>        <span class="hljs-comment">// 2.如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.符合，生成验证码</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> RandomUtil.randomNumbers(<span class="hljs-number">6</span>);<br><br>    <span class="hljs-comment">// 4.保存验证码到 session</span><br>    session.setAttribute(<span class="hljs-string">&quot;code&quot;</span>,code);<br>    <span class="hljs-comment">// 5.发送验证码</span><br>    log.debug(<span class="hljs-string">&quot;发送短信验证码成功，验证码：&#123;&#125;&quot;</span>, code);<br>    <span class="hljs-comment">// 返回ok</span><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>登录</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 1.校验手机号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br>    <span class="hljs-keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;<br>        <span class="hljs-comment">// 2.如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.校验验证码</span><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;code&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>    <span class="hljs-keyword">if</span>(cacheCode == <span class="hljs-literal">null</span> || !cacheCode.toString().equals(code))&#123;<br>         <span class="hljs-comment">//3.不一致，报错</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//一致，根据手机号查询用户</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<br><br>    <span class="hljs-comment">//5.判断用户是否存在</span><br>    <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-comment">//不存在，则创建</span><br>        user =  createUserWithPhone(phone);<br>    &#125;<br>    <span class="hljs-comment">//7.保存用户信息到session中</span><br>    session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>,user);<br><br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4、实现登录拦截功能"><a href="#1-4、实现登录拦截功能" class="headerlink" title="1.4、实现登录拦截功能"></a>1.4、实现登录拦截功能</h3><p><strong>温馨小贴士：tomcat的运行原理</strong></p><p><img src="/20221205120000/1653068196656.png" alt="1653068196656"></p><p>当用户发起请求时，会访问我们像tomcat注册的端口，任何程序想要运行，都需要有一个线程对当前端口号进行监听，tomcat也不例外，当监听线程知道用户想要和tomcat连接连接时，那会由监听线程创建socket连接，socket都是成对出现的，用户通过socket像互相传递数据，当tomcat端的socket接受到数据后，此时监听线程会从tomcat的线程池中取出一个线程执行用户请求，在我们的服务部署到tomcat后，线程会找到用户想要访问的工程，然后用这个线程转发到工程中的controller，service，dao中，并且访问对应的DB，在用户执行完请求后，再统一返回，再找到tomcat端的socket，再将数据写回到用户端的socket，完成请求和响应</p><p>通过以上讲解，我们可以得知 每个用户其实对应都是去找tomcat线程池中的一个线程来完成工作的， 使用完成后再进行回收，既然每个请求都是独立的，所以在每个用户去访问我们的工程时，我们可以使用threadlocal来做到线程隔离，每个线程操作自己的一份数据</p><p><strong>温馨小贴士：关于threadlocal</strong></p><p>如果小伙伴们看过threadLocal的源码，你会发现在threadLocal中，无论是他的put方法和他的get方法， 都是先从获得当前用户的线程，然后从线程中取出线程的成员变量map，只要线程不一样，map就不一样，所以可以通过这种方式来做到线程隔离</p><p><img src="/20221205120000/1653068874258.png" alt="1653068874258"></p><p>拦截器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>       <span class="hljs-comment">//1.获取session</span><br>        <span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> request.getSession();<br>        <span class="hljs-comment">//2.获取session中的用户</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> session.getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-comment">//3.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span>(user == <span class="hljs-literal">null</span>)&#123;<br>              <span class="hljs-comment">//4.不存在，拦截，返回401状态码</span><br>              response.setStatus(<span class="hljs-number">401</span>);<br>              <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">//5.存在，保存用户信息到Threadlocal</span><br>        UserHolder.saveUser((User)user);<br>        <span class="hljs-comment">//6.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>让拦截器生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// 登录拦截器</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterceptor</span>())<br>                .excludePathPatterns(<br>                        <span class="hljs-string">&quot;/shop/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/voucher/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/shop-type/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/upload/**&quot;</span>,<br>                        <span class="hljs-string">&quot;/blog/hot&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/code&quot;</span>,<br>                        <span class="hljs-string">&quot;/user/login&quot;</span><br>                ).order(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// token刷新的拦截器</span><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>).order(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5、隐藏用户敏感信息"><a href="#1-5、隐藏用户敏感信息" class="headerlink" title="1.5、隐藏用户敏感信息"></a>1.5、隐藏用户敏感信息</h3><p>我们通过浏览器观察到此时用户的全部信息都在，这样极为不靠谱，所以我们应当在返回用户信息之前，将用户的敏感信息进行隐藏，采用的核心思路就是书写一个UserDto对象，这个UserDto对象就没有敏感信息了，我们在返回前，将有用户敏感信息的User对象转化成没有敏感信息的UserDto对象，那么就能够避免这个尴尬的问题了</p><p><strong>在登录方法处修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//7.保存用户信息到session中</span><br>session.setAttribute(<span class="hljs-string">&quot;user&quot;</span>, BeanUtils.copyProperties(user,UserDTO.class));<br></code></pre></td></tr></table></figure><p><strong>在拦截器处：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//5.存在，保存用户信息到Threadlocal</span><br>UserHolder.saveUser((UserDTO) user);<br></code></pre></td></tr></table></figure><p><strong>在UserHolder处：将user对象换成UserDTO</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserHolder</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocal</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveUser</span><span class="hljs-params">(UserDTO user)</span>&#123;<br>        tl.set(user);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserDTO <span class="hljs-title function_">getUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> tl.get();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeUser</span><span class="hljs-params">()</span>&#123;<br>        tl.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-6、session共享问题"><a href="#1-6、session共享问题" class="headerlink" title="1.6、session共享问题"></a>1.6、session共享问题</h3><p><strong>核心思路分析：</strong></p><p>每个tomcat中都有一份属于自己的session,假设用户第一次访问第一台tomcat，并且把自己的信息存放到第一台服务器的session中，但是第二次这个用户访问到了第二台tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的session，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是session拷贝，就是说虽然每个tomcat上都有不同的session，但是每当任意一台服务器的session修改时，都会同步给其他的Tomcat服务器的session，这样的话，就可以实现session的共享了</p><p>但是这种方案具有两个大问题</p><p>1、每台服务器中都有完整的一份session数据，服务器压力过大。</p><p>2、session拷贝数据时，可能会出现延迟</p><p>所以咱们后来采用的方案都是基于redis来完成，我们把session换成redis，redis数据本身就是共享的，就可以避免session共享的问题了</p><p><img src="/20221205120000/1653069893050.png" alt="1653069893050"></p><h3 id="1-7-Redis代替session的业务流程"><a href="#1-7-Redis代替session的业务流程" class="headerlink" title="1.7 Redis代替session的业务流程"></a>1.7 Redis代替session的业务流程</h3><h4 id="1-7-1、设计key的结构"><a href="#1-7-1、设计key的结构" class="headerlink" title="1.7.1、设计key的结构"></a>1.7.1、设计key的结构</h4><p>首先我们要思考一下利用redis来存储数据，那么到底使用哪种结构呢？由于存入的数据比较简单，我们可以考虑使用String，或者是使用哈希，如下图，如果使用String，同学们注意他的value，用多占用一点空间，如果使用哈希，则他的value中只会存储他数据本身，如果不是特别在意内存，其实使用String就可以啦。</p><p><img src="/20221205120000/1653319261433.png" alt="1653319261433"></p><h4 id="1-7-2、设计key的具体细节"><a href="#1-7-2、设计key的具体细节" class="headerlink" title="1.7.2、设计key的具体细节"></a>1.7.2、设计key的具体细节</h4><p>所以我们可以使用String结构，就是一个简单的key，value键值对的方式，但是关于key的处理，session他是每个用户都有自己的session，但是redis的key是共享的，咱们就不能使用code了</p><p>在设计这个key的时候，我们之前讲过需要满足两点</p><p>1、key要具有唯一性</p><p>2、key要方便携带</p><p>如果我们采用phone：手机号这个的数据来存储当然是可以的，但是如果把这样的敏感数据存储到redis中并且从页面中带过来毕竟不太合适，所以我们在后台生成一个随机串token，然后让前端带来这个token就能完成我们的整体逻辑了</p><h4 id="1-7-3、整体访问流程"><a href="#1-7-3、整体访问流程" class="headerlink" title="1.7.3、整体访问流程"></a>1.7.3、整体访问流程</h4><p>当注册完成后，用户去登录会去校验用户提交的手机号和验证码，是否一致，如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到redis，并且生成token作为redis的key，当我们校验用户是否登录时，会去携带着token进行访问，从redis中取出token对应的value，判断是否存在这个数据，如果没有则拦截，如果存在则将其保存到threadLocal中，并且放行。</p><p><img src="/20221205120000/1653319474181.png" alt="1653319474181"></p><h3 id="1-8-基于Redis实现短信登录"><a href="#1-8-基于Redis实现短信登录" class="headerlink" title="1.8 基于Redis实现短信登录"></a>1.8 基于Redis实现短信登录</h3><p>这里具体逻辑就不分析了，之前咱们已经重点分析过这个逻辑啦。</p><p><strong>UserServiceImpl代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">login</span><span class="hljs-params">(LoginFormDTO loginForm, HttpSession session)</span> &#123;<br>    <span class="hljs-comment">// 1.校验手机号</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> loginForm.getPhone();<br>    <span class="hljs-keyword">if</span> (RegexUtils.isPhoneInvalid(phone)) &#123;<br>        <span class="hljs-comment">// 2.如果不符合，返回错误信息</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;手机号格式错误！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.从redis获取验证码并校验</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cacheCode</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> loginForm.getCode();<br>    <span class="hljs-keyword">if</span> (cacheCode == <span class="hljs-literal">null</span> || !cacheCode.equals(code)) &#123;<br>        <span class="hljs-comment">// 不一致，报错</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;验证码错误&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 4.一致，根据手机号查询用户 select * from tb_user where phone = ?</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;phone&quot;</span>, phone).one();<br><br>    <span class="hljs-comment">// 5.判断用户是否存在</span><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 6.不存在，创建新用户并保存</span><br>        user = createUserWithPhone(phone);<br>    &#125;<br><br>    <span class="hljs-comment">// 7.保存用户信息到 redis中</span><br>    <span class="hljs-comment">// 7.1.随机生成token，作为登录令牌</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">// 7.2.将User对象转为HashMap存储</span><br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);<br>    Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(),<br>            CopyOptions.create()<br>                    .setIgnoreNullValue(<span class="hljs-literal">true</span>)<br>                    .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));<br>    <span class="hljs-comment">// 7.3.存储</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">tokenKey</span> <span class="hljs-operator">=</span> LOGIN_USER_KEY + token;<br>    stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);<br>    <span class="hljs-comment">// 7.4.设置token有效期</span><br>    stringRedisTemplate.expire(tokenKey, LOGIN_USER_TTL, TimeUnit.MINUTES);<br><br>    <span class="hljs-comment">// 8.返回token</span><br>    <span class="hljs-keyword">return</span> Result.ok(token);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-9-解决状态登录刷新问题"><a href="#1-9-解决状态登录刷新问题" class="headerlink" title="1.9 解决状态登录刷新问题"></a>1.9 解决状态登录刷新问题</h3><h4 id="1-9-1-初始方案思路总结："><a href="#1-9-1-初始方案思路总结：" class="headerlink" title="1.9.1 初始方案思路总结："></a>1.9.1 初始方案思路总结：</h4><p>在这个方案中，他确实可以使用对应路径的拦截，同时刷新登录token令牌的存活时间，但是现在这个拦截器他只是拦截需要被拦截的路径，假设当前用户访问了一些不需要拦截的路径，那么这个拦截器就不会生效，所以此时令牌刷新的动作实际上就不会执行，所以这个方案他是存在问题的</p><p><img src="/20221205120000/1653320822964.png" alt="1653320822964"></p><h4 id="1-9-2-优化方案"><a href="#1-9-2-优化方案" class="headerlink" title="1.9.2 优化方案"></a>1.9.2 优化方案</h4><p>既然之前的拦截器无法对不需要拦截的路径生效，那么我们可以添加一个拦截器，在第一个拦截器中拦截所有的路径，把第二个拦截器做的事情放入到第一个拦截器中，同时刷新令牌，因为第一个拦截器有了threadLocal的数据，所以此时第二个拦截器只需要判断拦截器中的user对象是否存在即可，完成整体刷新功能。</p><p><img src="/20221205120000/1653320764547.png" alt="1653320764547"></p><h4 id="1-9-3-代码"><a href="#1-9-3-代码" class="headerlink" title="1.9.3 代码"></a>1.9.3 代码</h4><p><strong>RefreshTokenInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefreshTokenInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RefreshTokenInterceptor</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1.获取请求头中的token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> request.getHeader(<span class="hljs-string">&quot;authorization&quot;</span>);<br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(token)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 2.基于TOKEN获取redis中的用户</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span>  <span class="hljs-operator">=</span> LOGIN_USER_KEY + token;<br>        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);<br>        <span class="hljs-comment">// 3.判断用户是否存在</span><br>        <span class="hljs-keyword">if</span> (userMap.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-comment">// 5.将查询到的hash数据转为UserDTO</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDTO</span>(), <span class="hljs-literal">false</span>);<br>        <span class="hljs-comment">// 6.存在，保存用户信息到 ThreadLocal</span><br>        UserHolder.saveUser(userDTO);<br>        <span class="hljs-comment">// 7.刷新token有效期</span><br>        stringRedisTemplate.expire(key, LOGIN_USER_TTL, TimeUnit.MINUTES);<br>        <span class="hljs-comment">// 8.放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCompletion</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 移除用户</span><br>        UserHolder.removeUser();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>LoginInterceptor</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 1.判断是否需要拦截（ThreadLocal中是否有用户）</span><br>        <span class="hljs-keyword">if</span> (UserHolder.getUser() == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 没有，需要拦截，设置状态码</span><br>            response.setStatus(<span class="hljs-number">401</span>);<br>            <span class="hljs-comment">// 拦截</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 有用户，则放行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、商户查询缓存"><a href="#2、商户查询缓存" class="headerlink" title="2、商户查询缓存"></a>2、商户查询缓存</h2><h3 id="2-1-什么是缓存"><a href="#2-1-什么是缓存" class="headerlink" title="2.1 什么是缓存?"></a>2.1 什么是缓存?</h3><p><strong>前言</strong>:<strong>什么是缓存?</strong></p><p>就像自行车,越野车的避震器<img src="/20221205120000/%E9%81%BF%E9%9C%87%E5%99%A8.gif"></p><p>举个例子:越野车,山地自行车,都拥有”避震器”,<strong>防止</strong>车体加速后因惯性,在酷似”U”字母的地形上飞跃,硬着陆导致的<strong>损害</strong>,像个弹簧一样;</p><p>同样,实际开发中,系统也需要”避震器”,防止过高的数据访问猛冲系统,导致其操作线程无法及时处理信息而瘫痪;</p><p>这在实际开发中对企业讲,对产品口碑,用户评价都是致命的;所以企业非常重视缓存技术;</p><p><strong>缓存(<strong>Cache),就是数据交换的</strong>缓冲区</strong>,俗称的缓存就是<strong>缓冲区内的数据</strong>,一般从数据库中获取,存储于本地代码(例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">例<span class="hljs-number">1</span>:Static <span class="hljs-keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;(); 本地用于高并发<br><br>例<span class="hljs-number">2</span>:<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Cache&lt;K,V&gt; USER_CACHE = CacheBuilder.newBuilder().build(); 用于redis等缓存<br><br>例<span class="hljs-number">3</span>:Static <span class="hljs-keyword">final</span> Map&lt;K,V&gt; map =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(); 本地缓存<br></code></pre></td></tr></table></figure><p>由于其被<strong>Static</strong>修饰,所以随着类的加载而被加载到<strong>内存之中</strong>,作为本地缓存,由于其又被<strong>final</strong>修饰,所以其引用(例3:map)和对象(例3:new HashMap())之间的关系是固定的,不能改变,因此不用担心赋值(&#x3D;)导致缓存失效;</p><h4 id="2-1-1-为什么要使用缓存"><a href="#2-1-1-为什么要使用缓存" class="headerlink" title="2.1.1 为什么要使用缓存"></a>2.1.1 为什么要使用缓存</h4><p>一句话:因为<strong>速度快,好用</strong></p><p>缓存数据存储于代码中,而代码运行在内存中,内存的读写性能远高于磁盘,缓存可以大大降低<strong>用户访问并发量带来的</strong>服务器读写压力</p><p>实际开发过程中,企业的数据量,少则几十万,多则几千万,这么大数据量,如果没有缓存来作为”避震器”,系统是几乎撑不住的,所以企业会大量运用到缓存技术;</p><p>但是缓存也会增加代码复杂度和运营的成本:</p><p><img src="/20221205120000/image-20220523214414123.png"></p><h4 id="2-1-2-如何使用缓存"><a href="#2-1-2-如何使用缓存" class="headerlink" title="2.1.2 如何使用缓存"></a>2.1.2 如何使用缓存</h4><p>实际开发中,会构筑多级缓存来使系统运行速度进一步提升,例如:本地缓存与redis中的缓存并发使用</p><p><strong>浏览器缓存</strong>：主要是存在于浏览器端的缓存</p><p><strong>应用层缓存：</strong>可以分为tomcat本地缓存，比如之前提到的map，或者是使用redis作为缓存</p><p><strong>数据库缓存：</strong>在数据库中有一片空间是 buffer pool，增改查数据都会先加载到mysql的缓存中</p><p><strong>CPU缓存：</strong>当代计算机最大的问题是 cpu性能提升了，但内存读写速度没有跟上，所以为了适应当下的情况，增加了cpu的L1，L2，L3级的缓存</p><p><img src="/20221205120000/image-20220523212915666.png"></p><h3 id="2-2-添加商户缓存"><a href="#2-2-添加商户缓存" class="headerlink" title="2.2 添加商户缓存"></a>2.2 添加商户缓存</h3><p>在我们查询商户信息时，我们是直接操作从数据库中去进行查询的，大致逻辑是这样，直接查询数据库那肯定慢咯，所以我们需要增加缓存</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@GetMapping</span>(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)<br>public Result <span class="hljs-built_in">queryShopById</span>(<span class="hljs-variable">@PathVariable</span>(<span class="hljs-string">&quot;id&quot;</span>) Long id) &#123;<br>    <span class="hljs-comment">//这里是直接查询数据库</span><br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">shopService</span><span class="hljs-selector-class">.queryById</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-1-、缓存模型和思路"><a href="#2-2-1-、缓存模型和思路" class="headerlink" title="2.2.1 、缓存模型和思路"></a>2.2.1 、缓存模型和思路</h4><p>标准的操作方式就是查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入redis。</p><p><img src="/20221205120000/1653322097736.png" alt="1653322097736"></p><h4 id="2-1-2、代码如下"><a href="#2-1-2、代码如下" class="headerlink" title="2.1.2、代码如下"></a>2.1.2、代码如下</h4><p>代码思路：如果缓存有，则直接返回，如果缓存不存在，则查询数据库，然后存入redis。</p><p><img src="/20221205120000/1653322190155.png" alt="1653322190155"></p><h3 id="2-3-缓存更新策略"><a href="#2-3-缓存更新策略" class="headerlink" title="2.3 缓存更新策略"></a>2.3 缓存更新策略</h3><p>缓存更新是redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们向redis插入太多数据，此时就可能会导致缓存中的数据过多，所以redis会对部分数据进行更新，或者把他叫为淘汰更合适。</p><p><strong>内存淘汰：</strong>redis自动进行，当redis内存达到咱们设定的max-memery的时候，会自动触发淘汰机制，淘汰掉一些不重要的数据(可以自己设置策略方式)</p><p><strong>超时剔除：</strong>当我们给redis设置了过期时间ttl之后，redis会将超时的数据进行删除，方便咱们继续使用缓存</p><p><strong>主动更新：</strong>我们可以手动调用方法把缓存删掉，通常用于解决缓存和数据库不一致问题</p><p><img src="/20221205120000/1653322506393.png" alt="1653322506393"></p><h4 id="2-3-1-、数据库缓存不一致解决方案："><a href="#2-3-1-、数据库缓存不一致解决方案：" class="headerlink" title="2.3.1 、数据库缓存不一致解决方案："></a>2.3.1 、数据库缓存不一致解决方案：</h4><p>由于我们的<strong>缓存的数据源来自于数据库</strong>,而数据库的<strong>数据是会发生变化的</strong>,因此,如果当数据库中<strong>数据发生变化,而缓存却没有同步</strong>,此时就会有<strong>一致性问题存在</strong>,其后果是:</p><p>用户使用缓存中的过时数据,就会产生类似多线程数据安全问题,从而影响业务,产品口碑等;怎么解决呢？有如下几种方案</p><p>Cache Aside Pattern 人工编码方式：缓存调用者在更新完数据库后再去更新缓存，也称之为双写方案</p><p>Read&#x2F;Write Through Pattern : 由系统本身完成，数据库与缓存的问题交由系统本身去处理</p><p>Write Behind Caching Pattern ：调用者只操作缓存，其他线程去异步处理数据库，实现最终一致</p><p><img src="/20221205120000/1653322857620.png" alt="1653322857620"></p><h4 id="2-3-2-、数据库和缓存不一致采用什么方案"><a href="#2-3-2-、数据库和缓存不一致采用什么方案" class="headerlink" title="2.3.2 、数据库和缓存不一致采用什么方案"></a>2.3.2 、数据库和缓存不一致采用什么方案</h4><p>综合考虑使用方案一，但是方案一调用者如何处理呢？这里有几个问题</p><p>操作缓存和数据库时有三个问题需要考虑：</p><p>如果采用第一个方案，那么假设我们每次操作数据库后，都操作缓存，但是中间如果没有人查询，那么这个更新动作实际上只有最后一次生效，中间的更新动作意义并不大，我们可以把缓存删除，等待再次查询时，将缓存中的数据加载出来</p><ul><li><p>删除缓存还是更新缓存？</p><ul><li>更新缓存：每次更新数据库都更新缓存，无效写操作较多</li><li>删除缓存：更新数据库时让缓存失效，查询时再更新缓存</li></ul></li><li><p>如何保证缓存与数据库的操作的同时成功或失败？</p><ul><li>单体系统，将缓存与数据库操作放在一个事务</li><li>分布式系统，利用TCC等分布式事务方案</li></ul></li></ul><p>应该具体操作缓存还是操作数据库，我们应当是先操作数据库，再删除缓存，原因在于，如果你选择第一种方案，在两个线程并发来访问时，假设线程1先来，他先把缓存删了，此时线程2过来，他查询缓存数据并不存在，此时他写入缓存，当他写入缓存后，线程1再执行更新动作时，实际上写入的就是旧的数据，新的数据被旧数据覆盖了。</p><ul><li>先操作缓存还是先操作数据库？<ul><li>先删除缓存，再操作数据库</li><li>先操作数据库，再删除缓存</li></ul></li></ul><p><img src="/20221205120000/1653323595206.png" alt="1653323595206"></p><h3 id="2-4-实现商铺和缓存与数据库双写一致"><a href="#2-4-实现商铺和缓存与数据库双写一致" class="headerlink" title="2.4 实现商铺和缓存与数据库双写一致"></a>2.4 实现商铺和缓存与数据库双写一致</h3><p>核心思路如下：</p><p>修改ShopController中的业务逻辑，满足下面的需求：</p><p>根据id查询店铺时，如果缓存未命中，则查询数据库，将数据库结果写入缓存，并设置超时时间</p><p>根据id修改店铺时，先修改数据库，再删除缓存</p><p><strong>修改重点代码1</strong>：修改<strong>ShopServiceImpl</strong>的queryById方法</p><p><strong>设置redis缓存时添加过期时间</strong></p><p><img src="/20221205120000/1653325871232.png" alt="1653325871232"></p><p><strong>修改重点代码2</strong></p><p>代码分析：通过之前的淘汰，我们确定了采用删除策略，来解决双写问题，当我们修改了数据之后，然后把缓存中的数据进行删除，查询时发现缓存中没有数据，则会从mysql中加载最新的数据，从而避免数据库和缓存不一致的问题</p><p><img src="/20221205120000/1653325929549.png" alt="1653325929549"></p><h3 id="2-5-缓存穿透问题的解决思路"><a href="#2-5-缓存穿透问题的解决思路" class="headerlink" title="2.5 缓存穿透问题的解决思路"></a>2.5 缓存穿透问题的解决思路</h3><p>缓存穿透 ：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会生效，这些请求都会打到数据库。</p><p>常见的解决方案有两种：</p><ul><li>缓存空对象<ul><li>优点：实现简单，维护方便</li><li>缺点：<ul><li>额外的内存消耗</li><li>可能造成短期的不一致</li></ul></li></ul></li><li>布隆过滤<ul><li>优点：内存占用较少，没有多余key</li><li>缺点：<ul><li>实现复杂</li><li>存在误判可能</li></ul></li></ul></li></ul><p><strong>缓存空对象思路分析：</strong>当我们客户端访问不存在的数据时，先请求redis，但是此时redis中没有数据，此时会访问到数据库，但是数据库中也没有数据，这个数据穿透了缓存，直击数据库，我们都知道数据库能够承载的并发不如redis这么高，如果大量的请求同时过来访问这种不存在的数据，这些请求就都会访问到数据库，简单的解决方案就是哪怕这个数据在数据库中也不存在，我们也把这个数据存入到redis中去，这样，下次用户过来访问这个不存在的数据，那么在redis中也能找到这个数据就不会进入到缓存了</p><p><strong>布隆过滤：</strong>布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，走哈希思想去判断当前这个要查询的这个数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库中一定存在这个数据，在数据库中查询出来这个数据后，再将其放入到redis中，</p><p>假设布隆过滤器判断这个数据不存在，则直接返回</p><p>这种方式优点在于节约内存空间，存在误判，误判原因在于：布隆过滤器走的是哈希思想，只要哈希思想，就可能存在哈希冲突</p><p><img src="/20221205120000/1653326156516.png" alt="1653326156516"></p><h3 id="2-6-编码解决商品查询的缓存穿透问题："><a href="#2-6-编码解决商品查询的缓存穿透问题：" class="headerlink" title="2.6 编码解决商品查询的缓存穿透问题："></a>2.6 编码解决商品查询的缓存穿透问题：</h3><p>核心思路如下：</p><p>在原来的逻辑中，我们如果发现这个数据在mysql中不存在，直接就返回404了，这样是会存在缓存穿透问题的</p><p>现在的逻辑中：如果这个数据不存在，我们不会返回404 ，还是会把这个数据写入到Redis中，并且将value设置为空，欧当再次发起查询时，我们如果发现命中之后，判断这个value是否是null，如果是null，则是之前写入的数据，证明是缓存穿透数据，如果不是，则直接返回数据。</p><p><img src="/20221205120000/1653327124561.png" alt="1653327124561"></p><p><strong>小总结：</strong></p><p>缓存穿透产生的原因是什么？</p><ul><li>用户请求的数据在缓存中和数据库中都不存在，不断发起这样的请求，给数据库带来巨大压力</li></ul><p>缓存穿透的解决方案有哪些？</p><ul><li>缓存null值</li><li>布隆过滤</li><li>增强id的复杂度，避免被猜测id规律</li><li>做好数据的基础格式校验</li><li>加强用户权限校验</li><li>做好热点参数的限流</li></ul><h3 id="2-7-缓存雪崩问题及解决思路"><a href="#2-7-缓存雪崩问题及解决思路" class="headerlink" title="2.7 缓存雪崩问题及解决思路"></a>2.7 缓存雪崩问题及解决思路</h3><p>缓存雪崩是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>解决方案：</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><p><img src="/20221205120000/1653327884526.png" alt="1653327884526"></p><h3 id="2-8-缓存击穿问题及解决思路"><a href="#2-8-缓存击穿问题及解决思路" class="headerlink" title="2.8 缓存击穿问题及解决思路"></a>2.8 缓存击穿问题及解决思路</h3><p>缓存击穿问题也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问会在瞬间给数据库带来巨大的冲击。</p><p>常见的解决方案有两种：</p><ul><li>互斥锁</li><li>逻辑过期</li></ul><p>逻辑分析：假设线程1在查询缓存之后，本来应该去查询数据库，然后把这个数据重新加载到缓存的，此时只要线程1走完这个逻辑，其他线程就都能从缓存中加载这些数据了，但是假设在线程1没有走完的时候，后续的线程2，线程3，线程4同时过来访问当前这个方法， 那么这些线程都不能从缓存中查询到数据，那么他们就会同一时刻来访问查询缓存，都没查到，接着同一时间去访问数据库，同时的去执行数据库代码，对数据库访问压力过大</p><p><img src="/20221205120000/1653328022622.png" alt="1653328022622"></p><p>解决方案一、使用锁来解决：</p><p>因为锁能实现互斥性。假设线程过来，只能一个人一个人的来访问数据库，从而避免对于数据库访问压力过大，但这也会影响查询的性能，因为此时会让查询的性能从并行变成了串行，我们可以采用tryLock方法 + double check来解决这样的问题。</p><p>假设现在线程1过来访问，他查询缓存没有命中，但是此时他获得到了锁的资源，那么线程1就会一个人去执行逻辑，假设现在线程2过来，线程2在执行过程中，并没有获得到锁，那么线程2就可以进行到休眠，直到线程1把锁释放后，线程2获得到锁，然后再来执行逻辑，此时就能够从缓存中拿到数据了。</p><p><img src="/20221205120000/1653328288627.png" alt="1653328288627"></p><p>解决方案二、逻辑过期方案</p><p>方案分析：我们之所以会出现这个缓存击穿问题，主要原因是在于我们对key设置了过期时间，假设我们不设置过期时间，其实就不会有缓存击穿的问题，但是不设置过期时间，这样数据不就一直占用我们内存了吗，我们可以采用逻辑过期方案。</p><p>我们把过期时间设置在 redis的value中，注意：这个过期时间并不会直接作用于redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断出来当前的数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的线程他会开启一个 线程去进行 以前的重构数据的逻辑，直到新开的线程完成这个逻辑后，才释放锁， 而线程1直接进行返回，假设现在线程3过来访问，由于线程线程2持有着锁，所以线程3无法获得锁，线程3也直接返回数据，只有等到新开的线程2把重建数据构建完后，其他线程才能走返回正确的数据。</p><p>这种方案巧妙在于，异步的构建缓存，缺点在于在构建完缓存之前，返回的都是脏数据。</p><p><img src="/20221205120000/1653328663897.png" alt="1653328663897"></p><p>进行对比</p><p><strong>互斥锁方案：</strong>由于保证了互斥性，所以数据一致，且实现简单，因为仅仅只需要加一把锁而已，也没其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁就有死锁问题的发生，且只能串行执行性能肯定受到影响</p><p><strong>逻辑过期方案：</strong> 线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构数据，但是在重构数据完成前，其他的线程只能返回之前的数据，且实现起来麻烦</p><p><img src="/20221205120000/1653357522914.png" alt="1653357522914"></p><h3 id="2-9-利用互斥锁解决缓存击穿问题"><a href="#2-9-利用互斥锁解决缓存击穿问题" class="headerlink" title="2.9 利用互斥锁解决缓存击穿问题"></a>2.9 利用互斥锁解决缓存击穿问题</h3><p>核心思路：相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是 进行查询之后，如果从缓存没有查询到数据，则进行互斥锁的获取，获取互斥锁后，判断是否获得到了锁，如果没有获得到，则休眠，过一会再进行尝试，直到获取到锁为止，才能进行查询</p><p>如果获取到了锁的线程，再去进行查询，查询后将数据写入redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行操作数据库的逻辑，防止缓存击穿</p><p><img src="/20221205120000/1653357860001.png" alt="1653357860001"></p><p><strong>操作锁的代码：</strong></p><p>核心思路就是利用redis的setnx方法来表示获取锁，该方法含义是redis中如果没有这个key，则插入成功，返回1，在stringRedisTemplate中返回true，  如果有这个key则插入失败，则返回0，在stringRedisTemplate返回false，我们可以通过true，或者是false，来表示是否有线程成功插入key，成功插入的key的线程我们认为他就是获得到锁的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>    stringRedisTemplate.delete(key);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>操作代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(Long id)</span>  &#123;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>       <span class="hljs-comment">// 1、从redis中查询商铺缓存</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;key&quot;</span>);<br>       <span class="hljs-comment">// 2、判断是否存在</span><br>       <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<br>           <span class="hljs-comment">// 存在,直接返回</span><br>           <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);<br>       &#125;<br>       <span class="hljs-comment">//判断命中的值是否是空值</span><br>       <span class="hljs-keyword">if</span> (shopJson != <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-comment">//返回一个错误信息</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-comment">// 4.实现缓存重构</span><br>       <span class="hljs-comment">//4.1 获取互斥锁</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock:shop:&quot;</span> + id;<br>       <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>       <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>           <span class="hljs-comment">// 4.2 判断否获取成功</span><br>           <span class="hljs-keyword">if</span>(!isLock)&#123;<br>               <span class="hljs-comment">//4.3 失败，则休眠重试</span><br>               Thread.sleep(<span class="hljs-number">50</span>);<br>               <span class="hljs-keyword">return</span> queryWithMutex(id);<br>           &#125;<br>           <span class="hljs-comment">//4.4 成功，根据id查询数据库</span><br>            shop = getById(id);<br>           <span class="hljs-comment">// 5.不存在，返回错误</span><br>           <span class="hljs-keyword">if</span>(shop == <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//将空值写入redis</span><br>               stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>               <span class="hljs-comment">//返回错误信息</span><br>               <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>           &#125;<br>           <span class="hljs-comment">//6.写入redis</span><br>           stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(shop),CACHE_NULL_TTL,TimeUnit.MINUTES);<br><br>       &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>           <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>       &#125;<br>       <span class="hljs-keyword">finally</span> &#123;<br>           <span class="hljs-comment">//7.释放互斥锁</span><br>           unlock(lockKey);<br>       &#125;<br>       <span class="hljs-keyword">return</span> shop;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-0-、利用逻辑过期解决缓存击穿问题"><a href="#3-0-、利用逻辑过期解决缓存击穿问题" class="headerlink" title="3.0 、利用逻辑过期解决缓存击穿问题"></a>3.0 、利用逻辑过期解决缓存击穿问题</h3><p><strong>需求：修改根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题</strong></p><p>思路分析：当用户开始查询redis时，判断是否命中，如果没有命中则直接返回空数据，不查询数据库，而一旦命中后，将value取出，判断value中的过期时间是否满足，如果没有过期，则直接返回redis中的数据，如果过期，则在开启独立线程后直接返回之前的数据，独立线程去重构数据，重构完成后释放互斥锁。</p><p><img src="/20221205120000/1653360308731.png" alt="1653360308731"></p><p>如果封装数据：因为现在redis中存储的数据的value需要带上过期时间，此时要么你去修改原来的实体类，要么你</p><p><strong>步骤一、</strong></p><p>新建一个实体类，我们采用第二个方案，这个方案，对原来代码没有侵入性。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisData</span> &#123;<br>    <span class="hljs-keyword">private</span> LocalDateTime expireTime;<br>    <span class="hljs-keyword">private</span> Object <span class="hljs-keyword">data</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>步骤二、</strong></p><p>在<strong>ShopServiceImpl</strong> 新增此方法，利用单元测试进行缓存预热</p><p><img src="/20221205120000/1653360807133.png" alt="1653360807133"></p><p><strong>在测试类中</strong></p><p><img src="/20221205120000/1653360864839.png" alt="1653360864839"></p><p>步骤三：正式代码</p><p><strong>ShopServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">public</span> Shop <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">( Long id )</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CACHE_SHOP_KEY + id;<br>    <span class="hljs-comment">// 1.从redis查询商铺缓存</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>    <span class="hljs-comment">// 2.判断是否存在</span><br>    <span class="hljs-keyword">if</span> (StrUtil.isBlank(json)) &#123;<br>        <span class="hljs-comment">// 3.存在，直接返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <span class="hljs-comment">// 4.命中，需要先把json反序列化为对象</span><br>    <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>    <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), Shop.class);<br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>    <span class="hljs-comment">// 5.判断是否过期</span><br>    <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 5.1.未过期，直接返回店铺信息</span><br>        <span class="hljs-keyword">return</span> shop;<br>    &#125;<br>    <span class="hljs-comment">// 5.2.已过期，需要缓存重建</span><br>    <span class="hljs-comment">// 6.缓存重建</span><br>    <span class="hljs-comment">// 6.1.获取互斥锁</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>    <span class="hljs-comment">// 6.2.判断是否获取锁成功</span><br>    <span class="hljs-keyword">if</span> (isLock)&#123;<br>        CACHE_REBUILD_EXECUTOR.submit( ()-&gt;&#123;<br><br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">//重建缓存</span><br>                <span class="hljs-built_in">this</span>.saveShop2Redis(id,<span class="hljs-number">20L</span>);<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                unlock(lockKey);<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">// 6.4.返回过期的商铺信息</span><br>    <span class="hljs-keyword">return</span> shop;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1、封装Redis工具类"><a href="#3-1、封装Redis工具类" class="headerlink" title="3.1、封装Redis工具类"></a>3.1、封装Redis工具类</h3><p>基于StringRedisTemplate封装一个缓存工具类，满足下列需求：</p><ul><li>方法1：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置TTL过期时间</li><li>方法2：将任意Java对象序列化为json并存储在string类型的key中，并且可以设置逻辑过期时间，用于处理缓</li></ul><p>存击穿问题</p><ul><li>方法3：根据指定的key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题</li><li>方法4：根据指定的key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li></ul><p>将逻辑进行封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheClient</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">CACHE_REBUILD_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CacheClient</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWithLogicalExpire</span><span class="hljs-params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-comment">// 设置逻辑过期</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>        redisData.setData(value);<br>        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br>        <span class="hljs-comment">// 写入Redis</span><br>        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(</span><br><span class="hljs-params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">// 2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(json)) &#123;<br>            <span class="hljs-comment">// 3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(json, type);<br>        &#125;<br>        <span class="hljs-comment">// 判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span> (json != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 返回一个错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 4.不存在，根据id查询数据库</span><br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>        <span class="hljs-comment">// 5.不存在，返回错误</span><br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 将空值写入redis</span><br>            stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>            <span class="hljs-comment">// 返回错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 6.存在，写入redis</span><br>        <span class="hljs-built_in">this</span>.set(key, r, time, unit);<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(</span><br><span class="hljs-params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">// 2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isBlank(json)) &#123;<br>            <span class="hljs-comment">// 3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-comment">// 4.命中，需要先把json反序列化为对象</span><br>        <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(json, RedisData.class);<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>        <span class="hljs-comment">// 5.判断是否过期</span><br>        <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 5.1.未过期，直接返回店铺信息</span><br>            <span class="hljs-keyword">return</span> r;<br>        &#125;<br>        <span class="hljs-comment">// 5.2.已过期，需要缓存重建</span><br>        <span class="hljs-comment">// 6.缓存重建</span><br>        <span class="hljs-comment">// 6.1.获取互斥锁</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>        <span class="hljs-comment">// 6.2.判断是否获取锁成功</span><br>        <span class="hljs-keyword">if</span> (isLock)&#123;<br>            <span class="hljs-comment">// 6.3.成功，开启独立线程，实现缓存重建</span><br>            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 查询数据库</span><br>                    <span class="hljs-type">R</span> <span class="hljs-variable">newR</span> <span class="hljs-operator">=</span> dbFallback.apply(id);<br>                    <span class="hljs-comment">// 重建缓存</span><br>                    <span class="hljs-built_in">this</span>.setWithLogicalExpire(key, newR, time, unit);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 释放锁</span><br>                    unlock(lockKey);<br>                &#125;<br>            &#125;);<br>        &#125;<br>        <span class="hljs-comment">// 6.4.返回过期的商铺信息</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;R, ID&gt; R <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(</span><br><span class="hljs-params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>        <span class="hljs-comment">// 1.从redis查询商铺缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">shopJson</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">// 2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;<br>            <span class="hljs-comment">// 3.存在，直接返回</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(shopJson, type);<br>        &#125;<br>        <span class="hljs-comment">// 判断命中的是否是空值</span><br>        <span class="hljs-keyword">if</span> (shopJson != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 返回一个错误信息</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 4.实现缓存重建</span><br>        <span class="hljs-comment">// 4.1.获取互斥锁</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> LOCK_SHOP_KEY + id;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>            <span class="hljs-comment">// 4.2.判断是否获取成功</span><br>            <span class="hljs-keyword">if</span> (!isLock) &#123;<br>                <span class="hljs-comment">// 4.3.获取锁失败，休眠并重试</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, unit);<br>            &#125;<br>            <span class="hljs-comment">// 4.4.获取锁成功，根据id查询数据库</span><br>            r = dbFallback.apply(id);<br>            <span class="hljs-comment">// 5.不存在，返回错误</span><br>            <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// 将空值写入redis</span><br>                stringRedisTemplate.opsForValue().set(key, <span class="hljs-string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);<br>                <span class="hljs-comment">// 返回错误信息</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">// 6.存在，写入redis</span><br>            <span class="hljs-built_in">this</span>.set(key, r, time, unit);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">// 7.释放锁</span><br>            unlock(lockKey);<br>        &#125;<br>        <span class="hljs-comment">// 8.返回</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">(String key)</span> &#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ShopServiceImpl 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> CacheClient cacheClient;<br><br> <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryById</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-comment">// 解决缓存穿透</span><br>        <span class="hljs-type">Shop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> cacheClient<br>                .queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, <span class="hljs-built_in">this</span>::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);<br><br>        <span class="hljs-comment">// 互斥锁解决缓存击穿</span><br>        <span class="hljs-comment">// Shop shop = cacheClient</span><br>        <span class="hljs-comment">//         .queryWithMutex(CACHE_SHOP_KEY, id, Shop.class, this::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><br>        <span class="hljs-comment">// 逻辑过期解决缓存击穿</span><br>        <span class="hljs-comment">// Shop shop = cacheClient</span><br>        <span class="hljs-comment">//         .queryWithLogicalExpire(CACHE_SHOP_KEY, id, Shop.class, this::getById, 20L, TimeUnit.SECONDS);</span><br><br>        <span class="hljs-keyword">if</span> (shop == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;店铺不存在！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 7.返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(shop);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3、优惠券秒杀"><a href="#3、优惠券秒杀" class="headerlink" title="3、优惠券秒杀"></a>3、优惠券秒杀</h2><h3 id="3-1-全局唯一ID"><a href="#3-1-全局唯一ID" class="headerlink" title="3.1 -全局唯一ID"></a>3.1 -全局唯一ID</h3><p>每个店铺都可以发布优惠券：</p><p><img src="/20221205120000/1653362612286.png" alt="1653362612286"></p><p>当用户抢购时，就会生成订单并保存到tb_voucher_order这张表中，而订单表如果使用数据库自增ID就存在一些问题：</p><ul><li>id的规律性太明显</li><li>受单表数据量的限制</li></ul><p>场景分析：如果我们的id具有太明显的规则，用户或者说商业对手很容易猜测出来我们的一些敏感信息，比如商城在一天时间内，卖出了多少单，这明显不合适。</p><p>场景分析二：随着我们商城规模越来越大，mysql的单表的容量不宜超过500W，数据量过大之后，我们要进行拆库拆表，但拆分表了之后，他们从逻辑上讲他们是同一张表，所以他们的id是不能一样的， 于是乎我们需要保证id的唯一性。</p><p><strong>全局ID生成器</strong>，是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足下列特性：</p><p><img src="/20221205120000/1653363100502.png" alt="1653363100502"></p><p>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其它信息：</p><p><img src="/20221205120000/1653363172079.png" alt="1653363172079">ID的组成部分：符号位：1bit，永远为0</p><p>时间戳：31bit，以秒为单位，可以使用69年</p><p>序列号：32bit，秒内的计数器，支持每秒产生2^32个不同ID</p><h3 id="3-2-Redis实现全局唯一Id"><a href="#3-2-Redis实现全局唯一Id" class="headerlink" title="3.2 -Redis实现全局唯一Id"></a>3.2 -Redis实现全局唯一Id</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisIdWorker</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开始时间戳</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">BEGIN_TIMESTAMP</span> <span class="hljs-operator">=</span> <span class="hljs-number">1640995200L</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 序列号的位数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">COUNT_BITS</span> <span class="hljs-operator">=</span> <span class="hljs-number">32</span>;<br><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RedisIdWorker</span><span class="hljs-params">(StringRedisTemplate stringRedisTemplate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.stringRedisTemplate = stringRedisTemplate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">nextId</span><span class="hljs-params">(String keyPrefix)</span> &#123;<br>        <span class="hljs-comment">// 1.生成时间戳</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">nowSecond</span> <span class="hljs-operator">=</span> now.toEpochSecond(ZoneOffset.UTC);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">timestamp</span> <span class="hljs-operator">=</span> nowSecond - BEGIN_TIMESTAMP;<br><br>        <span class="hljs-comment">// 2.生成序列号</span><br>        <span class="hljs-comment">// 2.1.获取当前日期，精确到天</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy:MM:dd&quot;</span>));<br>        <span class="hljs-comment">// 2.2.自增长</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="hljs-string">&quot;icr:&quot;</span> + keyPrefix + <span class="hljs-string">&quot;:&quot;</span> + date);<br><br>        <span class="hljs-comment">// 3.拼接并返回</span><br>        <span class="hljs-keyword">return</span> timestamp &lt;&lt; COUNT_BITS | count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><p>知识小贴士：关于countdownlatch</p><p>countdownlatch名为信号枪：主要的作用是同步协调在多线程的等待于唤醒问题</p><p>我们如果没有CountDownLatch ，那么由于程序是异步的，当异步程序没有执行完时，主线程就已经执行完了，然后我们期望的是分线程全部走完之后，主线程再走，所以我们此时需要使用到CountDownLatch</p><p>CountDownLatch 中有两个最重要的方法</p><p>1、countDown</p><p>2、await</p><p>await 方法 是阻塞方法，我们担心分线程没有执行完时，main线程就先执行，所以使用await可以让main线程阻塞，那么什么时候main线程不再阻塞呢？当CountDownLatch  内部维护的 变量变为0时，就不再阻塞，直接放行，那么什么时候CountDownLatch   维护的变量变为0 呢，我们只需要调用一次countDown ，内部变量就减少1，我们让分线程和变量绑定， 执行完一个分线程就减少一个变量，当分线程全部走完，CountDownLatch 维护的变量就是0，此时await就不再阻塞，统计出来的时间也就是所有分线程执行完后的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testIdWorker</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">CountDownLatch</span> <span class="hljs-variable">latch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CountDownLatch</span>(<span class="hljs-number">300</span>);<br><br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> () -&gt; &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;id = &quot;</span> + id);<br>        &#125;<br>        latch.countDown();<br>    &#125;;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>        es.submit(task);<br>    &#125;<br>    latch.await();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(<span class="hljs-string">&quot;time = &quot;</span> + (end - begin));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-添加优惠券"><a href="#3-3-添加优惠券" class="headerlink" title="3.3 添加优惠券"></a>3.3 添加优惠券</h3><p>每个店铺都可以发布优惠券，分为平价券和特价券。平价券可以任意购买，而特价券需要秒杀抢购：</p><p><img src="/20221205120000/1653365145124.png" alt="1653365145124"></p><p>tb_voucher：优惠券的基本信息，优惠金额、使用规则等<br>tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</p><p>平价券由于优惠力度并不是很大，所以是可以任意领取</p><p>而代金券由于优惠力度大，所以像第二种券，就得限制数量，从表结构上也能看出，特价券除了具有优惠券的基本信息以外，还具有库存，抢购时间，结束时间等等字段</p><p>**新增普通券代码：  **VoucherController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">addVoucher</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Voucher voucher)</span> &#123;<br>    voucherService.save(voucher);<br>    <span class="hljs-keyword">return</span> Result.ok(voucher.getId());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>新增秒杀券代码：</strong></p><p><strong>VoucherController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;seckill&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Voucher voucher)</span> &#123;<br>    voucherService.addSeckillVoucher(voucher);<br>    <span class="hljs-keyword">return</span> Result.ok(voucher.getId());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>VoucherServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(Voucher voucher)</span> &#123;<br>    <span class="hljs-comment">// 保存优惠券</span><br>    save(voucher);<br>    <span class="hljs-comment">// 保存秒杀信息</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeckillVoucher</span>();<br>    seckillVoucher.setVoucherId(voucher.getId());<br>    seckillVoucher.setStock(voucher.getStock());<br>    seckillVoucher.setBeginTime(voucher.getBeginTime());<br>    seckillVoucher.setEndTime(voucher.getEndTime());<br>    seckillVoucherService.save(seckillVoucher);<br>    <span class="hljs-comment">// 保存秒杀库存到Redis中</span><br>    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-实现秒杀下单"><a href="#3-4-实现秒杀下单" class="headerlink" title="3.4 实现秒杀下单"></a>3.4 实现秒杀下单</h3><p>下单核心思路：当我们点击抢购时，会触发右侧的请求，我们只需要编写对应的controller即可</p><p><img src="/20221205120000/1653365839526.png" alt="1653365839526"></p><p>秒杀下单应该思考的内容：</p><p>下单时需要判断两点：</p><ul><li>秒杀是否开始或结束，如果尚未开始或已经结束则无法下单</li><li>库存是否充足，不足则无法下单</li></ul><p>下单核心逻辑分析：</p><p>当用户开始进行下单，我们应当去查询优惠券信息，查询到优惠券信息，判断是否满足秒杀条件</p><p>比如时间是否充足，如果时间充足，则进一步判断库存是否足够，如果两者都满足，则扣减库存，创建订单，然后返回订单id，如果有一个条件不满足则直接结束。</p><p><img src="/20221205120000/1653366238564.png" alt="1653366238564"></p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询优惠券</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">// 2.判断秒杀是否开始</span><br>    <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.判断秒杀是否已经结束</span><br>    <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 4.判断库存是否充足</span><br>    <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 库存不足</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//5，扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>            .setSql(<span class="hljs-string">&quot;stock= stock -1&quot;</span>)<br>            .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).update();<br>    <span class="hljs-keyword">if</span> (!success) &#123;<br>        <span class="hljs-comment">//扣减库存</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//6.创建订单</span><br>    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>    <span class="hljs-comment">// 6.1.订单id</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    voucherOrder.setId(orderId);<br>    <span class="hljs-comment">// 6.2.用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    voucherOrder.setUserId(userId);<br>    <span class="hljs-comment">// 6.3.代金券id</span><br>    voucherOrder.setVoucherId(voucherId);<br>    save(voucherOrder);<br><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-库存超卖问题分析"><a href="#3-5-库存超卖问题分析" class="headerlink" title="3.5 库存超卖问题分析"></a>3.5 库存超卖问题分析</h3><p>有关超卖问题分析：在我们原有代码中是这么写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>       <span class="hljs-comment">// 库存不足</span><br>       <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>   &#125;<br>   <span class="hljs-comment">//5，扣减库存</span><br>   <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>           .setSql(<span class="hljs-string">&quot;stock= stock -1&quot;</span>)<br>           .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).update();<br>   <span class="hljs-keyword">if</span> (!success) &#123;<br>       <span class="hljs-comment">//扣减库存</span><br>       <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><p>假设线程1过来查询库存，判断出来库存大于1，正准备去扣减库存，但是还没有来得及去扣减，此时线程2过来，线程2也去查询库存，发现这个数量一定也大于1，那么这两个线程都会去扣减库存，最终多个线程相当于一起去扣减库存，此时就会出现库存的超卖问题。</p><p><img src="/20221205120000/1653368335155.png" alt="1653368335155"></p><p>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：而对于加锁，我们通常有两种解决方案：见下图：</p><p><img src="/20221205120000/1653368562591.png" alt="1653368562591"></p><p><strong>悲观锁：</strong></p><p> 悲观锁可以实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等</p><p><strong>乐观锁：</strong></p><p>  乐观锁：会有一个版本号，每次操作数据会对版本号+1，再提交回数据时，会去校验是否比之前的版本大1 ，如果大1 ，则进行操作成功，这套机制的核心逻辑在于，如果在操作过程中，版本号只比原来大1 ，那么就意味着操作过程中没有人对他进行过修改，他的操作就是安全的，如果不大1，则数据被修改过，当然乐观锁还有一些变种的处理方式比如<code>cas</code></p><p>  乐观锁的典型代表：就是cas，利用cas进行无锁化机制加锁，var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 &#x3D;&#x3D; 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值</p><p>  其中do while 是为了在操作失败时，再次进行自旋操作，即把之前的逻辑再操作一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> var5;<br><span class="hljs-keyword">do</span> &#123;<br>    var5 = <span class="hljs-built_in">this</span>.getIntVolatile(var1, var2);<br>&#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));<br><br><span class="hljs-keyword">return</span> var5;<br></code></pre></td></tr></table></figure><p><strong>课程中的使用方式：</strong></p><p>课程中的使用方式是没有像<code>cas</code>一样带自旋的操作，也没有对version的版本号+1 ，他的操作逻辑是在操作时，对版本号进行+1 操作，然后要求version 如果是1 的情况下，才能操作，那么第一个线程在操作后，数据库中的version变成了2，但是他自己满足version&#x3D;1 ，所以没有问题，此时线程2执行，线程2 最后也需要加上条件version &#x3D;1 ，但是现在由于线程1已经操作过了，所以线程2，操作时就不满足version&#x3D;1 的条件了，所以线程2无法执行成功</p><p><img src="/20221205120000/1653369268550.png" alt="1653369268550"></p><h3 id="3-6-乐观锁解决超卖问题"><a href="#3-6-乐观锁解决超卖问题" class="headerlink" title="3.6 乐观锁解决超卖问题"></a>3.6 乐观锁解决超卖问题</h3><p><strong>修改代码方案一、</strong></p><p>VoucherOrderServiceImpl 在扣减库存时，改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>            .setSql(<span class="hljs-string">&quot;stock= stock -1&quot;</span>) <span class="hljs-comment">//set stock = stock -1</span><br>            .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="hljs-string">&quot;stock&quot;</span>,voucher.getStock()).update(); <span class="hljs-comment">//where id = ？ and stock = ?</span><br></code></pre></td></tr></table></figure><p>以上逻辑的核心含义是：只要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败</p><p><strong>修改代码方案二、</strong></p><p>之前的方式要修改前后都保持一致，但是这样我们分析过，成功的概率太低，所以我们的乐观锁需要变一下，改成stock大于0 即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>            .setSql(<span class="hljs-string">&quot;stock= stock -1&quot;</span>)<br>            .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).update().gt(<span class="hljs-string">&quot;stock&quot;</span>,<span class="hljs-number">0</span>); <span class="hljs-comment">//where id = ? and stock &gt; 0</span><br></code></pre></td></tr></table></figure><p><strong>知识小扩展：</strong></p><p>针对cas中的自旋压力过大，我们可以使用Longadder这个类去解决</p><p>Java8 提供的一个对AtomicLong改进后的一个类，LongAdder</p><p>大量线程并发更新一个原子性的时候，天然的问题就是自旋，会导致并发性问题，当然这也比我们直接使用syn来的好</p><p>所以利用这么一个类，LongAdder来进行优化</p><p>如果获取某个值，则会对cell和base的值进行递增，最后返回一个完整的值</p><p><img src="/20221205120000/1653370271627.png" alt="1653370271627"></p><h3 id="3-6-优惠券秒杀-一人一单"><a href="#3-6-优惠券秒杀-一人一单" class="headerlink" title="3.6 优惠券秒杀-一人一单"></a>3.6 优惠券秒杀-一人一单</h3><p>需求：修改秒杀业务，要求同一个优惠券，一个用户只能下一单</p><p><strong>现在的问题在于：</strong></p><p>优惠券是为了引流，但是目前的情况是，一个人可以无限制的抢这个优惠券，所以我们应当增加一层逻辑，让一个用户只能下一个单，而不是让一个用户下多个单</p><p>具体操作逻辑如下：比如时间是否充足，如果时间充足，则进一步判断库存是否足够，然后再根据优惠券id和用户id查询是否已经下过这个订单，如果下过这个订单，则不再下单，否则进行下单</p><p><img src="/20221205120000/1653371854389.png" alt="1653371854389"></p><p>VoucherOrderServiceImpl  </p><p><strong>初步代码：增加一人一单逻辑</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">// 1.查询优惠券</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>    <span class="hljs-comment">// 2.判断秒杀是否开始</span><br>    <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.判断秒杀是否已经结束</span><br>    <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>        <span class="hljs-comment">// 尚未开始</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 4.判断库存是否充足</span><br>    <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 库存不足</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 5.一人一单逻辑</span><br>    <span class="hljs-comment">// 5.1.用户id</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>    <span class="hljs-comment">// 5.2.判断是否存在</span><br>    <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 用户已经购买过了</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;用户已经购买过一次！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//6，扣减库存</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>            .setSql(<span class="hljs-string">&quot;stock= stock -1&quot;</span>)<br>            .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).update();<br>    <span class="hljs-keyword">if</span> (!success) &#123;<br>        <span class="hljs-comment">//扣减库存</span><br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//7.创建订单</span><br>    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>    <span class="hljs-comment">// 7.1.订单id</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    voucherOrder.setId(orderId);<br><br>    voucherOrder.setUserId(userId);<br>    <span class="hljs-comment">// 7.3.代金券id</span><br>    voucherOrder.setVoucherId(voucherId);<br>    save(voucherOrder);<br><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>存在问题：</strong>现在的问题还是和之前一样，并发过来，查询数据库，都不存在订单，所以我们还是需要加锁，但是乐观锁比较适合更新数据，而现在是插入数据，所以我们需要使用悲观锁操作</p><p><strong>注意：</strong>在这里提到了非常多的问题，我们需要慢慢的来思考，首先我们的初始方案是封装了一个createVoucherOrder方法，同时为了确保他线程安全，在方法上添加了一把synchronized 锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span> &#123;<br><br><span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>         <span class="hljs-comment">// 5.1.查询订单</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>        <span class="hljs-comment">// 5.2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 用户已经购买过了</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;用户已经购买过一次！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 6.扣减库存</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>                .update();<br>        <span class="hljs-keyword">if</span> (!success) &#123;<br>            <span class="hljs-comment">// 扣减失败</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 7.创建订单</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>        <span class="hljs-comment">// 7.1.订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        voucherOrder.setId(orderId);<br>        <span class="hljs-comment">// 7.2.用户id</span><br>        voucherOrder.setUserId(userId);<br>        <span class="hljs-comment">// 7.3.代金券id</span><br>        voucherOrder.setVoucherId(voucherId);<br>        save(voucherOrder);<br><br>        <span class="hljs-comment">// 7.返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><p>，但是这样添加锁，锁的粒度太粗了，在使用锁过程中，控制<strong>锁粒度</strong> 是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会锁住，所以我们需要去控制锁的粒度，以下这段代码需要修改为：<br>intern() 这个方法是从常量池中拿到数据，如果我们直接使用userId.toString() 他拿到的对象实际上是不同的对象，new出来的对象，我们使用锁必须保证锁必须是同一把，所以我们需要使用intern()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span>  Result <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(Long voucherId)</span> &#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br><span class="hljs-keyword">synchronized</span>(userId.toString().intern())&#123;<br>         <span class="hljs-comment">// 5.1.查询订单</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).count();<br>        <span class="hljs-comment">// 5.2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 用户已经购买过了</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;用户已经购买过一次！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 6.扣减库存</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>                .update();<br>        <span class="hljs-keyword">if</span> (!success) &#123;<br>            <span class="hljs-comment">// 扣减失败</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 7.创建订单</span><br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>        <span class="hljs-comment">// 7.1.订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        voucherOrder.setId(orderId);<br>        <span class="hljs-comment">// 7.2.用户id</span><br>        voucherOrder.setUserId(userId);<br>        <span class="hljs-comment">// 7.3.代金券id</span><br>        voucherOrder.setVoucherId(voucherId);<br>        save(voucherOrder);<br><br>        <span class="hljs-comment">// 7.返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是以上代码还是存在问题，问题的原因在于当前方法被spring的事务控制，如果你在方法内部加锁，可能会导致当前方法事务还没有提交，但是锁已经释放也会导致问题，所以我们选择将当前方法整体包裹起来，确保事务不会出现问题：如下：</p><p>在seckillVoucher 方法中，添加以下逻辑，这样就能保证事务的特性，同时也控制了锁的粒度</p><p><img src="/20221205120000/1653373434815.png" alt="1653373434815"></p><p>但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务</p><p><img src="/20221205120000/1653383810643.png" alt="1653383810643"></p><h3 id="3-7-集群环境下的并发问题"><a href="#3-7-集群环境下的并发问题" class="headerlink" title="3.7 集群环境下的并发问题"></a>3.7 集群环境下的并发问题</h3><p>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了。</p><p>1、我们将服务启动两份，端口分别为8081和8082：</p><p><img src="/20221205120000/1653373887844.png" alt="1653373887844"></p><p>2、然后修改nginx的conf目录下的nginx.conf文件，配置反向代理和负载均衡：</p><p><img src="/20221205120000/1653373908620.png" alt="1653373908620"></p><p><strong>具体操作(略)</strong></p><p><strong>有关锁失效原因分析</strong></p><p>由于现在我们部署了多个tomcat，每个tomcat都有一个属于自己的jvm，那么假设在服务器A的tomcat内部，有两个线程，这两个线程由于使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的，但是如果现在是服务器B的tomcat内部，又有两个线程，但是他们的锁对象写的虽然和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2实现互斥，这就是 集群环境下，syn锁失效的原因，在这种情况下，我们就需要使用分布式锁来解决这个问题。</p><p><img src="/20221205120000/1653374044740.png" alt="1653374044740"></p><h2 id="4、分布式锁"><a href="#4、分布式锁" class="headerlink" title="4、分布式锁"></a>4、分布式锁</h2><h3 id="4-1-、基本原理和实现方式对比"><a href="#4-1-、基本原理和实现方式对比" class="headerlink" title="4.1 、基本原理和实现方式对比"></a>4.1 、基本原理和实现方式对比</h3><p>分布式锁：满足分布式系统或集群模式下多进程可见并且互斥的锁。</p><p>分布式锁的核心思想就是让大家都使用同一把锁，只要大家使用的是同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路</p><p><img src="/20221205120000/1653374296906.png" alt="1653374296906"></p><p>那么分布式锁他应该满足一些什么样的条件呢？</p><p>可见性：多个线程都能看到相同的结果，注意：这个地方说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思</p><p>互斥：互斥是分布式锁的最基本的条件，使得程序串行执行</p><p>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</p><p>高性能：由于加锁本身就让性能降低，所有对于分布式锁本身需要他就较高的加锁性能和释放锁性能</p><p>安全性：安全也是程序中必不可少的一环</p><p><img src="/20221205120000/1653381992018.png" alt="1653381992018"></p><p>常见的分布式锁有三种</p><p>Mysql：mysql本身就带有锁机制，但是由于mysql性能本身一般，所以采用分布式锁的情况下，其实使用mysql作为分布式锁比较少见</p><p>Redis：redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都使用redis或者zookeeper作为分布式锁，利用setnx这个方法，如果插入key成功，则表示获得到了锁，如果有人插入成功，其他人插入失败则表示无法获得到锁，利用这套逻辑来实现分布式锁</p><p>Zookeeper：zookeeper也是企业级开发中较好的一个实现分布式锁的方案，由于本套视频并不讲解zookeeper的原理和分布式锁的实现，所以不过多阐述</p><p><img src="/20221205120000/1653382219377.png" alt="1653382219377"></p><h3 id="4-2-、Redis分布式锁的实现核心思路"><a href="#4-2-、Redis分布式锁的实现核心思路" class="headerlink" title="4.2 、Redis分布式锁的实现核心思路"></a>4.2 、Redis分布式锁的实现核心思路</h3><p>实现分布式锁时需要实现的两个基本方法：</p><ul><li><p>获取锁：</p><ul><li><p>互斥：确保只能有一个线程获取锁</p></li><li><p>非阻塞：尝试一次，成功返回true，失败返回false</p><p><img src="/20221205120000/image-20221215160312117.png" alt="image-20221215160312117"></p></li></ul></li><li><p>释放锁：</p><ul><li>手动释放</li><li>超时释放：获取锁时添加一个超时时间</li></ul><p><img src="/20221205120000/1653382669900.png" alt="1653382669900"></p></li></ul><p>核心思路：</p><p>我们利用redis 的setNx 方法，当有多个线程进入时，我们就利用该方法，第一个线程进入时，redis 中就有这个key 了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁的哥们，等待一定时间后重试即可</p><p> <img src="/20221205120000/1653382830810.png" alt="1653382830810"></p><h3 id="4-3-实现分布式锁版本一"><a href="#4-3-实现分布式锁版本一" class="headerlink" title="4.3 实现分布式锁版本一"></a>4.3 实现分布式锁版本一</h3><ul><li>加锁逻辑</li></ul><p><strong>锁的基本接口</strong></p><p><img src="/20221205120000/1656079017728.png" alt="1656079017728"></p><p><strong>SimpleRedisLock</strong></p><p>利用setnx方法进行加锁，同时增加过期时间，防止死锁，此方法可以保证加锁和增加过期时间具有原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_PREFIX=<span class="hljs-string">&quot;lock:&quot;</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>    <span class="hljs-comment">// 获取线程标示</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId()<br>    <span class="hljs-comment">// 获取锁</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>            .setIfAbsent(KEY_PREFIX + name, threadId + <span class="hljs-string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);<br>    <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>释放锁逻辑</li></ul><p>SimpleRedisLock</p><p>释放锁，防止删除别人的锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//通过del删除锁</span><br>    stringRedisTemplate.delete(KEY_PREFIX + name);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>修改业务代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>      <span class="hljs-comment">// 1.查询优惠券</span><br>      <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>      <span class="hljs-comment">// 2.判断秒杀是否开始</span><br>      <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>          <span class="hljs-comment">// 尚未开始</span><br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">// 3.判断秒杀是否已经结束</span><br>      <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>          <span class="hljs-comment">// 尚未开始</span><br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>      &#125;<br>      <span class="hljs-comment">// 4.判断库存是否充足</span><br>      <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-comment">// 库存不足</span><br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>      &#125;<br>      <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>      <span class="hljs-comment">//创建锁对象(新增代码)</span><br>      <span class="hljs-type">SimpleRedisLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleRedisLock</span>(<span class="hljs-string">&quot;order:&quot;</span> + userId, stringRedisTemplate);<br>      <span class="hljs-comment">//获取锁对象</span><br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1200</span>);<br><span class="hljs-comment">//加锁失败</span><br>      <span class="hljs-keyword">if</span> (!isLock) &#123;<br>          <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>      &#125;<br>      <span class="hljs-keyword">try</span> &#123;<br>          <span class="hljs-comment">//获取代理对象(事务)</span><br>          <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>          <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>      &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-comment">//释放锁</span><br>          lock.unlock();<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-Redis分布式锁误删情况说明"><a href="#4-4-Redis分布式锁误删情况说明" class="headerlink" title="4.4 Redis分布式锁误删情况说明"></a>4.4 Redis分布式锁误删情况说明</h3><p>逻辑说明：</p><p>持有锁的线程在锁的内部出现了阻塞，导致他的锁自动释放，这时其他线程，线程2来尝试获得锁，就拿到了这把锁，然后线程2在持有锁执行过程中，线程1反应过来，继续执行，而线程1执行过程中，走到了删除锁逻辑，此时就会把本应该属于线程2的锁进行删除，这就是误删别人锁的情况说明</p><p>解决方案：解决方案就是在每个线程释放锁的时候，去判断一下当前这把锁是否属于自己，如果属于自己，则不进行锁的删除，假设还是上边的情况，线程1卡顿，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1反应过来，然后删除锁，但是线程1，一看当前这把锁不是属于自己，于是不进行删除锁逻辑，当线程2走到删除锁逻辑时，如果没有卡过自动释放锁的时间点，则判断当前这把锁是属于自己的，于是删除这把锁。</p><p><img src="/20221205120000/1653385920025.png" alt="1653385920025"></p><h3 id="4-5-解决Redis分布式锁误删问题"><a href="#4-5-解决Redis分布式锁误删问题" class="headerlink" title="4.5 解决Redis分布式锁误删问题"></a>4.5 解决Redis分布式锁误删问题</h3><p>需求：修改之前的分布式锁实现，满足：在获取锁时存入线程标示（可以用UUID表示）<br>在释放锁时先获取锁中的线程标示，判断是否与当前线程标示一致</p><ul><li>如果一致则释放锁</li><li>如果不一致则不释放锁</li></ul><p>核心逻辑：在存入锁时，放入自己线程的标识，在删除锁时，判断当前这把锁的标识是不是自己存入的，如果是，则进行删除，如果不是，则不进行删除。</p><p><img src="/20221205120000/1653387398820.png" alt="1653387398820"></p><p>具体代码如下：加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ID_PREFIX</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString(<span class="hljs-literal">true</span>) + <span class="hljs-string">&quot;-&quot;</span>;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutSec)</span> &#123;<br>   <span class="hljs-comment">// 获取线程标示</span><br>   <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>   <span class="hljs-comment">// 获取锁</span><br>   <span class="hljs-type">Boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue()<br>                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);<br>   <span class="hljs-keyword">return</span> Boolean.TRUE.equals(success);<br>&#125;<br></code></pre></td></tr></table></figure><p>释放锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 获取线程标示</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ID_PREFIX + Thread.currentThread().getId();<br>    <span class="hljs-comment">// 获取锁中的标示</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);<br>    <span class="hljs-comment">// 判断标示是否一致</span><br>    <span class="hljs-keyword">if</span>(threadId.equals(id)) &#123;<br>        <span class="hljs-comment">// 释放锁</span><br>        stringRedisTemplate.delete(KEY_PREFIX + name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>有关代码实操说明：</strong></p><p>在我们修改完此处代码后，我们重启工程，然后启动两个线程，第一个线程持有锁后，手动释放锁，第二个线程 此时进入到锁内部，再放行第一个线程，此时第一个线程由于锁的value值并非是自己，所以不能释放锁，也就无法删除别人的锁，此时第二个线程能够正确释放锁，通过这个案例初步说明我们解决了锁误删的问题。</p><h3 id="4-6-分布式锁的原子性问题"><a href="#4-6-分布式锁的原子性问题" class="headerlink" title="4.6 分布式锁的原子性问题"></a>4.6 分布式锁的原子性问题</h3><p>更为极端的误删逻辑说明：</p><p>线程1现在持有锁之后，在执行业务逻辑过程中，他正准备删除锁，而且已经走到了条件判断的过程中，比如他已经拿到了当前这把锁确实是属于他自己的，正准备删除锁，但是此时他的锁到期了，那么此时线程2进来，但是线程1他会接着往后执行，当他卡顿结束后，他直接就会执行删除锁那行代码，相当于条件判断并没有起到作用，这就是删锁时的原子性问题，之所以有这个问题，是因为线程1的拿锁，比锁，删锁，实际上并不是原子性的，我们要防止刚才的情况发生，</p><p><img src="/20221205120000/1653387764938.png" alt="1653387764938"></p><h3 id="4-7-Lua脚本解决多条命令原子性问题"><a href="#4-7-Lua脚本解决多条命令原子性问题" class="headerlink" title="4.7 Lua脚本解决多条命令原子性问题"></a>4.7 Lua脚本解决多条命令原子性问题</h3><p>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。Lua是一种编程语言，它的基本语法大家可以参考网站：<a href="https://www.runoob.com/lua/lua-tutorial.html%EF%BC%8C%E8%BF%99%E9%87%8C%E9%87%8D%E7%82%B9%E4%BB%8B%E7%BB%8DRedis%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8lua%E5%8E%BB%E6%93%8D%E4%BD%9Credis%EF%BC%8C%E5%8F%88%E8%83%BD%E4%BF%9D%E8%AF%81%E4%BB%96%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E6%8B%BF%E9%94%81%E6%AF%94%E9%94%81%E5%88%A0%E9%94%81%E6%98%AF%E4%B8%80%E4%B8%AA%E5%8E%9F%E5%AD%90%E6%80%A7%E5%8A%A8%E4%BD%9C%E4%BA%86%EF%BC%8C%E4%BD%9C%E4%B8%BAJava%E7%A8%8B%E5%BA%8F%E5%91%98%E8%BF%99%E4%B8%80%E5%9D%97%E5%B9%B6%E4%B8%8D%E4%BD%9C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A6%81%E6%B1%82%EF%BC%8C%E5%B9%B6%E4%B8%8D%E9%9C%80%E8%A6%81%E5%A4%A7%E5%AE%B6%E8%BF%87%E4%BA%8E%E7%B2%BE%E9%80%9A%EF%BC%8C%E5%8F%AA%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E4%BB%96%E6%9C%89%E4%BB%80%E4%B9%88%E4%BD%9C%E7%94%A8%E5%8D%B3%E5%8F%AF%E3%80%82">https://www.runoob.com/lua/lua-tutorial.html，这里重点介绍Redis提供的调用函数，我们可以使用lua去操作redis，又能保证他的原子性，这样就可以实现拿锁比锁删锁是一个原子性动作了，作为Java程序员这一块并不作一个简单要求，并不需要大家过于精通，只需要知道他有什么作用即可。</a></p><p>这里重点介绍Redis提供的调用函数，语法如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">redis.call(<span class="hljs-string">&#x27;命令名称&#x27;</span>, <span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;其它参数&#x27;</span>, ...)<br></code></pre></td></tr></table></figure><p>例如，我们要执行set name jack，则脚本是这样：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lua"># 执行 set name jack<br>redis.call(<span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;jack&#x27;</span>)<br></code></pre></td></tr></table></figure><p>例如，我们要先执行set name Rose，再执行get name，则脚本如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua"># 先执行 set name jack<br>redis.call(<span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;Rose&#x27;</span>)<br># 再执行 get name<br><span class="hljs-keyword">local</span> name = redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>)<br># 返回<br><span class="hljs-keyword">return</span> name<br></code></pre></td></tr></table></figure><p>写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下：</p><p><img src="/20221205120000/1653392181413.png" alt="1653392181413"></p><p>例如，我们要执行 redis.call(‘set’, ‘name’, ‘jack’) 这个脚本，语法如下：</p><p><img src="/20221205120000/1653392218531.png" alt="1653392218531"></p><p>如果脚本中的key、value不想写死，可以作为参数传递。key类型参数会放入KEYS数组，其它参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组获取这些参数：</p><p><img src="/20221205120000/1653392438917.png" alt="1653392438917"></p><p>接下来我们来回一下我们释放锁的逻辑：</p><p>释放锁的业务流程是这样的</p><p>​1、获取锁中的线程标示</p><p>​2、判断是否与指定的标示（当前线程标示）一致</p><p>​3、如果一致则释放锁（删除）</p><p>​4、如果不一致则什么都不做</p><p>如果用Lua脚本来表示则是这样的：</p><p>最终我们操作redis的拿锁比锁删锁的lua脚本就会变成这样</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 这里的 KEYS[1] 就是锁的key，这里的ARGV[1] 就是当前线程标示</span><br><span class="hljs-comment">-- 获取锁中的标示，判断是否与当前线程标示一致</span><br><span class="hljs-keyword">if</span> (redis.call(<span class="hljs-string">&#x27;GET&#x27;</span>, KEYS[<span class="hljs-number">1</span>]) == ARGV[<span class="hljs-number">1</span>]) <span class="hljs-keyword">then</span><br>  <span class="hljs-comment">-- 一致，则删除锁</span><br>  <span class="hljs-keyword">return</span> redis.call(<span class="hljs-string">&#x27;DEL&#x27;</span>, KEYS[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 不一致，则直接返回</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="4-8-利用Java代码调用Lua脚本改造分布式锁"><a href="#4-8-利用Java代码调用Lua脚本改造分布式锁" class="headerlink" title="4.8 利用Java代码调用Lua脚本改造分布式锁"></a>4.8 利用Java代码调用Lua脚本改造分布式锁</h3><p>lua脚本本身并不需要大家花费太多时间去研究，只需要知道如何调用，大致是什么意思即可，所以在笔记中并不会详细的去解释这些lua表达式的含义。</p><p>我们的RedisTemplate中，可以利用execute方法去执行lua脚本，参数对应关系就如下图股</p><p><img src="/20221205120000/1653393304844.png" alt="1653393304844"></p><p><strong>Java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;<br>    <span class="hljs-keyword">static</span> &#123;<br>        UNLOCK_SCRIPT = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultRedisScript</span>&lt;&gt;();<br>        UNLOCK_SCRIPT.setLocation(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathResource</span>(<span class="hljs-string">&quot;unlock.lua&quot;</span>));<br>        UNLOCK_SCRIPT.setResultType(Long.class);<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 调用lua脚本</span><br>    stringRedisTemplate.execute(<br>            UNLOCK_SCRIPT,<br>            Collections.singletonList(KEY_PREFIX + name),<br>            ID_PREFIX + Thread.currentThread().getId());<br>&#125;<br>经过以上代码改造后，我们就能够实现 拿锁比锁删锁的原子性动作了~<br></code></pre></td></tr></table></figure><p>小总结：</p><p>基于Redis的分布式锁实现思路：</p><ul><li>利用set nx ex获取锁，并设置过期时间，保存线程标示</li><li>释放锁时先判断线程标示是否与自己一致，一致则删除锁<ul><li>特性：<ul><li>利用set nx满足互斥性</li><li>利用set ex保证故障时锁依然能释放，避免死锁，提高安全性</li><li>利用Redis集群保证高可用和高并发特性</li></ul></li></ul></li></ul><p>笔者总结：我们一路走来，利用添加过期时间，防止死锁问题的发生，但是有了过期时间之后，可能出现误删别人锁的问题，这个问题我们开始是利用删之前 通过拿锁，比锁，删锁这个逻辑来解决的，也就是删之前判断一下当前这把锁是否是属于自己的，但是现在还有原子性问题，也就是我们没法保证拿锁比锁删锁是一个原子性的动作，最后通过lua表达式来解决这个问题</p><p>但是目前还剩下一个问题锁不住，什么是锁不住呢，你想一想，如果当过期时间到了之后，我们可以给他续期一下，比如续个30s，就好像是网吧上网， 网费到了之后，然后说，来，网管，再给我来10块的，是不是后边的问题都不会发生了，那么续期问题怎么解决呢，可以依赖于我们接下来要学习redission啦</p><p><strong>测试逻辑：</strong></p><p>第一个线程进来，得到了锁，手动删除锁，模拟锁超时了，其他线程会执行lua来抢锁，当第一天线程利用lua删除锁时，lua能保证他不能删除他的锁，第二个线程删除锁时，利用lua同样可以保证不会删除别人的锁，同时还能保证原子性。</p><h2 id="5、分布式锁-redission"><a href="#5、分布式锁-redission" class="headerlink" title="5、分布式锁-redission"></a>5、分布式锁-redission</h2><h3 id="5-1-分布式锁-redission功能介绍"><a href="#5-1-分布式锁-redission功能介绍" class="headerlink" title="5.1 分布式锁-redission功能介绍"></a>5.1 分布式锁-redission功能介绍</h3><p>基于setnx实现的分布式锁存在下面的问题：</p><p><strong>重入问题</strong>：重入问题是指 获得锁的线程可以再次进入到相同的锁的代码块中，可重入锁的意义在于防止死锁，比如HashTable这样的代码中，他的方法都是使用synchronized修饰的，假如他在一个方法内，调用另一个方法，那么此时如果是不可重入的，不就死锁了吗？所以可重入锁他的主要意义是防止死锁，我们的synchronized和Lock锁都是可重入的。</p><p><strong>不可重试</strong>：是指目前的分布式只能尝试一次，我们认为合理的情况是：当线程在获得锁失败后，他应该能再次尝试获得锁。</p><p><strong>超时释放：</strong>我们在加锁时增加了过期时间，这样的我们可以防止死锁，但是如果卡顿的时间超长，虽然我们采用了lua表达式防止删锁的时候，误删别人的锁，但是毕竟没有锁住，有安全隐患</p><p><strong>主从一致性：</strong> 如果Redis提供了主从集群，当我们向集群写数据时，主机需要异步的将数据同步给从机，而万一在同步过去之前，主机宕机了，就会出现死锁问题。</p><p><img src="/20221205120000/1653546070602.png" alt="1653546070602"></p><p>那么什么是Redission呢</p><p>Redisson是一个在Redis的基础上实现的Java驻内存数据网格（In-Memory Data Grid）。它不仅提供了一系列的分布式的Java常用对象，还提供了许多分布式服务，其中就包含了各种分布式锁的实现。</p><p>Redission提供了分布式锁的多种多样的功能</p><p><img src="/20221205120000/1653546736063.png" alt="1653546736063"></p><h3 id="5-2-分布式锁-Redission快速入门"><a href="#5-2-分布式锁-Redission快速入门" class="headerlink" title="5.2 分布式锁-Redission快速入门"></a>5.2 分布式锁-Redission快速入门</h3><p>引入依赖：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>&lt;groupId&gt;org.redisson&lt;/groupId&gt;<br>&lt;artifactId&gt;redisson&lt;/artifactId&gt;<br>&lt;version&gt;<span class="hljs-number">3.13</span><span class="hljs-number">.6</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>配置Redisson客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedissonConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedissonClient <span class="hljs-title function_">redissonClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 配置</span><br>        <span class="hljs-type">Config</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Config</span>();<br>        config.useSingleServer().setAddress(<span class="hljs-string">&quot;redis://192.168.150.101:6379&quot;</span>)<br>            .setPassword(<span class="hljs-string">&quot;123321&quot;</span>);<br>        <span class="hljs-comment">// 创建RedissonClient对象</span><br>        <span class="hljs-keyword">return</span> Redisson.create(config);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如何使用Redission的分布式锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissionClient redissonClient;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedisson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">//获取锁(可重入)，指定锁的名称</span><br>    <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;anyLock&quot;</span>);<br>    <span class="hljs-comment">//尝试获取锁，参数分别是：获取锁的最大等待时间(期间会重试)，锁自动释放时间，时间单位</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>,TimeUnit.SECONDS);<br>    <span class="hljs-comment">//判断获取锁成功</span><br>    <span class="hljs-keyword">if</span>(isLock)&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;执行业务&quot;</span>);          <br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 VoucherOrderServiceImpl</p><p>注入RedissonClient</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span><br><span class="hljs-keyword">private</span> RedissonClient redissonClient;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-comment">// 1.查询优惠券</span><br>        <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">voucher</span> <span class="hljs-operator">=</span> seckillVoucherService.getById(voucherId);<br>        <span class="hljs-comment">// 2.判断秒杀是否开始</span><br>        <span class="hljs-keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀尚未开始！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 3.判断秒杀是否已经结束</span><br>        <span class="hljs-keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;<br>            <span class="hljs-comment">// 尚未开始</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;秒杀已经结束！&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 4.判断库存是否充足</span><br>        <span class="hljs-keyword">if</span> (voucher.getStock() &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">// 库存不足</span><br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;库存不足！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">//创建锁对象 这个代码不用了，因为我们现在要使用分布式锁</span><br>        <span class="hljs-comment">//SimpleRedisLock lock = new SimpleRedisLock(&quot;order:&quot; + userId, stringRedisTemplate);</span><br>        <span class="hljs-type">RLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>        <span class="hljs-comment">//获取锁对象</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> lock.tryLock();<br>       <br><span class="hljs-comment">//加锁失败</span><br>        <span class="hljs-keyword">if</span> (!isLock) &#123;<br>            <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;不允许重复下单&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//获取代理对象(事务)</span><br>            <span class="hljs-type">IVoucherOrderService</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> (IVoucherOrderService) AopContext.currentProxy();<br>            <span class="hljs-keyword">return</span> proxy.createVoucherOrder(voucherId);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//释放锁</span><br>            lock.unlock();<br>        &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-分布式锁-redission可重入锁原理"><a href="#5-3-分布式锁-redission可重入锁原理" class="headerlink" title="5.3 分布式锁-redission可重入锁原理"></a>5.3 分布式锁-redission可重入锁原理</h3><p>在Lock锁中，他是借助于底层的一个voaltile的一个state变量来记录重入的状态的，比如当前没有人持有这把锁，那么state&#x3D;0，假如有人持有这把锁，那么state&#x3D;1，如果持有这把锁的人再次持有这把锁，那么state就会+1 ，如果是对于synchronized而言，他在c语言代码中会有一个count，原理和state类似，也是重入一次就加一，释放一次就-1 ，直到减少成0 时，表示当前这把锁没有被人持有。  </p><p>在redission中，我们的也支持支持可重入锁</p><p>在分布式锁中，他采用hash结构用来存储锁，其中大key表示表示这把锁是否存在，用小key表示当前这把锁被哪个线程持有，所以接下来我们一起分析一下当前的这个lua表达式</p><p>这个地方一共有3个参数</p><p><strong>KEYS[1] ： 锁名称</strong></p><p><strong>ARGV[1]：  锁失效时间</strong></p><p><strong>ARGV[2]：  id + “:” + threadId; 锁的小key</strong></p><p>exists: 判断数据是否存在  name：是lock是否存在,如果&#x3D;&#x3D;0，就表示当前这把锁不存在</p><p>redis.call(‘hset’, KEYS[1], ARGV[2], 1);此时他就开始往redis里边去写数据 ，写成一个hash结构</p><p>Lock{</p><p>​    id + <strong>“:”</strong> + threadId :  1</p><p>}</p><p>如果当前这把锁存在，则第一个条件不满足，再判断</p><p>redis.call(‘hexists’, KEYS[1], ARGV[2]) &#x3D;&#x3D; 1</p><p>此时需要通过大key+小key判断当前这把锁是否是属于自己的，如果是自己的，则进行</p><p>redis.call(‘hincrby’, KEYS[1], ARGV[2], 1)</p><p>将当前这个锁的value进行+1 ，redis.call(‘pexpire’, KEYS[1], ARGV[1]); 然后再对其设置过期时间，如果以上两个条件都不满足，则表示当前这把锁抢锁失败，最后返回pttl，即为当前这把锁的失效时间</p><p>如果小伙帮们看了前边的源码， 你会发现他会去判断当前这个方法的返回值是否为null，如果是null，则对应则前两个if对应的条件，退出抢锁逻辑，如果返回的不是null，即走了第三个分支，在源码处会进行while(true)的自旋抢锁。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +<br>                  <span class="hljs-string">&quot;redis.call(&#x27;hset&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                  <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                  <span class="hljs-string">&quot;return nil; &quot;</span> +<br>              <span class="hljs-string">&quot;end; &quot;</span> +<br>              <span class="hljs-string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +<br>                  <span class="hljs-string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +<br>                  <span class="hljs-string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +<br>                  <span class="hljs-string">&quot;return nil; &quot;</span> +<br>              <span class="hljs-string">&quot;end; &quot;</span> +<br>              <span class="hljs-string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/20221205120000/1653548087334.png" alt="1653548087334"></p><h3 id="5-4-分布式锁-redission锁重试和WatchDog机制"><a href="#5-4-分布式锁-redission锁重试和WatchDog机制" class="headerlink" title="5.4 分布式锁-redission锁重试和WatchDog机制"></a>5.4 分布式锁-redission锁重试和WatchDog机制</h3><p><a href="https://www.bilibili.com/video/BV1cr4y1671t/?p=67&spm_id_from=pageDriver&vd_source=a07c282e889f7133403a50b521d35bc7">查看视频讲解。</a></p><p><img src="/20221205120000/image-20221216163521814.png" alt="Redisson分布式锁原理流程图"></p><p><img src="/20221205120000/image-20221216163803479.png" alt="Redisson分布式锁实现"></p><p><strong>说明</strong>：由于课程中已经说明了有关tryLock的源码解析以及其看门狗原理，所以笔者在这里给大家分析lock()方法的源码解析，希望大家在学习过程中，能够掌握更多的知识</p><p>抢锁过程中，获得当前线程，通过tryAcquire进行抢锁，该抢锁逻辑和之前逻辑相同</p><p>1、先判断当前这把锁是否存在，如果不存在，插入一把锁，返回null</p><p>2、判断当前这把锁是否是属于当前线程，如果是，则返回null</p><p>所以如果返回是null，则代表着当前这哥们已经抢锁完毕，或者可重入完毕，但是如果以上两个条件都不满足，则进入到第三个条件，返回的是锁的失效时间，同学们可以自行往下翻一点点，你能发现有个while( true) 再次进行tryAcquire进行抢锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> Thread.currentThread().getId();<br><span class="hljs-type">Long</span> <span class="hljs-variable">ttl</span> <span class="hljs-operator">=</span> tryAcquire(-<span class="hljs-number">1</span>, leaseTime, unit, threadId);<br><span class="hljs-comment">// lock acquired</span><br><span class="hljs-keyword">if</span> (ttl == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来会有一个条件分支，因为lock方法有重载方法，一个是带参数，一个是不带参数，如果带带参数传入的值是-1，如果传入参数，则leaseTime是他本身，所以如果传入了参数，此时leaseTime !&#x3D; -1 则会进去抢锁，抢锁的逻辑就是之前说的那三个逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (leaseTime != -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> tryLockInnerAsync(waitTime, leaseTime, unit, threadId, RedisCommands.EVAL_LONG);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是没有传入时间，则此时也会进行抢锁， 而且抢锁时间是默认看门狗时间（<code>leaseTime == -1</code>时看门狗才会启动） commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout()</p><p>ttlRemainingFuture.onComplete((ttlRemaining, e) 这句话相当于对以上抢锁进行了监听，也就是说当上边抢锁完毕后，此方法会被调用，具体调用的逻辑就是去后台开启一个线程，进行续约逻辑，也就是看门狗线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">RFuture&lt;Long&gt; ttlRemainingFuture = tryLockInnerAsync(waitTime,<br>                                        commandExecutor.getConnectionManager().getCfg().getLockWatchdogTimeout(),<br>                                        TimeUnit.MILLISECONDS, threadId, RedisCommands.EVAL_LONG);<br>ttlRemainingFuture.onComplete((ttlRemaining, e) -&gt; &#123;<br>    <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// lock acquired</span><br>    <span class="hljs-keyword">if</span> (ttlRemaining == <span class="hljs-literal">null</span>) &#123;<br>        scheduleExpirationRenewal(threadId);<br>    &#125;<br>&#125;);<br><span class="hljs-keyword">return</span> ttlRemainingFuture;<br></code></pre></td></tr></table></figure><p>此逻辑就是续约逻辑，注意看commandExecutor.getConnectionManager().newTimeout（） 此方法</p><p>Method(  <strong>new</strong> TimerTask() {},参数2 ，参数3  )</p><p>指的是：通过参数2，参数3 去描述什么时候去做参数1的事情，现在的情况是：10s之后去做参数一的事情</p><p>因为锁的失效时间是30s，当10s之后，此时这个timeTask 就触发了，他就去进行续约，把当前这把锁续约成30s，如果操作成功，那么此时就会递归调用自己，再重新设置一个timeTask()，于是再过10s后又再设置一个timerTask，完成不停的续约</p><p>那么大家可以想一想，假设我们的线程出现了宕机他还会续约吗？当然不会，因为没有人再去调用renewExpiration这个方法，所以等到时间之后自然就释放了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">renewExpiration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ExpirationEntry</span> <span class="hljs-variable">ee</span> <span class="hljs-operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());<br>    <span class="hljs-keyword">if</span> (ee == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">Timeout</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> commandExecutor.getConnectionManager().newTimeout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TimerTask</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">(Timeout timeout)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-type">ExpirationEntry</span> <span class="hljs-variable">ent</span> <span class="hljs-operator">=</span> EXPIRATION_RENEWAL_MAP.get(getEntryName());<br>            <span class="hljs-keyword">if</span> (ent == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-type">Long</span> <span class="hljs-variable">threadId</span> <span class="hljs-operator">=</span> ent.getFirstThreadId();<br>            <span class="hljs-keyword">if</span> (threadId == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <br>            RFuture&lt;Boolean&gt; future = renewExpirationAsync(threadId);<br>            future.onComplete((res, e) -&gt; &#123;<br>                <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) &#123;<br>                    log.error(<span class="hljs-string">&quot;Can&#x27;t update lock &quot;</span> + getName() + <span class="hljs-string">&quot; expiration&quot;</span>, e);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> (res) &#123;<br>                    <span class="hljs-comment">// reschedule itself</span><br>                    renewExpiration();<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;, internalLockLeaseTime / <span class="hljs-number">3</span>, TimeUnit.MILLISECONDS);<br>    <br>    ee.setTimeout(task);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-分布式锁-redission锁的MutiLock原理"><a href="#5-5-分布式锁-redission锁的MutiLock原理" class="headerlink" title="5.5 分布式锁-redission锁的MutiLock原理"></a>5.5 分布式锁-redission锁的MutiLock原理</h3><p><a href="https://www.bilibili.com/video/BV1cr4y1671t/?p=68&spm_id_from=pageDriver&vd_source=a07c282e889f7133403a50b521d35bc7">查看视频讲解。</a></p><p>为了提高redis的可用性，我们会搭建集群或者主从，现在以主从为例</p><p>此时我们去写命令，写在主机上， 主机会将数据同步给从机，但是假设在主机还没有来得及把数据写入到从机去的时候，此时主机宕机，哨兵会发现主机宕机，并且选举一个slave变成master，而此时新的master中实际上并没有锁信息，此时锁信息就已经丢掉了。</p><p><img src="/20221205120000/1653553998403.png" alt="1653553998403"></p><p>为了解决这个问题，redission提出来了MutiLock锁，使用这把锁咱们就不使用主从了，每个节点的地位都是一样的， 这把锁加锁的逻辑需要写入到每一个主丛节点上，只有所有的服务器都写入成功，此时才是加锁成功，假设现在某个节点挂了，那么他去获得锁的时候，只要有一个节点拿不到，都不能算是加锁成功，就保证了加锁的可靠性。</p><p><img src="/20221205120000/1653554055048.png" alt="1653554055048"></p><p>那么MutiLock 加锁原理是什么呢？笔者画了一幅图来说明</p><p>当我们去设置了多个锁时，redission会将多个锁添加到一个集合中，然后用while循环去不停去尝试拿锁，但是会有一个总共的加锁时间，这个时间是用需要加锁的个数 * 1500ms ，假设有3个锁，那么时间就是4500ms，假设在这4500ms内，所有的锁都加锁成功， 那么此时才算是加锁成功，如果在4500ms有线程加锁失败，则会再次去进行重试.</p><p><img src="/20221205120000/1653553093967.png" alt="1653553093967"></p><h2 id="6、秒杀优化"><a href="#6、秒杀优化" class="headerlink" title="6、秒杀优化"></a>6、秒杀优化</h2><h3 id="6-1-秒杀优化-异步秒杀思路"><a href="#6-1-秒杀优化-异步秒杀思路" class="headerlink" title="6.1 秒杀优化-异步秒杀思路"></a>6.1 秒杀优化-异步秒杀思路</h3><p>我们来回顾一下下单流程</p><p>当用户发起请求，此时会请求nginx，nginx会访问到tomcat，而tomcat中的程序，会进行串行操作，分成如下几个步骤</p><p>1、查询优惠券</p><p>2、判断秒杀库存是否足够</p><p>3、查询订单</p><p>4、校验是否是一人一单</p><p>5、扣减库存</p><p>6、创建订单</p><p>在这六步操作中，又有很多操作是要去操作数据库的，而且还是一个线程串行执行， 这样就会导致我们的程序执行的很慢，所以我们需要异步程序执行，那么如何加速呢？</p><p>在这里笔者想给大家分享一下课程内没有的思路，看看有没有小伙伴这么想，比如，我们可以不可以使用异步编排来做，或者说我开启N多线程，N多个线程，一个线程执行查询优惠券，一个执行判断扣减库存，一个去创建订单等等，然后再统一做返回，这种做法和课程中有哪种好呢？答案是课程中的好，因为如果你采用我刚说的方式，如果访问的人很多，那么线程池中的线程可能一下子就被消耗完了，而且你使用上述方案，最大的特点在于，你觉得时效性会非常重要，但是你想想是吗？并不是，比如我只要确定他能做这件事，然后我后边慢慢做就可以了，我并不需要他一口气做完这件事，所以我们应当采用的是课程中，类似消息队列的方式来完成我们的需求，而不是使用线程池或者是异步编排的方式来完成这个需求</p><p><img src="/20221205120000/1653560986599.png" alt="1653560986599"></p><p>优化方案：我们将耗时比较短的逻辑判断放入到redis中，比如是否库存足够，比如是否一人一单，这样的操作，只要这种逻辑可以完成，就意味着我们是一定可以下单完成的，我们只需要进行快速的逻辑判断，根本就不用等下单逻辑走完，我们直接给用户返回成功， 再在后台开一个线程，后台线程慢慢的去执行queue里边的消息，这样程序不就超级快了吗？而且也不用担心线程池消耗殆尽的问题，因为这里我们的程序中并没有手动使用任何线程池，当然这里边有两个难点</p><p>第一个难点是我们怎么在redis中去快速校验一人一单，还有库存判断</p><p>第二个难点是由于我们校验和tomct下单是两个线程，那么我们如何知道到底哪个单他最后是否成功，或者是下单完成，为了完成这件事我们在redis操作完之后，我们会将一些信息返回给前端，同时也会把这些信息丢到异步queue中去，后续操作中，可以通过这个id来查询我们tomcat中的下单逻辑是否完成了。</p><p><img src="/20221205120000/1653561657295.png" alt="1653561657295"></p><p>我们现在来看看整体思路：当用户下单之后，判断库存是否充足只需要导redis中去根据key找对应的value是否大于0即可，如果不充足，则直接结束，如果充足，继续在redis中判断用户是否可以下单，如果set集合中没有这条数据，说明他可以下单，如果set集合中没有这条记录，则将userId和优惠券存入到redis中，并且返回0，整个过程需要保证是原子性的，我们可以使用lua来操作</p><p>当以上判断逻辑走完之后，我们可以判断当前redis中返回的结果是否是0 ，如果是0，则表示可以下单，则将之前说的信息存入到到queue中去，然后返回，然后再来个线程异步的下单，前端可以通过返回的订单id来判断是否下单成功。</p><p><img src="/20221205120000/1653562234886.png" alt="1653562234886"></p><h3 id="6-2-秒杀优化-Redis完成秒杀资格判断"><a href="#6-2-秒杀优化-Redis完成秒杀资格判断" class="headerlink" title="6.2 秒杀优化-Redis完成秒杀资格判断"></a>6.2 秒杀优化-Redis完成秒杀资格判断</h3><p>需求：</p><ul><li><p>新增秒杀优惠券的同时，将优惠券信息保存到Redis中</p></li><li><p>基于Lua脚本，判断秒杀库存、一人一单，决定用户是否抢购成功</p></li><li><p>如果抢购成功，将优惠券id和用户id封装后存入阻塞队列</p></li><li><p>开启线程任务，不断从阻塞队列中获取信息，实现异步下单功能</p><p><img src="/20221205120000/1656080546603.png" alt="1656080546603"></p></li></ul><p>VoucherServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addSeckillVoucher</span><span class="hljs-params">(Voucher voucher)</span> &#123;<br>    <span class="hljs-comment">// 保存优惠券</span><br>    save(voucher);<br>    <span class="hljs-comment">// 保存秒杀信息</span><br>    <span class="hljs-type">SeckillVoucher</span> <span class="hljs-variable">seckillVoucher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeckillVoucher</span>();<br>    seckillVoucher.setVoucherId(voucher.getId());<br>    seckillVoucher.setStock(voucher.getStock());<br>    seckillVoucher.setBeginTime(voucher.getBeginTime());<br>    seckillVoucher.setEndTime(voucher.getEndTime());<br>    seckillVoucherService.save(seckillVoucher);<br>    <span class="hljs-comment">// 保存秒杀库存到Redis中</span><br>    <span class="hljs-comment">//SECKILL_STOCK_KEY 这个变量定义在RedisConstans中</span><br>    <span class="hljs-comment">//private static final String SECKILL_STOCK_KEY =&quot;seckill:stock:&quot;</span><br>    stringRedisTemplate.opsForValue().set(SECKILL_STOCK_KEY + voucher.getId(), voucher.getStock().toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>完整lua表达式</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- 1.参数列表</span><br><span class="hljs-comment">-- 1.1.优惠券id</span><br><span class="hljs-keyword">local</span> voucherId = ARGV[<span class="hljs-number">1</span>]<br><span class="hljs-comment">-- 1.2.用户id</span><br><span class="hljs-keyword">local</span> userId = ARGV[<span class="hljs-number">2</span>]<br><span class="hljs-comment">-- 1.3.订单id</span><br><span class="hljs-keyword">local</span> orderId = ARGV[<span class="hljs-number">3</span>]<br><br><span class="hljs-comment">-- 2.数据key</span><br><span class="hljs-comment">-- 2.1.库存key</span><br><span class="hljs-keyword">local</span> stockKey = <span class="hljs-string">&#x27;seckill:stock:&#x27;</span> .. voucherId<br><span class="hljs-comment">-- 2.2.订单key</span><br><span class="hljs-keyword">local</span> orderKey = <span class="hljs-string">&#x27;seckill:order:&#x27;</span> .. voucherId<br><br><span class="hljs-comment">-- 3.脚本业务</span><br><span class="hljs-comment">-- 3.1.判断库存是否充足 get stockKey</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">tonumber</span>(redis.call(<span class="hljs-string">&#x27;get&#x27;</span>, stockKey)) &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.2.库存不足，返回1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 3.2.判断用户是否下单 SISMEMBER orderKey userId</span><br><span class="hljs-keyword">if</span>(redis.call(<span class="hljs-string">&#x27;sismember&#x27;</span>, orderKey, userId) == <span class="hljs-number">1</span>) <span class="hljs-keyword">then</span><br>    <span class="hljs-comment">-- 3.3.存在，说明是重复下单，返回2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><span class="hljs-keyword">end</span><br><span class="hljs-comment">-- 3.4.扣库存 incrby stockKey -1</span><br>redis.call(<span class="hljs-string">&#x27;incrby&#x27;</span>, stockKey, <span class="hljs-number">-1</span>)<br><span class="hljs-comment">-- 3.5.下单（保存用户）sadd orderKey userId</span><br>redis.call(<span class="hljs-string">&#x27;sadd&#x27;</span>, orderKey, userId)<br><span class="hljs-comment">-- 3.6.发送消息到队列中， XADD stream.orders * k1 v1 k2 v2 ...</span><br>redis.call(<span class="hljs-string">&#x27;xadd&#x27;</span>, <span class="hljs-string">&#x27;stream.orders&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-string">&#x27;userId&#x27;</span>, userId, <span class="hljs-string">&#x27;voucherId&#x27;</span>, voucherId, <span class="hljs-string">&#x27;id&#x27;</span>, orderId)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>当以上lua表达式执行完毕后，剩下的就是根据步骤3,4来执行我们接下来的任务了</p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>    <span class="hljs-comment">//获取用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>    <span class="hljs-comment">// 1.执行lua脚本</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(<br>            SECKILL_SCRIPT,<br>            Collections.emptyList(),<br>            voucherId.toString(), userId.toString(), String.valueOf(orderId)<br>    );<br>    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>    <span class="hljs-comment">// 2.判断结果是否为0</span><br>    <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 2.1.不为0 ，代表没有购买资格</span><br>        <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足&quot;</span> : <span class="hljs-string">&quot;不能重复下单&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//TODO 保存阻塞队列</span><br>    <span class="hljs-comment">// 3.返回订单id</span><br>    <span class="hljs-keyword">return</span> Result.ok(orderId);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-秒杀优化-基于阻塞队列实现秒杀优化"><a href="#6-3-秒杀优化-基于阻塞队列实现秒杀优化" class="headerlink" title="6.3 秒杀优化-基于阻塞队列实现秒杀优化"></a>6.3 秒杀优化-基于阻塞队列实现秒杀优化</h3><p>VoucherOrderServiceImpl</p><p>修改下单动作，现在我们去下单时，是通过lua表达式去原子执行判断逻辑，如果判断我出来不为0 ，则要么是库存不足，要么是重复下单，返回错误信息，如果是0，则把下单的逻辑保存到队列中去，然后异步执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//异步处理线程池</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">SECKILL_ORDER_EXECUTOR</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br><br><span class="hljs-comment">//在类初始化之后执行，因为当这个类初始化好了之后，随时都是有可能要执行的</span><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>   SECKILL_ORDER_EXECUTOR.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrderHandler</span>());<br>&#125;<br><span class="hljs-comment">// 用于线程池处理的任务</span><br><span class="hljs-comment">// 当初始化完毕后，就会去从对列中去拿信息</span><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 1.获取队列中的订单信息</span><br>                    <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> orderTasks.take();<br>                    <span class="hljs-comment">// 2.创建订单</span><br>                    handleVoucherOrder(voucherOrder);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>                &#125;<br>           &#125;<br>        &#125;<br>     <br>       <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>            <span class="hljs-comment">//1.获取用户</span><br>            <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br>            <span class="hljs-comment">// 2.创建锁对象</span><br>            <span class="hljs-type">RLock</span> <span class="hljs-variable">redisLock</span> <span class="hljs-operator">=</span> redissonClient.getLock(<span class="hljs-string">&quot;lock:order:&quot;</span> + userId);<br>            <span class="hljs-comment">// 3.尝试获取锁</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isLock</span> <span class="hljs-operator">=</span> redisLock.lock();<br>            <span class="hljs-comment">// 4.判断是否获得锁成功</span><br>            <span class="hljs-keyword">if</span> (!isLock) &#123;<br>                <span class="hljs-comment">// 获取锁失败，直接返回失败或者重试</span><br>                log.error(<span class="hljs-string">&quot;不允许重复下单！&quot;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//注意：由于是spring的事务是放在threadLocal中，此时的是多线程，事务会失效</span><br>                proxy.createVoucherOrder(voucherOrder);<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">// 释放锁</span><br>                redisLock.unlock();<br>            &#125;<br>    &#125;<br>     <span class="hljs-comment">//a</span><br><span class="hljs-keyword">private</span> BlockingQueue&lt;VoucherOrder&gt; orderTasks =<span class="hljs-keyword">new</span>  <span class="hljs-title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">seckillVoucher</span><span class="hljs-params">(Long voucherId)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        <span class="hljs-comment">// 1.执行lua脚本</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> stringRedisTemplate.execute(<br>                SECKILL_SCRIPT,<br>                Collections.emptyList(),<br>                voucherId.toString(), userId.toString(), String.valueOf(orderId)<br>        );<br>        <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> result.intValue();<br>        <span class="hljs-comment">// 2.判断结果是否为0</span><br>        <span class="hljs-keyword">if</span> (r != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 2.1.不为0 ，代表没有购买资格</span><br>            <span class="hljs-keyword">return</span> Result.fail(r == <span class="hljs-number">1</span> ? <span class="hljs-string">&quot;库存不足&quot;</span> : <span class="hljs-string">&quot;不能重复下单&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>();<br>        <span class="hljs-comment">// 2.3.订单id</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">orderId</span> <span class="hljs-operator">=</span> redisIdWorker.nextId(<span class="hljs-string">&quot;order&quot;</span>);<br>        voucherOrder.setId(orderId);<br>        <span class="hljs-comment">// 2.4.用户id</span><br>        voucherOrder.setUserId(userId);<br>        <span class="hljs-comment">// 2.5.代金券id</span><br>        voucherOrder.setVoucherId(voucherId);<br>        <span class="hljs-comment">// 2.6.放入阻塞队列</span><br>        orderTasks.add(voucherOrder);<br>        <span class="hljs-comment">//3.获取代理对象</span><br>         proxy = (IVoucherOrderService)AopContext.currentProxy();<br>        <span class="hljs-comment">//4.返回订单id</span><br>        <span class="hljs-keyword">return</span> Result.ok(orderId);<br>    &#125;<br>     <br>      <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">createVoucherOrder</span><span class="hljs-params">(VoucherOrder voucherOrder)</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> voucherOrder.getUserId();<br>        <span class="hljs-comment">// 5.1.查询订单</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).count();<br>        <span class="hljs-comment">// 5.2.判断是否存在</span><br>        <span class="hljs-keyword">if</span> (count &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 用户已经购买过了</span><br>           log.error(<span class="hljs-string">&quot;用户已经购买过了&quot;</span>);<br>           <span class="hljs-keyword">return</span> ;<br>        &#125;<br><br>        <span class="hljs-comment">// 6.扣减库存</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> seckillVoucherService.update()<br>                .setSql(<span class="hljs-string">&quot;stock = stock - 1&quot;</span>) <span class="hljs-comment">// set stock = stock - 1</span><br>                .eq(<span class="hljs-string">&quot;voucher_id&quot;</span>, voucherOrder.getVoucherId()).gt(<span class="hljs-string">&quot;stock&quot;</span>, <span class="hljs-number">0</span>) <span class="hljs-comment">// where id = ? and stock &gt; 0</span><br>                .update();<br>        <span class="hljs-keyword">if</span> (!success) &#123;<br>            <span class="hljs-comment">// 扣减失败</span><br>            log.error(<span class="hljs-string">&quot;库存不足&quot;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        save(voucherOrder);<br> <br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>小总结：</strong></p><p>秒杀业务的优化思路是什么？</p><ul><li>先利用Redis完成库存余量、一人一单判断，完成抢单业务</li><li>再将下单业务放入阻塞队列，利用独立线程异步下单</li><li>基于阻塞队列的异步秒杀存在哪些问题？<ul><li>内存限制问题</li><li>数据安全问题</li></ul></li></ul><h2 id="7、Redis消息队列"><a href="#7、Redis消息队列" class="headerlink" title="7、Redis消息队列"></a>7、Redis消息队列</h2><h3 id="7-1-Redis消息队列-认识消息队列"><a href="#7-1-Redis消息队列-认识消息队列" class="headerlink" title="7.1 Redis消息队列-认识消息队列"></a>7.1 Redis消息队列-认识消息队列</h3><p>什么是消息队列：字面意思就是存放消息的队列。最简单的消息队列模型包括3个角色：</p><ul><li>消息队列：存储和管理消息，也被称为消息代理（Message Broker）</li><li>生产者：发送消息到消息队列</li><li>消费者：从消息队列获取消息并处理消息</li></ul><p><img src="/20221205120000/1653574849336.png" alt="1653574849336"></p><p>使用队列的好处在于 <strong>解耦：</strong>所谓解耦，举一个生活中的例子就是：快递员(生产者)把快递放到快递柜里边(Message Queue)去，我们(消费者)从快递柜里边去拿东西，这就是一个异步，如果耦合，那么这个快递员相当于直接把快递交给你，这事固然好，但是万一你不在家，那么快递员就会一直等你，这就浪费了快递员的时间，所以这种思想在我们日常开发中，是非常有必要的。</p><p>这种场景在我们秒杀中就变成了：我们下单之后，利用redis去进行校验下单条件，再通过队列把消息发送出去，然后再启动一个线程去消费这个消息，完成解耦，同时也加快我们的响应速度。</p><p>这里我们可以使用一些现成的mq，比如kafka，rabbitmq等等，但是呢，如果没有安装mq，我们也可以直接使用redis提供的mq方案，降低我们的部署和学习成本。</p><h3 id="7-2-Redis消息队列-基于List实现消息队列"><a href="#7-2-Redis消息队列-基于List实现消息队列" class="headerlink" title="7.2 Redis消息队列-基于List实现消息队列"></a>7.2 Redis消息队列-基于List实现消息队列</h3><p><strong>基于List结构模拟消息队列</strong></p><p>消息队列（Message Queue），字面意思就是存放消息的队列。而Redis的list数据结构是一个双向链表，很容易模拟出队列效果。</p><p>队列是入口和出口不在一边，因此我们可以利用：LPUSH 结合 RPOP、或者 RPUSH 结合 LPOP来实现。<br>不过要注意的是，当队列中没有消息时RPOP或LPOP操作会返回null，并不像JVM的阻塞队列那样会阻塞并等待消息。因此这里应该使用BRPOP或者BLPOP来实现阻塞效果。</p><p><img src="/20221205120000/1653575176451.png" alt="1653575176451"></p><p>基于List的消息队列有哪些优缺点？<br>优点：</p><ul><li>利用Redis存储，不受限于JVM内存上限</li><li>基于Redis的持久化机制，数据安全性有保证</li><li>可以满足消息有序性</li></ul><p>缺点：</p><ul><li>无法避免消息丢失</li><li>只支持单消费者</li></ul><h3 id="7-3-Redis消息队列-基于PubSub的消息队列"><a href="#7-3-Redis消息队列-基于PubSub的消息队列" class="headerlink" title="7.3 Redis消息队列-基于PubSub的消息队列"></a>7.3 Redis消息队列-基于PubSub的消息队列</h3><p>PubSub（发布订阅）是Redis2.0版本引入的消息传递模型。顾名思义，消费者可以订阅一个或多个channel，生产者向对应channel发送消息后，所有订阅者都能收到相关消息。</p><p> SUBSCRIBE channel [channel] ：订阅一个或多个频道<br> PUBLISH channel msg ：向一个频道发送消息<br> PSUBSCRIBE pattern[pattern] ：订阅与pattern格式匹配的所有频道</p><p><img src="/20221205120000/1653575506373.png" alt="1653575506373"></p><p>基于PubSub的消息队列有哪些优缺点？<br>优点：</p><ul><li>采用发布订阅模型，支持多生产、多消费</li></ul><p>缺点：</p><ul><li>不支持数据持久化</li><li>无法避免消息丢失</li><li>消息堆积有上限，超出时数据丢失</li></ul><h3 id="7-4-Redis消息队列-基于Stream的消息队列"><a href="#7-4-Redis消息队列-基于Stream的消息队列" class="headerlink" title="7.4 Redis消息队列-基于Stream的消息队列"></a>7.4 Redis消息队列-基于Stream的消息队列</h3><p>Stream 是 Redis 5.0 引入的一种新数据类型，可以实现一个功能非常完善的消息队列。</p><p>发送消息的命令：</p><p><img src="/20221205120000/1653577301737.png" alt="1653577301737"></p><p>例如：</p><p><img src="/20221205120000/1653577349691.png" alt="1653577349691"></p><p>读取消息的方式之一：XREAD</p><p><img src="/20221205120000/1653577445413.png" alt="1653577445413"></p><p>例如，使用XREAD读取第一个消息：</p><p><img src="/20221205120000/1653577643629.png" alt="1653577643629"></p><p>XREAD阻塞方式，读取最新的消息：</p><p><img src="/20221205120000/1653577659166.png" alt="1653577659166"></p><p>在业务开发中，我们可以循环的调用XREAD阻塞方式来查询最新消息，从而实现持续监听队列的效果，伪代码如下</p><p><img src="/20221205120000/1653577689129.png" alt="1653577689129"></p><p>注意：当我们指定起始ID为$时，代表读取最新的消息，如果我们处理一条消息的过程中，又有超过1条以上的消息到达队列，则下次获取时也只能获取到最新的一条，会出现漏读消息的问题</p><p>STREAM类型消息队列的XREAD命令特点：</p><ul><li>消息可回溯</li><li>一个消息可以被多个消费者读取</li><li>可以阻塞读取</li><li>有消息漏读的风险</li></ul><h3 id="7-5-Redis消息队列-基于Stream的消息队列-消费者组"><a href="#7-5-Redis消息队列-基于Stream的消息队列-消费者组" class="headerlink" title="7.5 Redis消息队列-基于Stream的消息队列-消费者组"></a>7.5 Redis消息队列-基于Stream的消息队列-消费者组</h3><p>消费者组（Consumer Group）：将多个消费者划分到一个组中，监听同一个队列。具备下列特点：</p><p><img src="/20221205120000/1653577801668.png" alt="1653577801668"></p><p>创建消费者组：<br><img src="/20221205120000/1653577984924.png" alt="1653577984924"><br>key：队列名称<br>groupName：消费者组名称<br>ID：起始ID标示，$代表队列中最后一个消息，0则代表队列中第一个消息<br>MKSTREAM：队列不存在时自动创建队列<br>其它常见命令：</p><p> <strong>删除指定的消费者组</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XGROUP DESTORY key groupName<br></code></pre></td></tr></table></figure><p> <strong>给指定的消费者组添加消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XGROUP CREATECONSUMER key groupname consumername<br></code></pre></td></tr></table></figure><p> <strong>删除消费者组中的指定消费者</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XGROUP DELCONSUMER key groupname consumername<br></code></pre></td></tr></table></figure><p>从消费者组读取消息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key ...] ID [ID ...]<br></code></pre></td></tr></table></figure><ul><li>group：消费组名称</li><li>consumer：消费者名称，如果消费者不存在，会自动创建一个消费者</li><li>count：本次查询的最大数量</li><li>BLOCK milliseconds：当没有消息时最长等待时间</li><li>NOACK：无需手动ACK，获取到消息后自动确认</li><li>STREAMS key：指定队列名称</li><li>ID：获取消息的起始ID：</li></ul><p>“&gt;”：从下一个未消费的消息开始<br>其它：根据指定id从pending-list中获取已消费但未确认的消息，例如0，是从pending-list中的第一个消息开始</p><p>消费者监听消息的基本思路：</p><p><img src="/20221205120000/1653578211854.png" alt="1653578211854">STREAM类型消息队列的XREADGROUP命令特点：</p><ul><li>消息可回溯</li><li>可以多消费者争抢消息，加快消费速度</li><li>可以阻塞读取</li><li>没有消息漏读的风险</li><li>有消息确认机制，保证消息至少被消费一次</li></ul><p>最后我们来个小对比</p><p><img src="/20221205120000/1653578560691.png" alt="1653578560691"></p><h3 id="7-6-基于Redis的Stream结构作为消息队列，实现异步秒杀下单"><a href="#7-6-基于Redis的Stream结构作为消息队列，实现异步秒杀下单" class="headerlink" title="7.6 基于Redis的Stream结构作为消息队列，实现异步秒杀下单"></a>7.6 基于Redis的Stream结构作为消息队列，实现异步秒杀下单</h3><p>需求：</p><ul><li>创建一个Stream类型的消息队列，名为stream.orders</li><li>修改之前的秒杀下单Lua脚本，在认定有抢购资格后，直接向stream.orders中添加消息，内容包含voucherId、userId、orderId</li><li>项目启动时，开启一个线程任务，尝试获取stream.orders中的消息，完成下单\</li></ul><p>修改lua表达式,新增3.6 </p><p><img src="/20221205120000/1656082824939.png" alt="1656082824939"></p><p>VoucherOrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VoucherOrderHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 1.获取消息队列中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 &gt;</span><br>                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                    Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                    StreamReadOptions.empty().count(<span class="hljs-number">1</span>).block(Duration.ofSeconds(<span class="hljs-number">2</span>)),<br>                    StreamOffset.create(<span class="hljs-string">&quot;stream.orders&quot;</span>, ReadOffset.lastConsumed())<br>                );<br>                <span class="hljs-comment">// 2.判断订单信息是否为空</span><br>                <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;<br>                    <span class="hljs-comment">// 如果为null，说明没有消息，继续下一次循环</span><br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">// 解析数据</span><br>                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                Map&lt;Object, Object&gt; value = record.getValue();<br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 3.创建订单</span><br>                createVoucherOrder(voucherOrder);<br>                <span class="hljs-comment">// 4.确认消息 XACK</span><br>                stringRedisTemplate.opsForStream().acknowledge(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                log.error(<span class="hljs-string">&quot;处理订单异常&quot;</span>, e);<br>                <span class="hljs-comment">//处理异常消息</span><br>                handlePendingList();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handlePendingList</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 1.获取pending-list中的订单信息 XREADGROUP GROUP g1 c1 COUNT 1 BLOCK 2000 STREAMS s1 0</span><br>                List&lt;MapRecord&lt;String, Object, Object&gt;&gt; list = stringRedisTemplate.opsForStream().read(<br>                    Consumer.from(<span class="hljs-string">&quot;g1&quot;</span>, <span class="hljs-string">&quot;c1&quot;</span>),<br>                    StreamReadOptions.empty().count(<span class="hljs-number">1</span>),<br>                    StreamOffset.create(<span class="hljs-string">&quot;stream.orders&quot;</span>, ReadOffset.from(<span class="hljs-string">&quot;0&quot;</span>))<br>                );<br>                <span class="hljs-comment">// 2.判断订单信息是否为空</span><br>                <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.isEmpty()) &#123;<br>                    <span class="hljs-comment">// 如果为null，说明没有异常消息，结束循环</span><br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">// 解析数据</span><br>                MapRecord&lt;String, Object, Object&gt; record = list.get(<span class="hljs-number">0</span>);<br>                Map&lt;Object, Object&gt; value = record.getValue();<br>                <span class="hljs-type">VoucherOrder</span> <span class="hljs-variable">voucherOrder</span> <span class="hljs-operator">=</span> BeanUtil.fillBeanWithMap(value, <span class="hljs-keyword">new</span> <span class="hljs-title class_">VoucherOrder</span>(), <span class="hljs-literal">true</span>);<br>                <span class="hljs-comment">// 3.创建订单</span><br>                createVoucherOrder(voucherOrder);<br>                <span class="hljs-comment">// 4.确认消息 XACK</span><br>                stringRedisTemplate.opsForStream().acknowledge(<span class="hljs-string">&quot;s1&quot;</span>, <span class="hljs-string">&quot;g1&quot;</span>, record.getId());<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                log.error(<span class="hljs-string">&quot;处理pendding订单异常&quot;</span>, e);<br>                <span class="hljs-keyword">try</span>&#123;<br>                    Thread.sleep(<span class="hljs-number">20</span>);<br>                &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8、达人探店"><a href="#8、达人探店" class="headerlink" title="8、达人探店"></a>8、达人探店</h2><h3 id="8-1、达人探店-发布探店笔记"><a href="#8-1、达人探店-发布探店笔记" class="headerlink" title="8.1、达人探店-发布探店笔记"></a>8.1、达人探店-发布探店笔记</h3><p>发布探店笔记</p><p>探店笔记类似点评网站的评价，往往是图文结合。对应的表有两个：<br>tb_blog：探店笔记表，包含笔记中的标题、文字、图片等<br>tb_blog_comments：其他用户对探店笔记的评价</p><p><strong>具体发布流程</strong></p><p><img src="/20221205120000/1653578992639.png" alt="1653578992639"></p><p>上传接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;upload&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;blog&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">uploadImage</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile image)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取原始文件名称</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">originalFilename</span> <span class="hljs-operator">=</span> image.getOriginalFilename();<br>            <span class="hljs-comment">// 生成新文件名</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> createNewFileName(originalFilename);<br>            <span class="hljs-comment">// 保存文件</span><br>            image.transferTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(SystemConstants.IMAGE_UPLOAD_DIR, fileName));<br>            <span class="hljs-comment">// 返回结果</span><br>            log.debug(<span class="hljs-string">&quot;文件上传成功，&#123;&#125;&quot;</span>, fileName);<br>            <span class="hljs-keyword">return</span> Result.ok(fileName);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;文件上传失败&quot;</span>, e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：同学们在操作时，需要修改SystemConstants.IMAGE_UPLOAD_DIR 自己图片所在的地址，在实际开发中图片一般会放在nginx上或者是云存储上。</p><p>BlogController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/blog&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BlogController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IBlogService blogService;<br><br>    <span class="hljs-meta">@PostMapping</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Blog blog)</span> &#123;<br>        <span class="hljs-comment">//获取登录用户</span><br>        <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>        blog.setUpdateTime(user.getId());<br>        <span class="hljs-comment">//保存探店博文</span><br>        blogService.saveBlog(blog);<br>        <span class="hljs-comment">//返回id</span><br>        <span class="hljs-keyword">return</span> Result.ok(blog.getId());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-达人探店-查看探店笔记"><a href="#8-2-达人探店-查看探店笔记" class="headerlink" title="8.2 达人探店-查看探店笔记"></a>8.2 达人探店-查看探店笔记</h3><p>实现查看发布探店笔记的接口</p><p><img src="/20221205120000/1653579931626.png" alt="1653579931626"></p><p>实现代码：</p><p>BlogServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogById</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 1.查询blog</span><br>    <span class="hljs-type">Blog</span> <span class="hljs-variable">blog</span> <span class="hljs-operator">=</span> getById(id);<br>    <span class="hljs-keyword">if</span> (blog == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;笔记不存在！&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 2.查询blog有关的用户</span><br>    queryBlogUser(blog);<br>  <br>    <span class="hljs-keyword">return</span> Result.ok(blog);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-达人探店-点赞功能"><a href="#8-3-达人探店-点赞功能" class="headerlink" title="8.3 达人探店-点赞功能"></a>8.3 达人探店-点赞功能</h3><p>初始代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br>    <span class="hljs-comment">//修改点赞数量</span><br>    blogService.update().setSql(<span class="hljs-string">&quot;liked = liked +1 &quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>,id).update();<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p>问题分析：这种方式会导致一个用户无限点赞，明显是不合理的</p><p>造成这个问题的原因是，我们现在的逻辑，发起请求只是给数据库+1，所以才会出现这个问题</p><p><img src="/20221205120000/1653581590453.png" alt="1653581590453"></p><p>完善点赞功能</p><p>需求：</p><ul><li>同一个用户只能点赞一次，再次点击则取消点赞</li><li>如果当前用户已经点赞，则点赞按钮高亮显示（前端已实现，判断字段Blog类的isLike属性）</li></ul><p>实现步骤：</p><ul><li>给Blog类中添加一个isLike字段，标示是否被当前用户点赞</li><li>修改点赞功能，利用Redis的set集合判断是否点赞过，未点赞过则点赞数+1，已点赞过则点赞数-1</li><li>修改根据id查询Blog的业务，判断当前登录用户是否点赞过，赋值给isLike字段</li><li>修改分页查询Blog业务，判断当前登录用户是否点赞过，赋值给isLike字段</li></ul><p>为什么采用set集合：</p><p>因为我们的数据是不能重复的，当用户操作过之后，无论他怎么操作，都是</p><p>具体步骤：</p><p>1、在Blog 添加一个字段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableField(exist = false)</span><br><span class="hljs-keyword">private</span> Boolean isLike;<br></code></pre></td></tr></table></figure><p>2、修改代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(Long id)</span>&#123;<br>       <span class="hljs-comment">// 1.获取登录用户</span><br>       <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>       <span class="hljs-comment">// 2.判断当前登录用户是否已经点赞</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> BLOG_LIKED_KEY + id;<br>       <span class="hljs-type">Boolean</span> <span class="hljs-variable">isMember</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForSet().isMember(key, userId.toString());<br>       <span class="hljs-keyword">if</span>(BooleanUtil.isFalse(isMember))&#123;<br>            <span class="hljs-comment">//3.如果未点赞，可以点赞</span><br>           <span class="hljs-comment">//3.1 数据库点赞数+1</span><br>           <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked + 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>           <span class="hljs-comment">//3.2 保存用户到Redis的set集合</span><br>           <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>               stringRedisTemplate.opsForSet().add(key,userId.toString());<br>           &#125;<br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//4.如果已点赞，取消点赞</span><br>           <span class="hljs-comment">//4.1 数据库点赞数-1</span><br>           <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked - 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>           <span class="hljs-comment">//4.2 把用户从Redis的set集合移除</span><br>           <span class="hljs-keyword">if</span>(isSuccess)&#123;<br>               stringRedisTemplate.opsForSet().remove(key,userId.toString());<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-达人探店-点赞排行榜"><a href="#8-4-达人探店-点赞排行榜" class="headerlink" title="8.4 达人探店-点赞排行榜"></a>8.4 达人探店-点赞排行榜</h3><p>在探店笔记的详情页面，应该把给该笔记点赞的人显示出来，比如最早点赞的TOP5，形成点赞排行榜：</p><p>之前的点赞是放到set集合，但是set集合是不能排序的，所以这个时候，咱们可以采用一个可以排序的set集合，就是咱们的sortedSet</p><p><img src="/20221205120000/1653805077118.png" alt="1653805077118"></p><p>我们接下来来对比一下这些集合的区别是什么</p><p>所有点赞的人，需要是唯一的，所以我们应当使用set或者是sortedSet</p><p>其次我们需要排序，就可以直接锁定使用sortedSet啦</p><p><img src="/20221205120000/1653805203758.png" alt="1653805203758"></p><p>修改代码</p><p>BlogServiceImpl</p><p>点赞逻辑代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">likeBlog</span><span class="hljs-params">(Long id)</span> &#123;<br>     <span class="hljs-comment">// 1.获取登录用户</span><br>     <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>     <span class="hljs-comment">// 2.判断当前登录用户是否已经点赞</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> BLOG_LIKED_KEY + id;<br>     <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());<br>     <span class="hljs-keyword">if</span> (score == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-comment">// 3.如果未点赞，可以点赞</span><br>         <span class="hljs-comment">// 3.1.数据库点赞数 + 1</span><br>         <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked + 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>         <span class="hljs-comment">// 3.2.保存用户到Redis的set集合  zadd key value score</span><br>         <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>             stringRedisTemplate.opsForZSet().add(key, userId.toString(), System.currentTimeMillis());<br>         &#125;<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-comment">// 4.如果已点赞，取消点赞</span><br>         <span class="hljs-comment">// 4.1.数据库点赞数 -1</span><br>         <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> update().setSql(<span class="hljs-string">&quot;liked = liked - 1&quot;</span>).eq(<span class="hljs-string">&quot;id&quot;</span>, id).update();<br>         <span class="hljs-comment">// 4.2.把用户从Redis的set集合移除</span><br>         <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>             stringRedisTemplate.opsForZSet().remove(key, userId.toString());<br>         &#125;<br>     &#125;<br>     <span class="hljs-keyword">return</span> Result.ok();<br> &#125;<br><br><br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isBlogLiked</span><span class="hljs-params">(Blog blog)</span> &#123;<br>     <span class="hljs-comment">// 1.获取登录用户</span><br>     <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>     <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>         <span class="hljs-comment">// 用户未登录，无需查询是否点赞</span><br>         <span class="hljs-keyword">return</span>;<br>     &#125;<br>     <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> user.getId();<br>     <span class="hljs-comment">// 2.判断当前登录用户是否已经点赞</span><br>     <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;blog:liked:&quot;</span> + blog.getId();<br>     <span class="hljs-type">Double</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForZSet().score(key, userId.toString());<br>     blog.setIsLike(score != <span class="hljs-literal">null</span>);<br> &#125;<br></code></pre></td></tr></table></figure><p>点赞列表查询列表</p><p>BlogController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/likes/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;<br><br>    <span class="hljs-keyword">return</span> blogService.queryBlogLikes(id);<br>&#125;<br></code></pre></td></tr></table></figure><p>BlogService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogLikes</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> BLOG_LIKED_KEY + id;<br>    <span class="hljs-comment">// 1.查询top5的点赞用户 zrange key 0 4</span><br>    Set&lt;String&gt; top5 = stringRedisTemplate.opsForZSet().range(key, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-keyword">if</span> (top5 == <span class="hljs-literal">null</span> || top5.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>    &#125;<br>    <span class="hljs-comment">// 2.解析出其中的用户id</span><br>    List&lt;Long&gt; ids = top5.stream().map(Long::valueOf).collect(Collectors.toList());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    <span class="hljs-comment">// 3.根据用户id查询用户 WHERE id IN ( 5 , 1 ) ORDER BY FIELD(id, 5, 1)</span><br>    List&lt;UserDTO&gt; userDTOS = userService.query()<br>            .in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list()<br>            .stream()<br>            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))<br>            .collect(Collectors.toList());<br>    <span class="hljs-comment">// 4.返回</span><br>    <span class="hljs-keyword">return</span> Result.ok(userDTOS);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9、好友关注"><a href="#9、好友关注" class="headerlink" title="9、好友关注"></a>9、好友关注</h2><h3 id="9-1-好友关注-关注和取消关注"><a href="#9-1-好友关注-关注和取消关注" class="headerlink" title="9.1 好友关注-关注和取消关注"></a>9.1 好友关注-关注和取消关注</h3><p>针对用户的操作：可以对用户进行关注和取消关注功能。</p><p><img src="/20221205120000/1653806140822.png" alt="1653806140822"></p><p>实现思路：</p><p>需求：基于该表数据结构，实现两个接口：</p><ul><li>关注和取关接口</li><li>判断是否关注的接口</li></ul><p>关注是User之间的关系，是博主与粉丝的关系，数据库中有一张tb_follow表来标示：</p><p><img src="/20221205120000/1653806253817.png" alt="1653806253817"></p><p>注意: 这里需要把主键修改为自增长，简化开发。</p><p>FollowController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//关注</span><br><span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;/&#123;isFollow&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long followUserId, <span class="hljs-meta">@PathVariable(&quot;isFollow&quot;)</span> Boolean isFollow)</span> &#123;<br>    <span class="hljs-keyword">return</span> followService.follow(followUserId, isFollow);<br>&#125;<br><span class="hljs-comment">//取消关注</span><br><span class="hljs-meta">@GetMapping(&quot;/or/not/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">isFollow</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long followUserId)</span> &#123;<br>      <span class="hljs-keyword">return</span> followService.isFollow(followUserId);<br>&#125;<br></code></pre></td></tr></table></figure><p>FollowService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">取消关注service<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">isFollow</span><span class="hljs-params">(Long followUserId)</span> &#123;<br>        <span class="hljs-comment">// 1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-comment">// 2.查询是否关注 select count(*) from tb_follow where user_id = ? and follow_user_id = ?</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> query().eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId).count();<br>        <span class="hljs-comment">// 3.判断</span><br>        <span class="hljs-keyword">return</span> Result.ok(count &gt; <span class="hljs-number">0</span>);<br>    &#125;<br><br> 关注service<br> <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(Long followUserId, Boolean isFollow)</span> &#123;<br>        <span class="hljs-comment">// 1.获取登录用户</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + userId;<br>        <span class="hljs-comment">// 1.判断到底是关注还是取关</span><br>        <span class="hljs-keyword">if</span> (isFollow) &#123;<br>            <span class="hljs-comment">// 2.关注，新增数据</span><br>            <span class="hljs-type">Follow</span> <span class="hljs-variable">follow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Follow</span>();<br>            follow.setUserId(userId);<br>            follow.setFollowUserId(followUserId);<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(follow);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?</span><br>            remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Follow&gt;()<br>                    .eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId));<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="9-2-好友关注-共同关注"><a href="#9-2-好友关注-共同关注" class="headerlink" title="9.2 好友关注-共同关注"></a>9.2 好友关注-共同关注</h3><p>想要去看共同关注的好友，需要首先进入到这个页面，这个页面会发起两个请求</p><p>1、去查询用户的详情</p><p>2、去查询用户的笔记</p><p>以上两个功能和共同关注没有什么关系，大家可以自行将笔记中的代码拷贝到idea中就可以实现这两个功能了，我们的重点在于共同关注功能。</p><p><img src="/20221205120000/1653806706296.png" alt="1653806706296"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// UserController 根据id查询用户</span><br><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryUserById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long userId)</span>&#123;<br><span class="hljs-comment">// 查询详情</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userService.getById(userId);<br><span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br><span class="hljs-type">UserDTO</span> <span class="hljs-variable">userDTO</span> <span class="hljs-operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);<br><span class="hljs-comment">// 返回</span><br><span class="hljs-keyword">return</span> Result.ok(userDTO);<br>&#125;<br><br><span class="hljs-comment">// BlogController  根据id查询博主的探店笔记</span><br><span class="hljs-meta">@GetMapping(&quot;/of/user&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogByUserId</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span><br><span class="hljs-params"><span class="hljs-meta">@RequestParam(&quot;id&quot;)</span> Long id)</span> &#123;<br><span class="hljs-comment">// 根据用户查询</span><br>Page&lt;Blog&gt; page = blogService.query()<br>.eq(<span class="hljs-string">&quot;user_id&quot;</span>, id).page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.MAX_PAGE_SIZE));<br><span class="hljs-comment">// 获取当前页数据</span><br>List&lt;Blog&gt; records = page.getRecords();<br><span class="hljs-keyword">return</span> Result.ok(records);<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来我们来看看共同关注如何实现：</p><p>需求：利用Redis中恰当的数据结构，实现共同关注功能。在博主个人页面展示出当前用户与博主的共同关注呢。</p><p>当然是使用我们之前学习过的set集合咯，在set集合中，有交集并集补集的api，我们可以把两人的关注的人分别放入到一个set集合中，然后再通过api去查看这两个set集合中的交集数据。</p><p><img src="/20221205120000/1653806973212.png" alt="1653806973212"></p><p>我们先来改造当前的关注列表</p><p>改造原因是因为我们需要在用户关注了某位用户后，需要将数据放入到set集合中，方便后续进行共同关注，同时当取消关注时，也需要从set集合中进行删除</p><p>FollowServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">follow</span><span class="hljs-params">(Long followUserId, Boolean isFollow)</span> &#123;<br>    <span class="hljs-comment">// 1.获取登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + userId;<br>    <span class="hljs-comment">// 1.判断到底是关注还是取关</span><br>    <span class="hljs-keyword">if</span> (isFollow) &#123;<br>        <span class="hljs-comment">// 2.关注，新增数据</span><br>        <span class="hljs-type">Follow</span> <span class="hljs-variable">follow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Follow</span>();<br>        follow.setUserId(userId);<br>        follow.setFollowUserId(followUserId);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(follow);<br>        <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>            <span class="hljs-comment">// 把关注用户的id，放入redis的set集合 sadd userId followerUserId</span><br>            stringRedisTemplate.opsForSet().add(key, followUserId.toString());<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 3.取关，删除 delete from tb_follow where user_id = ? and follow_user_id = ?</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> remove(<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;Follow&gt;()<br>                .eq(<span class="hljs-string">&quot;user_id&quot;</span>, userId).eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, followUserId));<br>        <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>            <span class="hljs-comment">// 把关注用户的id从Redis集合中移除</span><br>            stringRedisTemplate.opsForSet().remove(key, followUserId.toString());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>具体的关注代码：</strong></p><p>FollowServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">followCommons</span><span class="hljs-params">(Long id)</span> &#123;<br>    <span class="hljs-comment">// 1.获取当前用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + userId;<br>    <span class="hljs-comment">// 2.求交集</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;follows:&quot;</span> + id;<br>    Set&lt;String&gt; intersect = stringRedisTemplate.opsForSet().intersect(key, key2);<br>    <span class="hljs-keyword">if</span> (intersect == <span class="hljs-literal">null</span> || intersect.isEmpty()) &#123;<br>        <span class="hljs-comment">// 无交集</span><br>        <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>    &#125;<br>    <span class="hljs-comment">// 3.解析id集合</span><br>    List&lt;Long&gt; ids = intersect.stream().map(Long::valueOf).collect(Collectors.toList());<br>    <span class="hljs-comment">// 4.查询用户</span><br>    List&lt;UserDTO&gt; users = userService.listByIds(ids)<br>            .stream()<br>            .map(user -&gt; BeanUtil.copyProperties(user, UserDTO.class))<br>            .collect(Collectors.toList());<br>    <span class="hljs-keyword">return</span> Result.ok(users);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-3-好友关注-Feed流实现方案"><a href="#9-3-好友关注-Feed流实现方案" class="headerlink" title="9.3 好友关注-Feed流实现方案"></a>9.3 好友关注-Feed流实现方案</h3><p>当我们关注了用户后，这个用户发了动态，那么我们应该把这些数据推送给用户，这个需求，其实我们又把他叫做Feed流，关注推送也叫做Feed流，直译为投喂。为用户持续的提供“沉浸式”的体验，通过无限下拉刷新获取新的信息。</p><p>对于传统的模式的内容解锁：我们是需要用户去通过搜索引擎或者是其他的方式去解锁想要看的内容</p><p><img src="/20221205120000/1653808641260.png" alt="1653808641260"></p><p>对于新型的Feed流的的效果：不需要我们用户再去推送信息，而是系统分析用户到底想要什么，然后直接把内容推送给用户，从而使用户能够更加的节约时间，不用主动去寻找。</p><p><img src="/20221205120000/1653808993693.png" alt="1653808993693"></p><p>Feed流的实现有两种模式：</p><p>Feed流产品有两种常见模式：<br>Timeline：不做内容筛选，简单的按照内容发布时间排序，常用于好友或关注。例如朋友圈</p><ul><li>优点：信息全面，不会有缺失。并且实现也相对简单</li><li>缺点：信息噪音较多，用户不一定感兴趣，内容获取效率低</li></ul><p>智能排序：利用智能算法屏蔽掉违规的、用户不感兴趣的内容。推送用户感兴趣信息来吸引用户</p><ul><li>优点：投喂用户感兴趣信息，用户粘度很高，容易沉迷</li><li>缺点：如果算法不精准，可能起到反作用<br>本例中的个人页面，是基于关注的好友来做Feed流，因此采用Timeline的模式。该模式的实现方案有三种：</li></ul><p>我们本次针对好友的操作，采用的就是Timeline的方式，只需要拿到我们关注用户的信息，然后按照时间排序即可</p><p>，因此采用Timeline的模式。该模式的实现方案有三种：</p><ul><li>拉模式</li><li>推模式</li><li>推拉结合</li></ul><p><strong>拉模式</strong>：也叫做读扩散</p><p>该模式的核心含义就是：当张三和李四和王五发了消息后，都会保存在自己的邮箱中，假设赵六要读取信息，那么他会从读取他自己的收件箱，此时系统会从他关注的人群中，把他关注人的信息全部都进行拉取，然后在进行排序</p><p>优点：比较节约空间，因为赵六在读信息时，并没有重复读取，而且读取完之后可以把他的收件箱进行清楚。</p><p>缺点：比较延迟，当用户读取数据时才去关注的人里边去读取数据，假设用户关注了大量的用户，那么此时就会拉取海量的内容，对服务器压力巨大。</p><p><img src="/20221205120000/1653809450816.png" alt="1653809450816"></p><p><strong>推模式</strong>：也叫做写扩散。</p><p>推模式是没有写邮箱的，当张三写了一个内容，此时会主动的把张三写的内容发送到他的粉丝收件箱中去，假设此时李四再来读取，就不用再去临时拉取了</p><p>优点：时效快，不用临时拉取</p><p>缺点：内存压力大，假设一个大V写信息，很多人关注他， 就会写很多分数据到粉丝那边去</p><p><img src="/20221205120000/1653809875208.png" alt="1653809875208"></p><p><strong>推拉结合模式</strong>：也叫做读写混合，兼具推和拉两种模式的优点。</p><p>推拉模式是一个折中的方案，站在发件人这一段，如果是个普通的人，那么我们采用写扩散的方式，直接把数据写入到他的粉丝中去，因为普通的人他的粉丝关注量比较小，所以这样做没有压力，如果是大V，那么他是直接将数据先写入到一份到发件箱里边去，然后再直接写一份到活跃粉丝收件箱里边去，现在站在收件人这端来看，如果是活跃粉丝，那么大V和普通的人发的都会直接写入到自己收件箱里边来，而如果是普通的粉丝，由于他们上线不是很频繁，所以等他们上线时，再从发件箱里边去拉信息。</p><p><img src="/20221205120000/1653812346852.png" alt="1653812346852"></p><h3 id="9-4-好友关注-推送到粉丝收件箱"><a href="#9-4-好友关注-推送到粉丝收件箱" class="headerlink" title="9.4 好友关注-推送到粉丝收件箱"></a>9.4 好友关注-推送到粉丝收件箱</h3><p>需求：</p><ul><li>修改新增探店笔记的业务，在保存blog到数据库的同时，推送到粉丝的收件箱</li><li>收件箱满足可以根据时间戳排序，必须用Redis的数据结构实现</li><li>查询收件箱数据时，可以实现分页查询</li></ul><p>Feed流中的数据会不断更新，所以数据的角标也在变化，因此不能采用传统的分页模式。</p><p>传统了分页在feed流是不适用的，因为我们的数据会随时发生变化</p><p>假设在t1 时刻，我们去读取第一页，此时page &#x3D; 1 ，size &#x3D; 5 ，那么我们拿到的就是10<del>6 这几条记录，假设现在t2时候又发布了一条记录，此时t3 时刻，我们来读取第二页，读取第二页传入的参数是page&#x3D;2 ，size&#x3D;5 ，那么此时读取到的第二页实际上是从6 开始，然后是6</del>2 ，那么我们就读取到了重复的数据，所以feed流的分页，不能采用原始方案来做。</p><p><img src="/20221205120000/1653813047671.png" alt="1653813047671"></p><p>Feed流的滚动分页</p><p>我们需要记录每次操作的最后一条，然后从这个位置开始去读取数据</p><p>举个例子：我们从t1时刻开始，拿第一页数据，拿到了10~6，然后记录下当前最后一次拿取的记录，就是6，t2时刻发布了新的记录，此时这个11放到最顶上，但是不会影响我们之前记录的6，此时t3时刻来拿第二页，第二页这个时候拿数据，还是从6后一点的5去拿，就拿到了5-1的记录。我们这个地方可以采用sortedSet来做，可以进行范围查询，并且还可以记录当前获取数据时间戳最小值，就可以实现滚动分页了</p><p><img src="/20221205120000/1653813462834.png" alt="1653813462834"></p><p>核心的意思：就是我们在保存完探店笔记后，获得到当前笔记的粉丝，然后把数据推送到粉丝的redis中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">saveBlog</span><span class="hljs-params">(Blog blog)</span> &#123;<br>    <span class="hljs-comment">// 1.获取登录用户</span><br>    <span class="hljs-type">UserDTO</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> UserHolder.getUser();<br>    blog.setUserId(user.getId());<br>    <span class="hljs-comment">// 2.保存探店笔记</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> save(blog);<br>    <span class="hljs-keyword">if</span>(!isSuccess)&#123;<br>        <span class="hljs-keyword">return</span> Result.fail(<span class="hljs-string">&quot;新增笔记失败!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 3.查询笔记作者的所有粉丝 select * from tb_follow where follow_user_id = ?</span><br>    List&lt;Follow&gt; follows = followService.query().eq(<span class="hljs-string">&quot;follow_user_id&quot;</span>, user.getId()).list();<br>    <span class="hljs-comment">// 4.推送笔记id给所有粉丝</span><br>    <span class="hljs-keyword">for</span> (Follow follow : follows) &#123;<br>        <span class="hljs-comment">// 4.1.获取粉丝id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> follow.getUserId();<br>        <span class="hljs-comment">// 4.2.推送</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> FEED_KEY + userId;<br>        stringRedisTemplate.opsForZSet().add(key, blog.getId().toString(), System.currentTimeMillis());<br>    &#125;<br>    <span class="hljs-comment">// 5.返回id</span><br>    <span class="hljs-keyword">return</span> Result.ok(blog.getId());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-5好友关注-实现分页查询收邮箱"><a href="#9-5好友关注-实现分页查询收邮箱" class="headerlink" title="9.5好友关注-实现分页查询收邮箱"></a>9.5好友关注-实现分页查询收邮箱</h3><p>需求：在个人主页的“关注”卡片中，查询并展示推送的Blog信息：</p><p>具体操作如下：</p><p>1、每次查询完成后，我们要分析出查询出数据的最小时间戳，这个值会作为下一次查询的条件</p><p>2、我们需要找到与上一次查询相同的查询个数作为偏移量，下次查询时，跳过这些查询过的数据，拿到我们需要的数据</p><p>综上：我们的请求参数中就需要携带 lastId：上一次查询的最小时间戳 和偏移量这两个参数。</p><p>这两个参数第一次会由前端来指定，以后的查询就根据后台结果作为条件，再次传递到后台。</p><p><img src="/20221205120000/1653819821591.png" alt="1653819821591"></p><p>一、定义出来具体的返回值实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScrollResult</span> &#123;<br>    <span class="hljs-keyword">private</span> List&lt;?&gt; list;<br>    <span class="hljs-keyword">private</span> Long minTime;<br>    <span class="hljs-keyword">private</span> Integer offset;<br>&#125;<br></code></pre></td></tr></table></figure><p>BlogController</p><p>注意：RequestParam 表示接受url地址栏传参的注解，当方法上参数的名称和url地址栏不相同时，可以通过RequestParam 来进行指定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/of/follow&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogOfFollow</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@RequestParam(&quot;lastId&quot;)</span> Long max, <span class="hljs-meta">@RequestParam(value = &quot;offset&quot;, defaultValue = &quot;0&quot;)</span> Integer offset)</span>&#123;<br>    <span class="hljs-keyword">return</span> blogService.queryBlogOfFollow(max, offset);<br>&#125;<br></code></pre></td></tr></table></figure><p>BlogServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryBlogOfFollow</span><span class="hljs-params">(Long max, Integer offset)</span> &#123;<br>    <span class="hljs-comment">// 1.获取当前用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 2.查询收件箱 ZREVRANGEBYSCORE key Max Min LIMIT offset count</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> FEED_KEY + userId;<br>    Set&lt;ZSetOperations.TypedTuple&lt;String&gt;&gt; typedTuples = stringRedisTemplate.opsForZSet()<br>        .reverseRangeByScoreWithScores(key, <span class="hljs-number">0</span>, max, offset, <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// 3.非空判断</span><br>    <span class="hljs-keyword">if</span> (typedTuples == <span class="hljs-literal">null</span> || typedTuples.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok();<br>    &#125;<br>    <span class="hljs-comment">// 4.解析数据：blogId、minTime（时间戳）、offset</span><br>    List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(typedTuples.size());<br>    <span class="hljs-type">long</span> <span class="hljs-variable">minTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 2</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 2</span><br>    <span class="hljs-keyword">for</span> (ZSetOperations.TypedTuple&lt;String&gt; tuple : typedTuples) &#123; <span class="hljs-comment">// 5 4 4 2 2</span><br>        <span class="hljs-comment">// 4.1.获取id</span><br>        ids.add(Long.valueOf(tuple.getValue()));<br>        <span class="hljs-comment">// 4.2.获取分数(时间戳）</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> tuple.getScore().longValue();<br>        <span class="hljs-keyword">if</span>(time == minTime)&#123;<br>            os++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            minTime = time;<br>            os = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>os = minTime == max ? os : os + offset;<br>    <span class="hljs-comment">// 5.根据id查询blog</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>    List&lt;Blog&gt; blogs = query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br><br>    <span class="hljs-keyword">for</span> (Blog blog : blogs) &#123;<br>        <span class="hljs-comment">// 5.1.查询blog有关的用户</span><br>        queryBlogUser(blog);<br>        <span class="hljs-comment">// 5.2.查询blog是否被点赞</span><br>        isBlogLiked(blog);<br>    &#125;<br><br>    <span class="hljs-comment">// 6.封装并返回</span><br>    <span class="hljs-type">ScrollResult</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScrollResult</span>();<br>    r.setList(blogs);<br>    r.setOffset(os);<br>    r.setMinTime(minTime);<br><br>    <span class="hljs-keyword">return</span> Result.ok(r);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10、附近商户"><a href="#10、附近商户" class="headerlink" title="10、附近商户"></a>10、附近商户</h2><h3 id="10-1、附近商户-GEO数据结构的基本用法"><a href="#10-1、附近商户-GEO数据结构的基本用法" class="headerlink" title="10.1、附近商户-GEO数据结构的基本用法"></a>10.1、附近商户-GEO数据结构的基本用法</h3><p>GEO就是Geolocation的简写形式，代表地理坐标。Redis在3.2版本中加入了对GEO的支持，允许存储地理坐标信息，帮助我们根据经纬度来检索数据。常见的命令有：</p><ul><li>GEOADD：添加一个地理空间信息，包含：经度（longitude）、纬度（latitude）、值（member）</li><li>GEODIST：计算指定的两个点之间的距离并返回</li><li>GEOHASH：将指定member的坐标转为hash字符串形式并返回</li><li>GEOPOS：返回指定member的坐标</li><li>GEORADIUS：指定圆心、半径，找到该圆内包含的所有member，并按照与圆心之间的距离排序后返回。6.以后已废弃</li><li>GEOSEARCH：在指定范围内搜索member，并按照与指定点之间的距离排序后返回。范围可以是圆形或矩形。6.2.新功能</li><li>GEOSEARCHSTORE：与GEOSEARCH功能一致，不过可以把结果存储到一个指定的key。 6.2.新功能</li></ul><h3 id="10-2、-附近商户-导入店铺数据到GEO"><a href="#10-2、-附近商户-导入店铺数据到GEO" class="headerlink" title="10.2、 附近商户-导入店铺数据到GEO"></a>10.2、 附近商户-导入店铺数据到GEO</h3><p>具体场景说明：</p><p><img src="/20221205120000/1653822036941.png" alt="1653822036941"></p><p>当我们点击美食之后，会出现一系列的商家，商家中可以按照多种排序方式，我们此时关注的是距离，这个地方就需要使用到我们的GEO，向后台传入当前app收集的地址(我们此处是写死的) ，以当前坐标作为圆心，同时绑定相同的店家类型type，以及分页信息，把这几个条件传入后台，后台查询出对应的数据再返回。</p><p><img src="/20221205120000/1653822021827.png" alt="1653822021827"></p><p>我们要做的事情是：将数据库表中的数据导入到redis中去，redis中的GEO，GEO在redis中就一个menber和一个经纬度，我们把x和y轴传入到redis做的经纬度位置去，但我们不能把所有的数据都放入到menber中去，毕竟作为redis是一个内存级数据库，如果存海量数据，redis还是力不从心，所以我们在这个地方存储他的id即可。</p><p>但是这个时候还有一个问题，就是在redis中并没有存储type，所以我们无法根据type来对数据进行筛选，所以我们可以按照商户类型做分组，类型相同的商户作为同一组，以typeId为key存入同一个GEO集合中即可</p><p>代码</p><p>HmDianPingApplicationTests</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">loadShopData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.查询店铺信息</span><br>    List&lt;Shop&gt; list = shopService.list();<br>    <span class="hljs-comment">// 2.把店铺分组，按照typeId分组，typeId一致的放到一个集合</span><br>    Map&lt;Long, List&lt;Shop&gt;&gt; map = list.stream().collect(Collectors.groupingBy(Shop::getTypeId));<br>    <span class="hljs-comment">// 3.分批完成写入Redis</span><br>    <span class="hljs-keyword">for</span> (Map.Entry&lt;Long, List&lt;Shop&gt;&gt; entry : map.entrySet()) &#123;<br>        <span class="hljs-comment">// 3.1.获取类型id</span><br>        <span class="hljs-type">Long</span> <span class="hljs-variable">typeId</span> <span class="hljs-operator">=</span> entry.getKey();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> SHOP_GEO_KEY + typeId;<br>        <span class="hljs-comment">// 3.2.获取同类型的店铺的集合</span><br>        List&lt;Shop&gt; value = entry.getValue();<br>        List&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; locations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(value.size());<br>        <span class="hljs-comment">// 3.3.写入redis GEOADD key 经度 纬度 member</span><br>        <span class="hljs-keyword">for</span> (Shop shop : value) &#123;<br>            <span class="hljs-comment">// stringRedisTemplate.opsForGeo().add(key, new Point(shop.getX(), shop.getY()), shop.getId().toString());</span><br>            locations.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisGeoCommands</span>.GeoLocation&lt;&gt;(<br>                    shop.getId().toString(),<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(shop.getX(), shop.getY())<br>            ));<br>        &#125;<br>        stringRedisTemplate.opsForGeo().add(key, locations);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-3-附近商户-实现附近商户功能"><a href="#10-3-附近商户-实现附近商户功能" class="headerlink" title="10.3 附近商户-实现附近商户功能"></a>10.3 附近商户-实现附近商户功能</h3><p>SpringDataRedis的2.3.9版本并不支持Redis 6.2提供的GEOSEARCH命令，因此我们需要提示其版本，修改自己的POM</p><p>第一步：导入pom</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;<br>    &lt;exclusions&gt;<br>        &lt;exclusion&gt;<br>            &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;<br>            &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;<br>        &lt;/exclusion&gt;<br>        &lt;exclusion&gt;<br>            &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;<br>            &lt;groupId&gt;io.lettuce&lt;/groupId&gt;<br>        &lt;/exclusion&gt;<br>    &lt;/exclusions&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.6</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>    &lt;groupId&gt;io.lettuce&lt;/groupId&gt;<br>    &lt;artifactId&gt;lettuce-core&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">6.1</span><span class="hljs-number">.6</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><p>第二步：</p><p>ShopController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/of/type&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopByType</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(&quot;typeId&quot;)</span> Integer typeId,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;current&quot;, defaultValue = &quot;1&quot;)</span> Integer current,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;x&quot;, required = false)</span> Double x,</span><br><span class="hljs-params">        <span class="hljs-meta">@RequestParam(value = &quot;y&quot;, required = false)</span> Double y</span><br><span class="hljs-params">)</span> &#123;<br>   <span class="hljs-keyword">return</span> shopService.queryShopByType(typeId, current, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><p>ShopServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">queryShopByType</span><span class="hljs-params">(Integer typeId, Integer current, Double x, Double y)</span> &#123;<br>        <span class="hljs-comment">// 1.判断是否需要根据坐标查询</span><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-literal">null</span> || y == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 不需要坐标查询，按数据库查询</span><br>            Page&lt;Shop&gt; page = query()<br>                    .eq(<span class="hljs-string">&quot;type_id&quot;</span>, typeId)<br>                    .page(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(current, SystemConstants.DEFAULT_PAGE_SIZE));<br>            <span class="hljs-comment">// 返回数据</span><br>            <span class="hljs-keyword">return</span> Result.ok(page.getRecords());<br>        &#125;<br><br>        <span class="hljs-comment">// 2.计算分页参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">from</span> <span class="hljs-operator">=</span> (current - <span class="hljs-number">1</span>) * SystemConstants.DEFAULT_PAGE_SIZE;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> current * SystemConstants.DEFAULT_PAGE_SIZE;<br><br>        <span class="hljs-comment">// 3.查询redis、按照距离排序、分页。结果：shopId、distance</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> SHOP_GEO_KEY + typeId;<br>        GeoResults&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt; results = stringRedisTemplate.opsForGeo() <span class="hljs-comment">// GEOSEARCH key BYLONLAT x y BYRADIUS 10 WITHDISTANCE</span><br>                .search(<br>                        key,<br>                        GeoReference.fromCoordinate(x, y),<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Distance</span>(<span class="hljs-number">5000</span>),<br>                        RedisGeoCommands.GeoSearchCommandArgs.newGeoSearchArgs().includeDistance().limit(end)<br>                );<br>        <span class="hljs-comment">// 4.解析出id</span><br>        <span class="hljs-keyword">if</span> (results == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>        &#125;<br>        List&lt;GeoResult&lt;RedisGeoCommands.GeoLocation&lt;String&gt;&gt;&gt; list = results.getContent();<br>        <span class="hljs-keyword">if</span> (list.size() &lt;= from) &#123;<br>            <span class="hljs-comment">// 没有下一页了，结束</span><br>            <span class="hljs-keyword">return</span> Result.ok(Collections.emptyList());<br>        &#125;<br>        <span class="hljs-comment">// 4.1.截取 from ~ end的部分</span><br>        List&lt;Long&gt; ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(list.size());<br>        Map&lt;String, Distance&gt; distanceMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(list.size());<br>        list.stream().skip(from).forEach(result -&gt; &#123;<br>            <span class="hljs-comment">// 4.2.获取店铺id</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">shopIdStr</span> <span class="hljs-operator">=</span> result.getContent().getName();<br>            ids.add(Long.valueOf(shopIdStr));<br>            <span class="hljs-comment">// 4.3.获取距离</span><br>            <span class="hljs-type">Distance</span> <span class="hljs-variable">distance</span> <span class="hljs-operator">=</span> result.getDistance();<br>            distanceMap.put(shopIdStr, distance);<br>        &#125;);<br>        <span class="hljs-comment">// 5.根据id查询Shop</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">idStr</span> <span class="hljs-operator">=</span> StrUtil.join(<span class="hljs-string">&quot;,&quot;</span>, ids);<br>        List&lt;Shop&gt; shops = query().in(<span class="hljs-string">&quot;id&quot;</span>, ids).last(<span class="hljs-string">&quot;ORDER BY FIELD(id,&quot;</span> + idStr + <span class="hljs-string">&quot;)&quot;</span>).list();<br>        <span class="hljs-keyword">for</span> (Shop shop : shops) &#123;<br>            shop.setDistance(distanceMap.get(shop.getId().toString()).getValue());<br>        &#125;<br>        <span class="hljs-comment">// 6.返回</span><br>        <span class="hljs-keyword">return</span> Result.ok(shops);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="11、用户签到"><a href="#11、用户签到" class="headerlink" title="11、用户签到"></a>11、用户签到</h2><h4 id="11-1、用户签到-BitMap功能演示"><a href="#11-1、用户签到-BitMap功能演示" class="headerlink" title="11.1、用户签到-BitMap功能演示"></a>11.1、用户签到-BitMap功能演示</h4><p>我们针对签到功能完全可以通过mysql来完成，比如说以下这张表</p><p><img src="/20221205120000/1653823145495.png" alt="1653823145495"></p><p>用户一次签到，就是一条记录，假如有1000万用户，平均每人每年签到次数为10次，则这张表一年的数据量为 1亿条</p><p>每签到一次需要使用（8 + 8 + 1 + 1 + 3 + 1）共22 字节的内存，一个月则最多需要600多字节</p><p>我们如何能够简化一点呢？其实可以考虑小时候一个挺常见的方案，就是小时候，咱们准备一张小小的卡片，你只要签到就打上一个勾，我最后判断你是否签到，其实只需要到小卡片上看一看就知道了</p><p>我们可以采用类似这样的方案来实现我们的签到需求。</p><p>我们按月来统计用户签到信息，签到记录为1，未签到则记录为0.</p><p>把每一个bit位对应当月的每一天，形成了映射关系。用0和1标示业务状态，这种思路就称为位图（BitMap）。这样我们就用极小的空间，来实现了大量数据的表示</p><p>Redis中是利用string类型数据结构实现BitMap，因此最大上限是512M，转换为bit则是 2^32个bit位。</p><p><img src="/20221205120000/1653824498278.png" alt="1653824498278"></p><p>BitMap的操作命令有：</p><ul><li>SETBIT：向指定位置（offset）存入一个0或1</li><li>GETBIT ：获取指定位置（offset）的bit值</li><li>BITCOUNT ：统计BitMap中值为1的bit位的数量</li><li>BITFIELD ：操作（查询、修改、自增）BitMap中bit数组中的指定位置（offset）的值</li><li>BITFIELD_RO ：获取BitMap中bit数组，并以十进制形式返回</li><li>BITOP ：将多个BitMap的结果做位运算（与 、或、异或）</li><li>BITPOS ：查找bit数组中指定范围内第一个0或1出现的位置</li></ul><h4 id="11-2-、用户签到-实现签到功能"><a href="#11-2-、用户签到-实现签到功能" class="headerlink" title="11.2 、用户签到-实现签到功能"></a>11.2 、用户签到-实现签到功能</h4><p>需求：实现签到接口，将当前用户当天签到信息保存到Redis中</p><p>思路：我们可以把年和月作为bitMap的key，然后保存到一个bitMap中，每次签到就到对应的位上把数字从0变成1，只要对应是1，就表明说明这一天已经签到了，反之则没有签到。</p><p>我们通过接口文档发现，此接口并没有传递任何的参数，没有参数怎么确实是哪一天签到呢？这个很容易，可以通过后台代码直接获取即可，然后到对应的地址上去修改bitMap。</p><p><img src="/20221205120000/1653833970361.png" alt="1653833970361"></p><p><strong>代码</strong></p><p>UserController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/sign&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sign</span><span class="hljs-params">()</span>&#123;<br>   <span class="hljs-keyword">return</span> userService.sign();<br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">sign</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.获取当前登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 2.获取日期</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    <span class="hljs-comment">// 3.拼接key</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keySuffix</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> USER_SIGN_KEY + userId + keySuffix;<br>    <span class="hljs-comment">// 4.获取今天是本月的第几天</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>    <span class="hljs-comment">// 5.写入Redis SETBIT key offset 1</span><br>    stringRedisTemplate.opsForValue().setBit(key, dayOfMonth - <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">return</span> Result.ok();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-3-用户签到-签到统计"><a href="#11-3-用户签到-签到统计" class="headerlink" title="11.3 用户签到-签到统计"></a>11.3 用户签到-签到统计</h4><p><strong>问题1：</strong>什么叫做连续签到天数？<br>从最后一次签到开始向前统计，直到遇到第一次未签到为止，计算总的签到次数，就是连续签到天数。</p><p><img src="/20221205120000/1653834455899.png" alt="1653834455899"></p><p>Java逻辑代码：获得当前这个月的最后一次签到数据，定义一个计数器，然后不停的向前统计，直到获得第一个非0的数字即可，每得到一个非0的数字计数器+1，直到遍历完所有的数据，就可以获得当前月的签到总天数了</p><p><strong>问题2：</strong>如何得到本月到今天为止的所有签到数据？</p><p>  BITFIELD key GET u[dayOfMonth] 0</p><p>假设今天是10号，那么我们就可以从当前月的第一天开始，获得到当前这一天的位数，是10号，那么就是10位，去拿这段时间的数据，就能拿到所有的数据了，那么这10天里边签到了多少次呢？统计有多少个1即可。</p><p><strong>问题3：如何从后向前遍历每个bit位？</strong></p><p>注意：bitMap返回的数据是10进制，哪假如说返回一个数字8，那么我哪儿知道到底哪些是0，哪些是1呢？我们只需要让得到的10进制数字和1做与运算就可以了，因为1只有遇见1 才是1，其他数字都是0 ，我们把签到结果和1进行与操作，每与一次，就把签到结果向右移动一位，依次内推，我们就能完成逐个遍历的效果了。</p><p>需求：实现下面接口，统计当前用户截止当前时间在本月的连续签到天数</p><p>有用户有时间我们就可以组织出对应的key，此时就能找到这个用户截止这天的所有签到记录，再根据这套算法，就能统计出来他连续签到的次数了</p><p><img src="/20221205120000/1653835784444.png" alt="1653835784444"></p><p>代码</p><p><strong>UserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/sign/count&quot;)</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">signCount</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> userService.signCount();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>UserServiceImpl</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Result <span class="hljs-title function_">signCount</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 1.获取当前登录用户</span><br>    <span class="hljs-type">Long</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> UserHolder.getUser().getId();<br>    <span class="hljs-comment">// 2.获取日期</span><br>    <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>    <span class="hljs-comment">// 3.拼接key</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">keySuffix</span> <span class="hljs-operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;:yyyyMM&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> USER_SIGN_KEY + userId + keySuffix;<br>    <span class="hljs-comment">// 4.获取今天是本月的第几天</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">dayOfMonth</span> <span class="hljs-operator">=</span> now.getDayOfMonth();<br>    <span class="hljs-comment">// 5.获取本月截止今天为止的所有的签到记录，返回的是一个十进制的数字 BITFIELD sign:5:202203 GET u14 0</span><br>    List&lt;Long&gt; result = stringRedisTemplate.opsForValue().bitField(<br>            key,<br>            BitFieldSubCommands.create()<br>                    .get(BitFieldSubCommands.BitFieldType.unsigned(dayOfMonth)).valueAt(<span class="hljs-number">0</span>)<br>    );<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span> || result.isEmpty()) &#123;<br>        <span class="hljs-comment">// 没有任何签到结果</span><br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> result.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-literal">null</span> || num == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> Result.ok(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">// 6.循环遍历</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">// 6.1.让这个数字与1做与运算，得到数字的最后一个bit位  // 判断这个bit位是否为0</span><br>        <span class="hljs-keyword">if</span> ((num &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 如果为0，说明未签到，结束</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果不为0，说明已签到，计数器+1</span><br>            count++;<br>        &#125;<br>        <span class="hljs-comment">// 把数字右移一位，抛弃最后一个bit位，继续下一个bit位</span><br>        num &gt;&gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Result.ok(count);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="11-4-额外加餐-关于使用bitmap来解决缓存穿透的方案"><a href="#11-4-额外加餐-关于使用bitmap来解决缓存穿透的方案" class="headerlink" title="11.4 额外加餐-关于使用bitmap来解决缓存穿透的方案"></a>11.4 额外加餐-关于使用bitmap来解决缓存穿透的方案</h4><p>回顾<strong>缓存穿透</strong>：</p><p>发起了一个数据库不存在的，redis里边也不存在的数据，通常你可以把他看成一个攻击</p><p>解决方案：</p><ul><li><p>判断id&lt;0</p></li><li><p>如果数据库是空，那么就可以直接往redis里边把这个空数据缓存起来</p></li></ul><p>第一种解决方案：遇到的问题是如果用户访问的是id不存在的数据，则此时就无法生效</p><p>第二种解决方案：遇到的问题是：如果是不同的id那就可以防止下次过来直击数据</p><p>所以我们如何解决呢？</p><p>我们可以将数据库的数据，所对应的id写入到一个list集合中，当用户过来访问的时候，我们直接去判断list中是否包含当前的要查询的数据，如果说用户要查询的id数据并不在list集合中，则直接返回，如果list中包含对应查询的id数据，则说明不是一次缓存穿透数据，则直接放行。</p><p><img src="/20221205120000/1653836416586.png" alt="1653836416586"></p><p>现在的问题是这个主键其实并没有那么短，而是很长的一个 主键</p><p>哪怕你单独去提取这个主键，但是在11年左右，淘宝的商品总量就已经超过10亿个</p><p>所以如果采用以上方案，这个list也会很大，所以我们可以使用bitmap来减少list的存储空间</p><p>我们可以把list数据抽象成一个非常大的bitmap，我们不再使用list，而是将db中的id数据利用哈希思想，比如：</p><p>id % bitmap.size  &#x3D; 算出当前这个id对应应该落在bitmap的哪个索引上，然后将这个值从0变成1，然后当用户来查询数据时，此时已经没有了list，让用户用他查询的id去用相同的哈希算法， 算出来当前这个id应当落在bitmap的哪一位，然后判断这一位是0，还是1，如果是0则表明这一位上的数据一定不存在，  采用这种方式来处理，需要重点考虑一个事情，就是误差率，所谓的误差率就是指当发生哈希冲突的时候，产生的误差。</p><p><img src="/20221205120000/1653836578970.png" alt="1653836578970"></p><h2 id="12、UV统计"><a href="#12、UV统计" class="headerlink" title="12、UV统计"></a>12、UV统计</h2><h3 id="12-1-、UV统计-HyperLogLog"><a href="#12-1-、UV统计-HyperLogLog" class="headerlink" title="12.1 、UV统计-HyperLogLog"></a>12.1 、UV统计-HyperLogLog</h3><p>首先我们搞懂两个概念：</p><ul><li>UV：全称Unique Visitor，也叫独立访客量，是指通过互联网访问、浏览这个网页的自然人。1天内同一个用户多次访问该网站，只记录1次。</li><li>PV：全称Page View，也叫页面访问量或点击量，用户每访问网站的一个页面，记录1次PV，用户多次打开页面，则记录多次PV。往往用来衡量网站的流量。</li></ul><p>通常来说UV会比PV大很多，所以衡量同一个网站的访问量，我们需要综合考虑很多因素，所以我们只是单纯的把这两个值作为一个参考值</p><p>UV统计在服务端做会比较麻烦，因为要判断该用户是否已经统计过了，需要将统计过的用户信息保存。但是如果每个访问的用户都保存到Redis中，数据量会非常恐怖，那怎么处理呢？</p><p>Hyperloglog(HLL)是从Loglog算法派生的概率算法，用于确定非常大的集合的基数，而不需要存储其所有值。相关算法原理大家可以参考：<a href="https://juejin.cn/post/6844903785744056333#heading-0">https://juejin.cn/post/6844903785744056333#heading-0</a><br>Redis中的HLL是基于string结构实现的，单个HLL的内存<strong>永远小于16kb</strong>，<strong>内存占用低</strong>的令人发指！作为代价，其测量结果是概率性的，<strong>有小于0.81％的误差</strong>。不过对于UV统计来说，这完全可以忽略。</p><p><img src="/20221205120000/1653837988985.png" alt="1653837988985"></p><h3 id="12-2-UV统计-测试百万数据的统计"><a href="#12-2-UV统计-测试百万数据的统计" class="headerlink" title="12.2 UV统计-测试百万数据的统计"></a>12.2 UV统计-测试百万数据的统计</h3><p>测试思路：我们直接利用单元测试，向HyperLogLog中添加100万条数据，看看内存占用和统计效果如何</p><p><img src="/20221205120000/1653838053608.png" alt="1653838053608"></p><p>经过测试：我们会发生他的误差是在允许范围内，并且内存占用极小</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基础篇 - 数据结构与常用命令</title>
    <link href="/20221205000000/"/>
    <url>/20221205000000/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Redis数据结构介绍"><a href="#1-Redis数据结构介绍" class="headerlink" title="1. Redis数据结构介绍"></a>1. Redis数据结构介绍</h1><p><img src="/20221205000000/image-20221205143031769.png" alt="Redis数据结构"></p><h1 id="2-操作命令"><a href="#2-操作命令" class="headerlink" title="2. 操作命令"></a>2. 操作命令</h1><ul><li><p><a href="https://redis.io/commands/">操作命令官方文档</a>。</p></li><li><p>在客户端命令行窗口输入：</p><ul><li><p><code>help 命令名称</code>，如：<code>help del</code>就是查看 <code>del</code> 命令的使用文档。</p><p><img src="/20221205000000/image-20221205145103409.png" alt="help命令示例"></p></li><li><p><code>help @groupName</code>，查看某个命令分组下的命令文档，如：<code>help @list</code>就是查看 <code>list</code> 命令相关的文档。命令分组在官方在线文档中有说明。</p></li></ul></li></ul><h2 id="2-1-通用命令"><a href="#2-1-通用命令" class="headerlink" title="2.1. 通用命令"></a>2.1. 通用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有的key</span><br>keys *<br><span class="hljs-meta prompt_"># </span><span class="language-bash">a开头的key（模糊搜索）</span><br>keys a*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除key</span><br>del keyName<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断key是否存在</span><br>exists<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">给key设置一个有效期，有效期到期时key会自动被删除</span><br>expire<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看一个key的剩余有效期（-1表示永久有效，-2表示过期）</span><br>ttl<br><br></code></pre></td></tr></table></figure><h2 id="2-2-String类型"><a href="#2-2-String类型" class="headerlink" title="2.2. String类型"></a>2.2. String类型</h2><h3 id="String类型常见命令"><a href="#String类型常见命令" class="headerlink" title="String类型常见命令"></a>String类型常见命令</h3><p><img src="/20221205000000/image-20221205161637493.png" alt="String类型常用命令"></p><h3 id="有层级结构的key"><a href="#有层级结构的key" class="headerlink" title="有层级结构的key"></a>有层级结构的key</h3><p><img src="/20221205000000/image-20221205163300077.png" alt="key层级结构"></p><h2 id="2-3-Hash类型"><a href="#2-3-Hash类型" class="headerlink" title="2.3. Hash类型"></a>2.3. Hash类型</h2><p><img src="/20221205000000/image-20221205163912138.png" alt="Hash类型"></p><h3 id="Hash类型常见命令"><a href="#Hash类型常见命令" class="headerlink" title="Hash类型常见命令"></a>Hash类型常见命令</h3><p><img src="/20221205000000/image-20221205163949163.png" alt="Hash类型常见命令"></p><h2 id="2-4-List类型"><a href="#2-4-List类型" class="headerlink" title="2.4. List类型"></a>2.4. List类型</h2><h3 id="List类型常用命令"><a href="#List类型常用命令" class="headerlink" title="List类型常用命令"></a>List类型常用命令</h3><p><img src="/20221205000000/image-20221205165838811.png" alt="List类型常用命令"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p><img src="/20221205000000/image-20221205170314931.png" alt="应用思考"></p><blockquote><p>说明：</p><p>栈的特点：只有一个进出口，先进后出，所以可以利用list的特性，比如：<code>lpush</code>和<code>lpop</code>即可。</p><p>队列：先进的可以先出，不同进出口，比如：<code>lpush</code>和<code>rpop</code>。</p><p>阻塞队列：<code>blpop</code>或者<code>brpop</code>是在有数据的情况就取出，没有数据就等待。</p></blockquote><h2 id="2-5-Set类型"><a href="#2-5-Set类型" class="headerlink" title="2.5. Set类型"></a>2.5. Set类型</h2><h3 id="Set类型介绍"><a href="#Set类型介绍" class="headerlink" title="Set类型介绍"></a>Set类型介绍</h3><p><img src="/20221205000000/image-20221205170949113.png" alt="Set类型介绍"></p><h3 id="Set类型常见命令"><a href="#Set类型常见命令" class="headerlink" title="Set类型常见命令"></a>Set类型常见命令</h3><p><img src="/20221205000000/image-20221205171515423.png" alt="Set类型常见命令"></p><h2 id="2-6-SortedSet"><a href="#2-6-SortedSet" class="headerlink" title="2.6 SortedSet"></a>2.6 SortedSet</h2><h3 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h3><p><img src="/20221205000000/image-20221205171956067.png" alt="SortedSet类型介绍"></p><h3 id="SortedSet类型常见命令"><a href="#SortedSet类型常见命令" class="headerlink" title="SortedSet类型常见命令"></a>SortedSet类型常见命令</h3><p><img src="/20221205000000/image-20221205172144278.png" alt="SortedSet类型常见命令"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springboot中使用redis的乱码问题</title>
    <link href="/20221103140000/"/>
    <url>/20221103140000/</url>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>项目中如果直接通过<code>RedisTemplate</code>进行redis的操作，我们在redis数据库可以看到，产生了像乱码一样的东西：</p><p><img src="/20221103140000/image-20221209115920877.png" alt="乱码问题"></p><h1 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h1><p>严格来说不是乱码，这是因为默认序列化器的问题，RedisTemplate加载时会初始化一个默认序列化器（JdkSerializationRedisSerializer ），程序中使用RedisTemplate将对象序列化后存储到 redis 中就会有这样的问题。</p><p><img src="/20221103140000/image-20221209120830121.png" alt="RedisTemplate默认序列化器加载"></p><p>断点进<code>redisTemplate.opsForValue().set()</code>方法查看源码：</p><p><img src="/20221103140000/image-20221209121159386.png" alt="序列化源码1"></p><p>查看<code>rawValue(value)</code>的实现源码：</p><p><img src="/20221103140000/image-20221209121410693.png" alt="序列化源码2"></p><p>通过查看实现类可以看到，实现<code>valueSerializer().serialize(value)</code>的序列化器有好几个，如果没有初始化的话，默认就是用<code>JdkSerializationRedisSerializer</code>这个序列化器。</p><p>RedisSerializer实现类：</p><p><img src="/20221103140000/image-20221209123056917.png" alt="RedisSerializer实现类"></p><p>继续看<code>JdkSerializationRedisSerializer</code> 序列化器的实现：</p><p><img src="/20221103140000/image-20221209121723099.png" alt="JdkSerializationRedisSerializer序列化实现"></p><p><img src="/20221103140000/image-20221209122156630.png" alt="JdkSerializationRedisSerializer序列化实现2"></p><p><img src="/20221103140000/image-20221209122300378.png" alt="JdkSerializationRedisSerializer序列化实现3"></p><p>最终是通过<code>ObjectOutputStream</code>来序列化的。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>自定义 RedisTemplate 配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.redisdemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        <span class="hljs-comment">// 创建 RedisTemplate 对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">// 设置key序列化器</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.json());<br>        <span class="hljs-comment">// 设置value序列化器</span><br>        template.setValueSerializer(RedisSerializer.json());<br>        template.setHashValueSerializer(RedisSerializer.json());<br><br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>如果有报错（jackson相关），需要添加 jackson 相关的包依赖，如果项目本身有依赖spring-mvc的话不会报错。</p><p>基本实现原理就是以上这样的，网上也可以查找相关：<code>springboot redistemplate 配置</code>，都大同小异。</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中使用Redis（Jedis）</title>
    <link href="/20221103130000/"/>
    <url>/20221103130000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍如何在Java中通过Jedis使用Redis。</p></blockquote><h1 id="Jedis快速入门"><a href="#Jedis快速入门" class="headerlink" title="Jedis快速入门"></a>Jedis快速入门</h1><h2 id="官方地址-Github"><a href="#官方地址-Github" class="headerlink" title="官方地址(Github)"></a><a href="https://github.com/redis/jedis">官方地址(Github)</a></h2><h2 id="Java的maven项目中使用jedis"><a href="#Java的maven项目中使用jedis" class="headerlink" title="Java的maven项目中使用jedis"></a>Java的maven项目中使用jedis</h2><ul><li>使用IDEA创建maven项目</li></ul><p><img src="/20221103130000/image-20221205231229753.png" alt="IDEA中创建maven项目1"></p><p><img src="/20221103130000/image-20221205231716161.png" alt="IDEA中创建maven项目2"></p><ul><li><p>pom添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--jedis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--junit--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>新建测试类来测试jedis</p><p><img src="/20221103130000/image-20221205235141484.png" alt="image-20221205235141484"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.jedis.test;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.AfterEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.BeforeEach;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jedis单元测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisTest</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Jedis jedis;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前单元测试类中，每次执行test之前都会执行的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@BeforeEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setup</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 建立连接</span><br>        jedis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jedis</span>(<span class="hljs-string">&quot;192.168.200.123&quot;</span>, <span class="hljs-number">6379</span>);<br>        <span class="hljs-comment">// 连接密码</span><br>        jedis.auth(<span class="hljs-string">&quot;123321&quot;</span>);<br>        <span class="hljs-comment">// 连接库</span><br>        jedis.select(<span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 当前单元测试类中，每次执行test之后都会执行的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@AfterEach</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">tearDown</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(jedis != <span class="hljs-literal">null</span>)&#123;<br>            jedis.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 存入数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> jedis.set(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Lisi&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + result);<br>        <span class="hljs-comment">// 取出数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> jedis.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + name);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h2><p>通过连接池获取redis连接（不用再通过new的方式创建连接）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> redis.clients.jedis.Jedis;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPool;<br><span class="hljs-keyword">import</span> redis.clients.jedis.JedisPoolConfig;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * jedis连接池</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JedisConnectionFactory</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> JedisPool jedisPool;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">// 配置连接池</span><br>        <span class="hljs-type">JedisPoolConfig</span> <span class="hljs-variable">poolConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPoolConfig</span>();<br>        <span class="hljs-comment">// 最大连接数</span><br>        poolConfig.setMaxTotal(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最大空闲连接</span><br>        poolConfig.setMaxIdle(<span class="hljs-number">8</span>);<br>        <span class="hljs-comment">// 最小空闲连接</span><br>        poolConfig.setMinIdle(<span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 等待时间</span><br>        poolConfig.setMaxWait(Duration.ofSeconds(<span class="hljs-number">10</span>));<br>        <span class="hljs-comment">// 创建连接池对象</span><br>        jedisPool = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisPool</span>(poolConfig, <span class="hljs-string">&quot;192.168.200.123&quot;</span>, <span class="hljs-number">6379</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&quot;123321&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取redis连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Jedis <span class="hljs-title function_">getJedis</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> jedisPool.getResource();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Springboot项目与redis"><a href="#Springboot项目与redis" class="headerlink" title="Springboot项目与redis"></a>Springboot项目与redis</h1><h2 id="SpringDataRedis介绍"><a href="#SpringDataRedis介绍" class="headerlink" title="SpringDataRedis介绍"></a>SpringDataRedis介绍</h2><p><img src="/20221103130000/image-20221206002810715.png" alt="SpringDataRedis介绍"></p><p><img src="/20221103130000/image-20221206003142014.png" alt="SpringDataRedis介绍2"></p><h2 id="Springboot项目中使用redis"><a href="#Springboot项目中使用redis" class="headerlink" title="Springboot项目中使用redis"></a>Springboot项目中使用redis</h2><ul><li>创建Springboot项目</li></ul><p><img src="/20221103130000/image-20221206003800697.png" alt="创建Springboot项目"></p><p><img src="/20221103130000/image-20221206003906129.png" alt="创建Springboot项目2"></p><ul><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--redis--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--连接池依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p><p>[可选]：修改<code>resources</code>文件夹下的<code>application.properties</code>文件为<code>application.yml</code></p><p><img src="/20221103130000/image-20221209115238567.png" alt="修改配置文件"></p><p>yml 配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.18</span><span class="hljs-number">.123</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123321</span><br>    <span class="hljs-comment"># 默认的 lettuce 连接池</span><br>    <span class="hljs-attr">lettuce:</span><br>      <span class="hljs-attr">pool:</span><br>        <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 最大空闲连接</span><br>        <span class="hljs-attr">max-idle:</span> <span class="hljs-number">8</span><br>        <span class="hljs-comment"># 最小空闲连接</span><br>        <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">max-wait:</span> <span class="hljs-string">1000ms</span><br>    <span class="hljs-comment"># 数据库索引</span><br>    <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></li><li><p>redisTemplate 操作redis</p></li></ul><p><img src="/20221103130000/image-20221209115613064.png" alt="redisTemplate 操作redis"></p><h3 id="”乱码“问题"><a href="#”乱码“问题" class="headerlink" title="”乱码“问题"></a>”乱码“问题</h3><p>如果直接进行上方的操作，我们在redis数据库可以看到，产生了像乱码一样的东西</p><p><img src="/20221103130000/image-20221209115920877.png" alt="乱码问题"></p><p>这是因为默认序列化器的问题，RedisTemplate加载时有初始化一个默认序列化器（JDK的序列化器）：</p><p><img src="/20221103130000/image-20221209120830121.png" alt="RedisTemplate默认序列化器加载"></p><p>断点进<code>redisTemplate.opsForValue().set()</code>方法查看源码：</p><p><img src="/20221103130000/image-20221209121159386.png" alt="序列化源码1"></p><p>查看<code>rawValue(value)</code>的实现源码：</p><p><img src="/20221103130000/image-20221209121410693.png" alt="序列化源码2"></p><p>通过查看实现类可以看到，实现<code>valueSerializer().serialize(value)</code>的序列化器有好几个，如果没有初始化的话，默认就是用<code>JdkSerializationRedisSerializer</code>这个序列化器。</p><p>继续看<code>JdkSerializationRedisSerializer</code> 序列化器的实现：</p><p><img src="/20221103130000/image-20221209121723099.png" alt="JdkSerializationRedisSerializer序列化实现"></p><p><img src="/20221103130000/image-20221209122156630.png" alt="JdkSerializationRedisSerializer序列化实现2"></p><p><img src="/20221103130000/image-20221209122300378.png" alt="JdkSerializationRedisSerializer序列化实现3"></p><p>最终是通过<code>ObjectOutputStream</code>来序列化的。</p><p>解决方案：</p><p>自定义 RedisTemplate 配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.redisdemo.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.cache.RedisCacheWriter;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title function_">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> &#123;<br>        <span class="hljs-comment">// 创建 RedisTemplate 对象</span><br>        RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;&gt;();<br>        <span class="hljs-comment">// 设置连接工厂</span><br>        template.setConnectionFactory(factory);<br>        <span class="hljs-comment">// 设置key序列化器</span><br>        template.setKeySerializer(RedisSerializer.string());<br>        template.setHashKeySerializer(RedisSerializer.json());<br>        <span class="hljs-comment">// 设置value序列化器</span><br>        template.setValueSerializer(RedisSerializer.json());<br>        template.setHashValueSerializer(RedisSerializer.json());<br><br>        <span class="hljs-comment">// 返回</span><br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>如果有报错（jackson相关），需要添加 jackson 相关的包依赖，如果项目本身有依赖spring-mvc的话不会报错。</p><p>基本实现原理就是以上这样的，网上也可以查找相关：<code>springboot redistemplate 配置</code>，都大同小异。</p><h3 id="数据对象存储问题"><a href="#数据对象存储问题" class="headerlink" title="数据对象存储问题"></a>数据对象存储问题</h3><p>通过指定的序列化器序列化之后，我们可以看到，如果存储的是对象，redis中会写入类信息，这样就多占用了很大一部分存储空间：</p><p><img src="/20221103130000/image-20221209133827502.png" alt="数据对象存储问题"></p><p>解决方案1，使用StringRedisTemplate，并进行手动反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.demo.redisdemo;<br><br><span class="hljs-keyword">import</span> com.demo.redisdemo.pojo.User;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisTemplateTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate stringRedisTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testJson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>        <span class="hljs-comment">// 创建对象</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-comment">// 手动序列化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userStr1</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(user1);<br>        <span class="hljs-comment">// 存入string类型的数据</span><br>        stringRedisTemplate.opsForValue().set(<span class="hljs-string">&quot;user:100&quot;</span>, userStr1);<br><br>        <span class="hljs-comment">// 取出string类型数据</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userStr2</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(<span class="hljs-string">&quot;user:100&quot;</span>);<br>        <span class="hljs-comment">// 手动反序列化</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> objectMapper.readValue(userStr2, User.class);<br><br>        System.out.println(<span class="hljs-string">&quot;user=&quot;</span> + user2);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/20221103130000/image-20221209134904232.png" alt="手动序列化反序列化"></p><h3 id="RedisTemplate的两种序列化实践方案"><a href="#RedisTemplate的两种序列化实践方案" class="headerlink" title="RedisTemplate的两种序列化实践方案"></a>RedisTemplate的两种序列化实践方案</h3><p>方案一：</p><ol><li>自定义<code>RedisTemplate</code>。</li><li>修改<code>RedisTemplate</code>的序列化器为<code>GenericJackson2JsonRedisSerializer</code></li></ol><p>方案二：</p><ol><li>使用<code>StringRedisTemplate</code>。</li><li>写入Redis时，手动把对象序列化为JSON。</li><li>读取Redis时，手动把读取到的JSON数据反序列化为对象。</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Redis</tag>
      
      <tag>Jedis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis安装说明</title>
    <link href="/20221103120000/"/>
    <url>/20221103120000/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis安装说明"><a href="#Redis安装说明" class="headerlink" title="Redis安装说明"></a>Redis安装说明</h1><blockquote><p>文章主要介绍开发本地如何安装Redis。</p><p><a href="https://redis.io/">Redis官方网站</a> 没有提供Windows版本的安装包，本文会基于Linux系统来安装Redis.</p><p>此处选择的Linux版本为<em>CentOS 7</em>.</p></blockquote><h1 id="1-单机安装Redis"><a href="#1-单机安装Redis" class="headerlink" title="1. 单机安装Redis"></a>1. 单机安装Redis</h1><h2 id="1-1-安装Redis依赖"><a href="#1-1-安装Redis依赖" class="headerlink" title="1.1. 安装Redis依赖"></a>1.1. 安装Redis依赖</h2><p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y gcc tcl<br></code></pre></td></tr></table></figure><h2 id="1-2-上传安装包并解压"><a href="#1-2-上传安装包并解压" class="headerlink" title="1.2. 上传安装包并解压"></a>1.2. 上传安装包并解压</h2><p>Redis压缩包上传到虚拟机的任意目录，例如，我放到了***&#x2F;usr&#x2F;local&#x2F;src*** 目录：</p><p>（图片为 <em><strong>Mobaxterm</strong></em> 的页面）</p><p><img src="/20221103120000/image-20211211080151539.png" alt="图片为Mobaxterm的页面"></p><p>或者在Linux进入指定文件夹后，使用如下命令直接下载到文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过下载链接直接下载</span><br>wget https://download.redis.io/releases/redis-6.2.6.tar.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果没有wget可以通过以下命令安装</span><br>yum -y install wget<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动文件到指定文件夹（按需求来，可不执行）</span><br>mv redis-6.2.6.tar.gz /usr/local/src/<br></code></pre></td></tr></table></figure><p>链接获取方式：</p><p><img src="/20221103120000/image-20221202004057636.png" alt="链接获取方式"></p><p>解压缩：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">解压文件</span><br>tar -xzf redis-6.2.6.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压后进入文件夹</span><br>cd redis-6.2.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行编译命令</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果没有出错，应该就安装成功了。</p><p>默认的安装路径是在 <code>/usr/local/bin</code>目录下：</p><p><img src="/20221103120000/image-20211211080603710.png" alt="默认安装路径"></p><p>该目录以及默认配置到环境变量，因此可以在任意目录下运行这些命令。其中：</p><ul><li>redis-cli：是redis提供的命令行客户端</li><li>redis-server：是redis的服务端启动脚本</li><li>redis-sentinel：是redis的哨兵启动脚本</li></ul><h2 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3. 启动"></a>1.3. 启动</h2><p>redis的启动方式有很多种，例如：</p><ul><li>默认启动</li><li>指定配置启动</li><li>开机自启</li></ul><h3 id="1-3-1-默认启动"><a href="#1-3-1-默认启动" class="headerlink" title="1.3.1. 默认启动"></a>1.3.1. 默认启动</h3><p>安装完成后，在任意目录输入redis-server命令即可启动Redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-server<br></code></pre></td></tr></table></figure><p>如图：</p><p><img src="/20221103120000/image-20211211081716167.png" alt="启动成功页面"></p><p>这种启动属于<code>前台启动</code>，会阻塞整个会话窗口，窗口关闭或者按下<code>CTRL + C</code>则Redis停止。不推荐使用。</p><h3 id="1-3-2-指定配置启动"><a href="#1-3-2-指定配置启动" class="headerlink" title="1.3.2. 指定配置启动"></a>1.3.2. 指定配置启动</h3><p>如果要让Redis以<code>后台</code>方式启动，则必须修改Redis配置文件，就在我们之前解压的redis安装包下（<code>/usr/local/src/redis-6.2.6</code>），名字叫redis.conf：</p><p><img src="/20221103120000/image-20211211082225509.png" alt="Redis配置文件"></p><p>我们先将这个配置文件备份一份：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">备份配置文件</span><br>cp redis.conf redis.conf.bak<br></code></pre></td></tr></table></figure><p>然后修改redis.conf文件中的一些配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 允许访问的地址，默认是127.0.0.1，会导致只能在本地访问。修改为0.0.0.0则可以在任意IP访问，生产环境不要设置为0.0.0.0</span><br><span class="hljs-attr">bind</span> <span class="hljs-string">0.0.0.0</span><br><span class="hljs-comment"># 守护进程，修改为yes后即可后台运行</span><br><span class="hljs-attr">daemonize</span> <span class="hljs-string">yes </span><br><span class="hljs-comment"># 密码，设置后访问Redis必须输入密码</span><br><span class="hljs-attr">requirepass</span> <span class="hljs-string">123321</span><br></code></pre></td></tr></table></figure><blockquote><p>说明：vi编辑器窗口进行快捷搜索</p><p>英文状态下，按 <code>esc</code> 后 按<code>/</code>，就可以在底部的输入框进行搜索，搜索的时候，通过按<code>n</code>（下一个），<code>N</code>（上一个）来进行前后搜索。</p></blockquote><p>Redis的其它常见配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 监听的端口</span><br><span class="hljs-attr">port</span> <span class="hljs-string">6379</span><br><span class="hljs-comment"># 工作目录，默认是当前目录，也就是运行redis-server时的命令，日志、持久化等文件会保存在这个目录</span><br><span class="hljs-attr">dir</span> <span class="hljs-string">.</span><br><span class="hljs-comment"># 数据库数量，设置为1，代表只使用1个库，默认有16个库，编号0~15</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">1</span><br><span class="hljs-comment"># 设置redis能够使用的最大内存</span><br><span class="hljs-attr">maxmemory</span> <span class="hljs-string">512mb</span><br><span class="hljs-comment"># 日志文件，默认为空，不记录日志，可以指定日志文件名</span><br><span class="hljs-attr">logfile</span> <span class="hljs-string">&quot;redis.log&quot;</span><br></code></pre></td></tr></table></figure><p>启动Redis：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis安装目录</span> <br>cd /usr/local/src/redis-6.2.6<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>redis-server redis.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示运行情况</span><br>ps -ef |grep redis<br></code></pre></td></tr></table></figure><p>通过 <code>redis-cli</code> 进入客户端命令行窗口：</p><p><img src="/20221103120000/image-20221205143946384.png" alt="redis-cli"></p><p>停止服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">利用redis-cli来执行 shutdown 命令，即可停止 Redis 服务，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">因为之前配置了密码，因此需要通过 -u 来指定密码</span><br>redis-cli -u 123321 shutdown<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果报错：Invalid URI scheme，可以尝试以下方式关闭</span><br>redis-cli -a 123321 shutdown<br></code></pre></td></tr></table></figure><h3 id="1-3-3-开机自启"><a href="#1-3-3-开机自启" class="headerlink" title="1.3.3. 开机自启"></a>1.3.3. 开机自启</h3><p>我们也可以通过配置来实现开机自启。</p><p>首先，新建一个系统服务文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi /etc/systemd/system/redis.service<br></code></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs conf">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br>ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>然后重载系统服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl daemon-reload<br></code></pre></td></tr></table></figure><p>现在，我们可以用下面这组命令来操作redis了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>systemctl start redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止</span><br>systemctl stop redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span><br>systemctl restart redis<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看状态</span><br>systemctl status redis<br></code></pre></td></tr></table></figure><p>执行下面的命令，可以让redis开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl enable redis<br></code></pre></td></tr></table></figure><h1 id="2-Redis客户端"><a href="#2-Redis客户端" class="headerlink" title="2. Redis客户端"></a>2. Redis客户端</h1><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p><ul><li>命令行客户端</li><li>图形化桌面客户端</li><li>编程客户端</li></ul><h2 id="2-1-Redis命令行客户端"><a href="#2-1-Redis命令行客户端" class="headerlink" title="2.1. Redis命令行客户端"></a>2.1. Redis命令行客户端</h2><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">redis-cli [options] [commonds]<br></code></pre></td></tr></table></figure><p>其中常见的options有：</p><ul><li><code>-h 127.0.0.1</code>：指定要连接的redis节点的IP地址，默认是127.0.0.1</li><li><code>-p 6379</code>：指定要连接的redis节点的端口，默认是6379</li><li><code>-a 123321</code>：指定redis的访问密码</li></ul><p>其中的commonds就是Redis的操作命令，例如：</p><ul><li><code>ping</code>：与redis服务端做心跳测试，服务端正常会返回<code>pong</code></li></ul><p>不指定commond时，会进入<code>redis-cli</code>的交互控制台：</p><p><img src="/20221103120000/image-20211211110439353.png" alt="redis-cli"></p><h2 id="2-2-图形化桌面客户端"><a href="#2-2-图形化桌面客户端" class="headerlink" title="2.2. 图形化桌面客户端"></a>2.2. 图形化桌面客户端</h2><p>GitHub上的大神编写了Redis的图形化桌面客户端，👉<a href="https://github.com/uglide/RedisDesktopManager">项目地址</a>。</p><p>不过该仓库提供的是RedisDesktopManager的源码，并未提供windows安装包。</p><p>不过可以在👉<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">这个仓库</a>可以找到安装包。</p><p><img src="/20221103120000/image-20211211111351885.png" alt="Redis的图形化桌面客户端下载"></p><h3 id="2-2-1-安装"><a href="#2-2-1-安装" class="headerlink" title="2.2.1. 安装"></a>2.2.1. 安装</h3><p>下载Redis的图形化桌面客户端后，解压缩，运行安装程序即可安装：</p><p><img src="/20221103120000/image-20211214154938770.png" alt="Redis的图形化桌面客户端压缩包"></p><p><img src="/20221103120000/image-20211214155123841.png" alt="客户端安装程序"></p><p>安装完成后，在安装目录下找到rdm.exe文件：</p><p><img src="/20221103120000/image-20211211110935819.png" alt="客户端启动程序"></p><p>双击即可运行：</p><p><img src="/20221103120000/image-20211214155406692.png" alt="RDM-GUI"></p><h3 id="2-2-2-建立连接"><a href="#2-2-2-建立连接" class="headerlink" title="2.2.2. 建立连接"></a>2.2.2. 建立连接</h3><p>点击左上角的<code>连接到Redis服务器</code>按钮：</p><p><img src="/20221103120000/image-20211214155424842.png" alt="连接redis"></p><p>在弹出的窗口中填写Redis服务信息：</p><p><img src="/20221103120000/image-20211211111614483.png" alt="连接redis"></p><p>点击测试连接，如果无法连接，需要检查：</p><ul><li><p>redis的ip配置是否有限制，即：<code>redis.conf</code> 文件中的 <code>bind</code> 配置。</p></li><li><p>访问的虚拟机ip是否正确（如果前面是用远程连接工具操作的，可以排除该项）</p></li><li><p>可能是Linux的防火墙限制（新安装的一般是这个问题），请参考以下方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">打开防火墙6379端口号</span><br>firewall-cmd --zone=public --permanent --add-port=6379/tcp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">防火墙重新载入</span><br>firewall-cmd --reload<br></code></pre></td></tr></table></figure></li></ul><p>点击确定后，在左侧菜单会出现这个链接：</p><p><img src="/20221103120000/image-20211214155804523.png" alt="连接redis"></p><p>点击即可建立连接了：</p><p><img src="/20221103120000/image-20211214155849495.png" alt="连接redis"></p><p>Redis默认有16个仓库，编号从0至15.  通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。</p><p>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 选择 0号库</span><br>select 0<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题</title>
    <link href="/20221102120000/"/>
    <url>/20221102120000/</url>
    
    <content type="html"><![CDATA[<h1 id="虚拟机中CentOS-7如何固定IP地址以及无法访问外网问题"><a href="#虚拟机中CentOS-7如何固定IP地址以及无法访问外网问题" class="headerlink" title="虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题"></a>虚拟机中CentOS 7如何固定IP地址以及无法访问外网问题</h1><blockquote><p>本文主要介绍：</p><p>在虚拟机中的CentOS 7如何配置固定IP地址（动态ip有时候会比较麻烦），</p><p>以及 出现 百度ping不通时问题的解决方案。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">测试外网网络连接情况</span><br>ping www.baidu.com<br></code></pre></td></tr></table></figure><p>如果出现<code>ping: www.baidu.com: Name or service not known </code> 或者 <code>ping: www.baidu.com: 未知的名称或服务</code> 的报错，需要修改一下网络配置：</p><p><em>（说明：设置固定IP也是同样的方案）</em></p><h2 id="1-修改windows的虚拟机网络配置"><a href="#1-修改windows的虚拟机网络配置" class="headerlink" title="1. 修改windows的虚拟机网络配置"></a>1. 修改windows的虚拟机网络配置</h2><p>找到 <em><strong>控制面板 - 网络和Internet - 网络链接</strong></em> 中的 <em><strong>VMnet8</strong></em>，右键查看属性，选择<em><strong>IPv4</strong></em>双击查看，修改为静态的。</p><p>要注意的是：这边的IP地址需要跟虚拟机中配置的网关在同一网段。</p><p><img src="/20221102120000/image-20221202171537537.png" alt="windows下的虚拟机的网络配置1"></p><p><img src="/20221102120000/image-20221202171637623.png" alt="windows下的虚拟机的网络配置2"><img src="/20221102120000/image-20221202171745167.png" alt="windows下的虚拟机的网络配置3"></p><p>通过 <em><strong>cmd</strong></em> 命令我们也可以看到VMnet8的配置情况：</p><p><img src="/20221102120000/image-20221202174810342.png" alt="windows下的虚拟机的网络配置4"></p><h2 id="2-修改一下虚拟机网络配置"><a href="#2-修改一下虚拟机网络配置" class="headerlink" title="2. 修改一下虚拟机网络配置"></a>2. 修改一下虚拟机网络配置</h2><p>选择菜单：<em><strong>编辑 - 虚拟网络编辑器</strong></em></p><p><img src="/20221102120000/image-20221202170729796.png" alt="虚拟机网络配置"></p><p><img src="/20221102120000/image-20221202170600947.png" alt="虚拟机网络配置(记住4的子网掩码和网关配置)"></p><h2 id="3-修改CentOS的网络配置"><a href="#3-修改CentOS的网络配置" class="headerlink" title="3. 修改CentOS的网络配置"></a>3. 修改CentOS的网络配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改CentOS的网络配置（如果文件内容为空请检查是否存在该文件）</span><br>vi /etc/sysconfig/network-scripts/ifcfg-ens33<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改内容</span><br>IPADDR=192.168.200.123 #centOS的ip地址<br>NETMASK=255.255.255.0 #虚拟机中配置的子网掩码<br>GATEWAY=192.168.200.2 #虚拟机中配置的网关<br></code></pre></td></tr></table></figure><p><img src="/20221102120000/image-20221202171259344.png" alt="CentOS 7网络配置"></p><p>修改后重启网络服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">重启网络服务</span><br>service network restart<br></code></pre></td></tr></table></figure><p>再测试是否能ping通百度服务器，应该是可以了的。</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>虚拟机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
      <tag>Linux</tag>
      
      <tag>虚拟机</tag>
      
      <tag>IP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA初始化设置</title>
    <link href="/20221101120001/"/>
    <url>/20221101120001/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注：有能力请支持正版。</p></blockquote><h1 id="根据对应版本进行激活"><a href="#根据对应版本进行激活" class="headerlink" title="根据对应版本进行激活"></a>根据对应版本进行激活</h1><h2 id="2021-1"><a href="#2021-1" class="headerlink" title="2021.1"></a>2021.1</h2><p>通过开发者zhile.io的插件*** eval-reset*** 无限重置试用时间的方式激活。</p><h2 id="2019-04"><a href="#2019-04" class="headerlink" title="2019.04"></a>2019.04</h2><p>通用 Activation code：（到2089年）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">3</span>AGXEJXFK9-eyJsaWNlbnNlSWQiOiIzQUdYRUpYRks5IiwibGljZW5zZWVOYW1lIjoiaHR0cHM6Ly96aGlsZS5pbyIsImFzc2lnbmVlTmFtZSI6IiIsImFzc2lnbmVlRW1haWwiOiIiLCJsaWNlbnNlUmVzdHJpY3Rpb24iOiIiLCJjaGVja0NvbmN1cnJlbnRVc2UiOmZhbHNlLCJwcm9kdWN0cyI6W3siY29kZSI6IklJIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkFDIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9LHsiY29kZSI6IkRQTiIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJQUyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJHTyIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJETSIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJDTCIsImZhbGxiYWNrRGF0ZSI6IjIwODktMDctMDciLCJwYWlkVXBUbyI6IjIwODktMDctMDcifSx7ImNvZGUiOiJSUzAiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUkQiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUEMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUk0iLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiV1MiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREIiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiREMiLCJmYWxsYmFja0RhdGUiOiIyMDg5LTA3LTA3IiwicGFpZFVwVG8iOiIyMDg5LTA3LTA3In0seyJjb2RlIjoiUlNVIiwiZmFsbGJhY2tEYXRlIjoiMjA4OS0wNy0wNyIsInBhaWRVcFRvIjoiMjA4OS0wNy0wNyJ9XSwiaGFzaCI6IjEyNzk2ODc3LzAiLCJncmFjZVBlcmlvZERheXMiOjcsImF1dG9Qcm9sb25nYXRlZCI6ZmFsc2UsImlzQXV0b1Byb2xvbmdhdGVkIjpmYWxzZX0=-WGTHs6XpDhr+uumvbwQPOdlxWnQwgnGaL4eRnlpGKApEEkJyYvNEuPWBSrQkPmVpim<span class="hljs-regexp">/8Sab6HV04Dw3IzkJT0yTc29sPEXBf69+7y6Jv718FaJu4MWfsAk/</span>ZGtNIUOczUQ0iGKKnSSsfQ<span class="hljs-regexp">/3UoMv0q/y</span>Jcfvj+me5Zd<span class="hljs-regexp">/gfaisCCMUaGjB/</span>lWIPpEPzblDtVJbRexB1MALrLCEoDv3ujcPAZ7xWb54DiZwjYhQvQ+CvpNNF2jeTku7lbm5v+BoDsdeRq7YBt9ANLUKPr2DahcaZ4gctpHZXhG96IyKx232jYq9jQrFDbQMtVr3E+GsCekMEWSD<span class="hljs-regexp">//</span>dLT+HuZdc1sAIYrw-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5ndaik1GD0nyTdqkZgURQZGW+RGxCdBITPXIwpjhhaD0SXGa4XSZBEBoiPdY6XV6pOfUJeyfi9dXsY4MmT0D+sKoST3rSw96xaf9FXPvOjn4prMTdj3Ji3CyQrGWeQU2nzYqFrp1QYNLAbaViHRKuJrYHI6GCvqCbJe0LQ8qqUiVMA9wG<span class="hljs-regexp">/PQwScpNmTF9Kp2Iej+Z5OUxF33zzm+vg/</span>nYV31HLF7fJUAplI<span class="hljs-regexp">/1nM+ZG8K+AXWgYKChtknl3sW9PCQa3a3imPL9GVToUNxc0wcuTil8mqveWcSQCHYxsIaUajWLpFzoO2AhK4mfYBSStAqEjoXRTuj17mo8Q6M2SHOcwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl/</span>GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQBonMu8oa3vmNAa4RQP8gPGlX3SQaA3WCRUAj6Zrlk8AesKV1YSkh5D2l+yUk6njysgzfr1bIR5xF8eup5xXc4<span class="hljs-regexp">/G7NtVYRSMvrd6rfQcHOyK5UFJLm+8utmyMIDrZOzLQuTsT8NxFpbCVCfV5wNRu4rChrCuArYVGaKbmp9ymkw1PU6+HoO5i2wU3ikTmRv8IRjrlSStyNzXpnPTwt7bja19ousk56r40SmlmC04GdDHErr0ei2UbjUua5kw71Qn9g02tL9fERI2sSRjQrvPbn9INwRWl5+k05mlKekbtbu2ev2woJFZK4WEXAd/</span>GaAdeZZdumv8T2idDFL7cAirJwcrbfpawPeXr52oKTPnXfi0l5+g9Gnt<span class="hljs-regexp">/wfiXCrPElX6ycTR6iL3GC2VR4jTz6YatT4Ntz59/</span>THOT7NJQhr6AyLkhhJCdkzE2cob<span class="hljs-regexp">/KouVp4ivV7Q3Fc6HX7eepHAAF/</span>DpxwgOrg9smX6coXLgfp0b1RU2u<span class="hljs-regexp">/tUNID04rpNxTMueTtrT8WSskqvaJd3RH8r7cnRj6Y2hltkja82HlpDURDxDTRvv+krbwMr26SB/</span><span class="hljs-number">40</span>BjpMUrDRCeKuiBahC0DCoU<span class="hljs-regexp">/4+ze1l94wVUhdkCfL0GpJrMSCDEK+XEurU18Hb7WT+ThXbkdl6VpFdHsRvqAnhR2g4b+Qzgidmuky5NUZVfEaZqV/g</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA初始化设置</title>
    <link href="/20221101120000/"/>
    <url>/20221101120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章主要是介绍一些个人常用的idea设置，用于后续初始化idea后进行一些常规设置。</p><p>说明：文章中使用的idea版本为：<code>2021.3.3</code></p></blockquote><h1 id="1-全局设置"><a href="#1-全局设置" class="headerlink" title="1. 全局设置"></a>1. 全局设置</h1><p>全局设置打开方式：启动页-Customize-All settings…</p><p>（如果是打开项目后再进行设置的话是仅对项目有效）</p><p><img src="/20221101120000/image-20221209111557607.png" alt="全局设置"></p><h2 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h2><p>Editor&gt;File encoding</p><p><img src="/20221101120000/image-20221209110958561.png" alt="编码设置"></p><h2 id="自动导包设置"><a href="#自动导包设置" class="headerlink" title="自动导包设置"></a>自动导包设置</h2><p>Editor&gt;Auto import</p><p><img src="/20221101120000/image-20221209111818715.png" alt="自动导包设置"></p><h2 id="项目文件窗口不显示-idea-和-iml-文件"><a href="#项目文件窗口不显示-idea-和-iml-文件" class="headerlink" title="项目文件窗口不显示 .idea 和 *.iml 文件"></a>项目文件窗口不显示 .idea 和 *.iml 文件</h2><p>Editor&gt;File types，在tab中选择 <code>ignored files and folders</code></p><p><img src="/20221101120000/image-20221209112202384.png" alt="项目文件窗口不显示 .idea 和 *.iml 文件"></p><h2 id="Maven-设置"><a href="#Maven-设置" class="headerlink" title="Maven 设置"></a>Maven 设置</h2><p><img src="/20221101120000/image-20221209112516304.png" alt="Maven 设置"></p><h2 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h2><p><img src="/20221101120000/image-20221209112600157.png" alt="自动编译"></p><h2 id="忽略大小写，进行提示"><a href="#忽略大小写，进行提示" class="headerlink" title="忽略大小写，进行提示"></a>忽略大小写，进行提示</h2><p>Editor&gt;General&gt;Code completion</p><p><img src="/20221101120000/image-20221209112724902.png" alt="忽略大小写，进行提示"></p><h2 id="鼠标控制编辑区字体大小"><a href="#鼠标控制编辑区字体大小" class="headerlink" title="鼠标控制编辑区字体大小"></a>鼠标控制编辑区字体大小</h2><p>Editor&gt;General，Mouse Control</p><p><img src="/20221101120000/image-20221209113038919.png" alt="鼠标控制编辑区字体大小"></p><h1 id="2-非全局设置（项目设置）"><a href="#2-非全局设置（项目设置）" class="headerlink" title="2. 非全局设置（项目设置）"></a>2. 非全局设置（项目设置）</h1><p>在项目窗口，File&gt;Settings…</p><p><img src="/20221101120000/image-20221209113546160.png" alt="非全局设置"></p><h1 id="3-常用插件"><a href="#3-常用插件" class="headerlink" title="3. 常用插件"></a>3. 常用插件</h1><ul><li><p>ide-eval-reset，商店无法搜索到，可通过设置插件库地址为 <a href="https://plugins.zhile.io/">https://plugins.zhile.io</a> 获取。</p><p>注意：<em><strong>2021.3以及之后</strong></em> 的idea版本已无法使用。</p></li><li><p>MyBatis Log，可以完整输出带参数的sql语句，结合ide-eval-reset插件可以一直试用。</p></li><li><p>MyBatisCodeHelperPro (Marketplace Edition)，结合ide-eval-reset插件可以一直试用。</p></li><li><p>Alibaba Java Coding Guidelines，阿里巴巴代码检查工具。</p></li><li><p>CamelCase，代码驼峰转换工具。</p></li><li><p>HighlightBracketPair，用不同颜色标记前后括号、引号等成对符号。</p></li><li><p>Key Promoter X，快捷键提示工具。</p></li><li><p>Maven Helper，可以查看maven依赖。</p></li><li><p>Translation，翻译插件。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA设置</tag>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客网站搭建（Hexo+Github Page）</title>
    <link href="/20220101010101/"/>
    <url>/20220101010101/</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章主要介绍如何通过 Hexo 和 Github Page 来搭建博客网站。</p></blockquote><h2 id="1-安装NodeJS"><a href="#1-安装NodeJS" class="headerlink" title="1. 安装NodeJS"></a>1. 安装NodeJS</h2><ul><li><p>由于Hexo是基于Node.js驱动的一款博客框架，所以需要安装NodeJS，<a href="https://nodejs.org/zh-cn/">官网下载地址</a>。</p><p>如果下载下载较慢，可以尝试<a href="http://nodejs.cn/download/current/">这个链接</a>。</p></li><li><p>安装完执行命令 <code>node -v</code> 和 <code>npm -v</code> 查看是否安装成功（出现版本号即为安装成功）。</p></li></ul><p><img src="/20220101010101/image-20221119000442361.png" alt="查看NodeJS版本信息"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h2><ul><li><p>下载git，<a href="https://git-scm.com/">Git下载地址</a>。</p></li><li><p>注册github账号。</p></li><li><p>Git配置，打开git bash：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">全局配置用户信息：用户名和邮箱。将会为git提交时的默认的用户信息。如果不需要可以暂时不配置。</span><br>git config --global user.name &quot;名称&quot;<br>git config --global user.email &quot;github邮箱&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置列表</span><br>git config --list<br></code></pre></td></tr></table></figure></li><li><p>安装完执行命令 <code>git --version</code> 确认git安装是否成功（出现版本号即为安装成功）。</p></li></ul><p><img src="/20220101010101/image-20221119001545371.png" alt="查看Git版本信息"></p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3. 安装Hexo"></a>3. 安装Hexo</h2><ul><li><p>以上环境准备好了之后，就可以使用 npm 开始安装 Hexo 了，在命令行输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><img src="/20220101010101/image-20221119001332746.png" alt="安装hexo-cli"></p></li><li><p>Hexo安装完成后，选择一个需要放置博客文件的文件夹，这里我选择D盘的doc文件夹，进入文件夹中，右键后选择“Git Bash Here”打开命令行终端。</p><p><img src="/20220101010101/image-20221119004605442.png" alt="image-20221119004605442"></p></li><li><p>输入命令，创建一个名为 <em>MyBlog</em> 的文件夹并初始化相关信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo init MyBlog<br>cd MyBlog<br>npm install<br></code></pre></td></tr></table></figure></li><li><p>如果以上命令执行过程中都没有报错的话，那么就算安装成功了，接着运行  <code>hexo s</code> 命令来启动项目（其中 s 是 server 的缩写，我这里就输入全拼），启动成功就能看到访问的地址了 <code>http://localhost:4000/</code> （注意：这里不能通过 Ctrl+C 来复制，从提示可以看出这是终止服务的快捷键，可以右键Copy）</p><p><img src="/20220101010101/image-20221119005719242.png" alt="image-20221119005719242"></p><p><img src="/20220101010101/image-20221119010141249.png" alt="image-20221119010141249"></p></li></ul><h3 id="3-1-Hexo-主题修改（以NexT主题为例）"><a href="#3-1-Hexo-主题修改（以NexT主题为例）" class="headerlink" title="3.1 Hexo 主题修改（以NexT主题为例）"></a>3.1 Hexo 主题修改（以NexT主题为例）</h3><ul><li><p><a href="https://hexo.io/themes/">官方主题页</a>。</p></li><li><p>这里我们以较多用户使用的 <em>NexT主题</em> 配置为例，在主题页搜索 <em>next</em> ，选择 <em>NexT</em> 主题，就能进入 Github 页面，就可以看到具体的使用说明文档了。</p><p><img src="/20220101010101/image-20221119011310831.png" alt="主题搜索"></p></li></ul><p><img src="/20220101010101/image-20221119011531221.png" alt="NexT主题"></p><ul><li><p>进入前面创建的 <em>MyBlog</em> 文件夹，打开 <em>git bash</em> 命令窗口，通过以下命令安装主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-theme-next<br></code></pre></td></tr></table></figure><p>或者直接将主题包复制下来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/next-theme/hexo-theme-next themes/next<br></code></pre></td></tr></table></figure><p><em>两种主题安装方式任选一种就行，我这边选择的是第二种，第二条命令是将主题包直接复制到  <strong>MyBlog</strong> 的 <strong>themes&#x2F;next</strong> 文件目录中（比较通用的一种主题安装方式）。Hexo中，themes就是存放主题配置的目录。</em></p><p><img src="/20220101010101/image-20221119013012747.png" alt="image-20221119013012747"></p></li><li><p>主题下载成功后，打开 <em>MyBlog</em> 目录下的 <em><strong>_config.yml</strong></em> 文件（可以使用记事本打开），找到 <em><strong>theme</strong></em> 配置，修改为新的主题名称，主题名称同 <em>themes</em> 下的文件夹名。</p><p><strong>注意，这边的yml的配置，所以冒号后面一定要记得加空格。</strong></p><p><img src="/20220101010101/image-20221121161352813.png" alt="image-20221121161352813"></p></li><li><p>修改之后在 <em>git bash</em> 命令行中执行 <code>hexo g</code> 命令（g 是 generate 的缩写），然后再使用命令 <code>hexo s</code> 启动，再访问 <code>http://localhost:4000/</code> 就能看到新的主题了。</p></li></ul><h3 id="3-2-Hexo-主题配置文件"><a href="#3-2-Hexo-主题配置文件" class="headerlink" title="3.2 Hexo 主题配置文件"></a>3.2 Hexo 主题配置文件</h3><ul><li><p>通过修改 Hexo 主题我们知道了，在 <em><strong>themes</strong></em> 文件目录中的文件夹就是对应的主题，所以如果要修改主题的一些配置，我们就要修改<strong>主题的文件夹中</strong>的 <em><strong>_config.yml</strong></em> 文件。</p><p><img src="/20220101010101/image-20221119015827992.png" alt="image-20221119015827992"></p></li></ul><h2 id="4-将博客部署到Github上"><a href="#4-将博客部署到Github上" class="headerlink" title="4. 将博客部署到Github上"></a>4. 将博客部署到Github上</h2><ul><li><p>进入<a href="https://github.com/">Github官网</a>进行账号注册。</p></li><li><p>账号注册成功后，建立一个新的仓库，github仅能使用一个同名仓库的代码作为一个静态站点，所以仓库名一定要是： <code>用户名.github.io</code></p><p><img src="/20220101010101/image-20221121104502552.png" alt="image-20221121104502552"></p></li><li><p>配置SSH key，要使用git工具需要先配置一下SSH key，为部署本地博客到Github做准备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">非全局配置，仅当前项目生效</span><br>git config user.name &quot;用户名&quot;<br>git config user.email &quot;邮箱地址&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ssh key，这个必须是github的注册邮箱</span><br>ssh-keygen -t rsa -C &quot;git注册邮箱&quot;<br></code></pre></td></tr></table></figure></li><li><p>查看 SSH key 公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>Github上配置 SSH key </p><p>点击头像 -&gt; settings -&gt; SSH and GPG keys，New SSH key，将查看到的  SSH key 公钥内容全部复制粘贴进去。</p></li><li><p>测试连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure></li><li><p>修改 <em>MyBolg</em> 的配置文件 <code>_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/binbiubiu/binbiubiu.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure></li><li><p>安装发布插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure></li><li><p>博客项目部署到github</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">清除缓存数据（可选，建议发布前清一下）</span><br>hexo clean<br><span class="hljs-meta prompt_"># </span><span class="language-bash">先生成项目</span><br>hexo g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">再部署到github</span><br>hexo d<br></code></pre></td></tr></table></figure></li><li><p>访问网站 <code>用户名.github.io</code></p></li></ul><h2 id="5-写文章"><a href="#5-写文章" class="headerlink" title="5. 写文章"></a>5. 写文章</h2><ul><li><p>在 <em>MyBlog</em> 中通过命令行创建文章的 <em>.md</em> 文件</p><p>其他的命令可以参考 <a href="https://hexo.io/zh-cn/docs/writing">官方文档</a> 进行操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">hexo new 文章标题<br></code></pre></td></tr></table></figure><p>执行完成后，会在 <em>source&#x2F;_posts</em> 目录下看到一个名为 <em><strong>文章标题.md</strong></em> 的文章文件啦。</p></li></ul><h2 id="6-图片无法显示-图片丢失问题"><a href="#6-图片无法显示-图片丢失问题" class="headerlink" title="6. 图片无法显示 - 图片丢失问题"></a>6. 图片无法显示 - 图片丢失问题</h2><p><img src="/20220101010101/image-20230310012750690.png" alt="图片丢失"></p><blockquote><p>我们在md文件中插入了图片，Hexo生成后打开服务却发现找不到图片，需要修改图片设置。</p></blockquote><h3 id="6-1-解决方案-修改配置文件"><a href="#6-1-解决方案-修改配置文件" class="headerlink" title="6.1 解决方案 - 修改配置文件"></a>6.1 解决方案 - 修改配置文件</h3><ul><li><p>修改 Typora 的设置：文件 -&gt; 偏好设置 -&gt; 图像，修改为“插入图片时<em><strong>复制到指定路径</strong></em>”，下方的选项选择“***.&#x2F;${filename}***”（即：当前md文件路径对应的同名文件夹下，如果没有，会自动创建）。</p><img src="/20220101010101/image-20221121165950895.png" alt="image-20221121165950895" style="zoom:80%;"></li></ul><img src="/20220101010101/image-20221121170352273.png" alt="image-20221121170352273" style="zoom: 80%;"><p><img src="/20220101010101/image-20221121170814999.png" alt="同名图片资源文件夹"></p><ul><li><p>修改Hexo配置。</p><p>修改 <em><strong>MyBlog&#x2F;_config.yml</strong></em> 文件中的 <em><strong>post_asset_folder</strong></em> 的值为 <em><strong>true</strong></em>。</p><p><img src="/20220101010101/image-20221121172551535.png" alt="image-20221121172551535"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">安装图片插件</span><br>npm install https://github.com/CodeFalling/hexo-asset-image --save<br></code></pre></td></tr></table></figure><p>同样地，在 Hexo 目录的 <em><strong>source&#x2F;_posts</strong></em> 目录中，创建md文件的同名文件夹，将图片资源放在这个文件夹中即可，这样在 Hexo 发布时，也同样会把图片资源进行发布。</p></li></ul><p><img src="/20220101010101/image-20221121171140146.png" alt="同名图片资源文件夹"></p><h3 id="6-2-解决方案-配置图床"><a href="#6-2-解决方案-配置图床" class="headerlink" title="6.2 解决方案 - 配置图床"></a>6.2 解决方案 - 配置图床</h3><ul><li><p>利用图床，在使用 Typora 编辑时，将图片上传至图床，md中图片直接访问图床的图片链接。</p><p><a href="https://cjc34.gitee.io/2022/10/26/hexo%E9%85%8D%E5%90%88typora/">方案参考链接</a></p></li></ul><h2 id="7-图片无法显示-文件解析失败"><a href="#7-图片无法显示-文件解析失败" class="headerlink" title="7. 图片无法显示 - 文件解析失败"></a>7. 图片无法显示 - 文件解析失败</h2><p><img src="/20220101010101/image-20230309023012184.png" alt="文件解析失败导致的图片无法显示"></p><p>可能原因：</p><ol><li><p>可能是.md文件的命名包含特殊字符导致的（比如 <code>+</code>、<code>（）</code>、<code>-</code> 、<code>空格</code> 等，hexo在解析时可能会出现异常）</p><p>解决方案：避免文件名中使用特殊字符。</p></li><li><p>其他的 .md 文件中出现了语法错误，导致hexo的整个解析都出现了异常。</p><p>解决方案：需要逐个文件确认，尤其是网上复制过来的文章及内容。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>网站搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客搭建</tag>
      
      <tag>Hexo</tag>
      
      <tag>Github Page</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle数据分区导致的问题</title>
    <link href="/20211215120000/"/>
    <url>/20211215120000/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>现场出现的问题，原有业务不会涉及到某字段的变更，于是对针对该字段进行了分区。</p><p>表字段有分区的情况下，更改表字段的值可能会引发 ORA-14402 异常。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>可以通过该开启行迁移的方式解决：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--开启行迁移</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s_95598_wkst enable <span class="hljs-type">row</span> movement;<br><br><span class="hljs-comment">--关闭行迁移</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> s_95598_wkst disable <span class="hljs-type">row</span> movement;<br></code></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>查询数据所在的分区：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*2、通过 object_id 查询出数据所在分区*/</span><br><span class="hljs-keyword">select</span> a.object_name,<br>       a.object_type,<br>       a.subobject_name,<br>       a.object_id,<br>       a.data_object_id<br>  <span class="hljs-keyword">from</span> dba_objects a<br><span class="hljs-keyword">where</span> object_id <span class="hljs-operator">=</span> (<br>                    <span class="hljs-comment">/*1、通过 rowid 查询数据对应的 object_id*/</span><br>                    <span class="hljs-keyword">select</span> dbms_rowid.rowid_object(rowid) object_id<br>                      <span class="hljs-keyword">from</span> s_wkst t <span class="hljs-comment">/*任意表名与条件*/</span><br>                     <span class="hljs-keyword">where</span> t.app_no <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;2021121400280289&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle数据分区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis中mapper接口的参数不加@Param注解的问题</title>
    <link href="/20210903120000/"/>
    <url>/20210903120000/</url>
    
    <content type="html"><![CDATA[<p>问题描述：👉<a href="https://blog.csdn.net/u011821334/article/details/101763001">查看</a></p><p>解决方案：👉<a href="https://blog.csdn.net/weixin_39587246/article/details/112627261">查看</a></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle查询截至到当前日期月份所在年份的所有月份</title>
    <link href="/20210824120000/"/>
    <url>/20210824120000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> to_number(TO_CHAR(add_months(trunc(sysdate, <span class="hljs-string">&#x27;yy&#x27;</span>), ROWNUM <span class="hljs-operator">-</span> <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;MM&#x27;</span>)) <span class="hljs-keyword">as</span> <span class="hljs-keyword">month</span><br><span class="hljs-keyword">FROM</span> DUAL<br><span class="hljs-keyword">CONNECT</span> <span class="hljs-keyword">BY</span> ROWNUM <span class="hljs-operator">&lt;=</span><br>(<span class="hljs-keyword">select</span> months_between(trunc(sysdate, <span class="hljs-string">&#x27;mm&#x27;</span>), trunc(sysdate, <span class="hljs-string">&#x27;yy&#x27;</span>)) <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">from</span> dual);<br></code></pre></td></tr></table></figure><blockquote><p>当然，也可以指定具体的时间段，只要把months_between里面的两个日期改成具体的日期就行。</p><p>如上面的sql中，trunc(sysdate, ‘mm’)是返回当月的第一天，trunc(sysdate, ‘yy’)是返回当年的第一天。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea中web工程引入js文件不生效的问题</title>
    <link href="/20210823120000/"/>
    <url>/20210823120000/</url>
    
    <content type="html"><![CDATA[<p>【问题描述】</p><p>idea中，因为在项目中新建了一个文件夹分类js文件，但是在浏览器中一直访问不到js文件（404，但路径没有错），清除浏览器缓存和重启项目都没有用（Build Module也没用）。</p><p>【解决方案】</p><p>需要重新构建该目录下的所有文件：</p><p>右键文件夹，选择“Rebuild ‘一级路径.二级路径.新文件夹’（Run 和 Debug 上方的选项）</p><p><img src="/20210823120000/Image.png" alt="重新编译"></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA编译</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle ADD_MONTHS()函数进行月份加减计算</title>
    <link href="/20210818120000/"/>
    <url>/20210818120000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 获取上月同期（上个月同一天）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">SELECT</span> to_char(ADD_MONTHS(TO_DATE(<span class="hljs-string">&#x27;20210228&#x27;</span>,<span class="hljs-string">&#x27;YYYYMMDD&#x27;</span>), <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;YYYYMMDD&#x27;</span>) stat_date <span class="hljs-keyword">FROM</span> dual;<br></code></pre></td></tr></table></figure><p><em>关于 ADD_MONTHS()函数问题：<strong>不管加减月，如果当前日期是当月最后一天，那么结果也会是那个月的最后一天</strong>。</em></p><p><em>比如：0228 减1月就是 0131（而不是0128），加1月就是 0331</em></p><p><em>所以：0328 减1月是 0228，再加1月就是 0331，会与最初值不一致，查询时要避免同时有加减操作，以减小数据偏差。</em></p><p>比如以下sql，做了加一个月再减一个月的操作，理论上结果数据应该是和入参日期一致，但实际不是。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> to_char(ADD_MONTHS(ADD_MONTHS(TO_DATE(<span class="hljs-string">&#x27;20210328&#x27;</span>, <span class="hljs-string">&#x27;YYYYMMDD&#x27;</span>),  <span class="hljs-number">-1</span>), <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;YYYYMMDD&#x27;</span>) stat_date <span class="hljs-keyword">FROM</span> dual;<br></code></pre></td></tr></table></figure><p>比如以下的需求sql：</p><p>查询当月和上个月的同期值：（入参是当月时间，查询上月数据时条件进行了一次 ADD_MONTHS(-1) 计算，当月数据要和上月数据通过时间关联，如果在上月数据的查询结果中对时间进行 ADD_MONTHS(+1) 计算，结果数据误差就会变大。所以需要做的应该是对当月数据的查询结果做 ADD_MONTHS(-1) 计算，数据误差就会小一点）</p><p><img src="/20210818120000/Image.png" alt="ADD_MONTHS函数使用"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CentOS7找不到jar命令</title>
    <link href="/20200810120000/"/>
    <url>/20200810120000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">解决找不到jar命令</span><br>yum install java-devel<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>CentOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unresolved compilation problem解决方案</title>
    <link href="/20200810120000/"/>
    <url>/20200810120000/</url>
    
    <content type="html"><![CDATA[<p>异常信息：</p><p>java.lang.Error: Unresolved compilation problem</p><p>【问题原因】</p><p>由于电脑上面有多个jdk版本，而 <em><strong>Eclipse</strong></em> 使用默认版本，使得 IDE 的Compiler Compliance level 与 Installed JREs 版本不对应而导致错误。</p><p>【解决方案】</p><p>将 IDE 的Compiler Compliance level 与 Installed JREs 版本修改为一致：</p><p>1、Preferences &gt; Java &gt; Compiler</p><p>2、Preferences &gt; Java &gt; Installed JREs</p><p>3、在项目上右键，选择 properties，选择 Java compiler，确认编译等级保持一致。</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Java异常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>win10按win键失效问题</title>
    <link href="/20200810120000/"/>
    <url>/20200810120000/</url>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>win10按win键无反应，win10点击左下角win图标无反应。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>任务栏右键》任务管理器》找到“桌面窗口管理器”》结束该任务》新建任务》dwn》重启电脑。</p><p><img src="/20200810120000/Image.png" alt="任务栏右键打开任务管理器"></p><p><img src="/20200810120000/Image-1678416652735-221.png" alt="找到桌面窗口管理器并结束运行"></p><p><img src="/20200810120000/Image-1678416744457-223.png" alt="运行新任务"></p><p><img src="/20200810120000/Image-1678416764812-225.png" alt="dwn"></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Win10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win10</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git使用手册</title>
    <link href="/20200805120000/"/>
    <url>/20200805120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文主要介绍git的使用入门，包括安装、配置、常用命令。</p></blockquote><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>本文以 Linux环境安装为例，windows系统大同小异。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">linux安装git</span><br>yum install git<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过查看安装版本信息看是否安装成功</span><br>git --version<br></code></pre></td></tr></table></figure><h1 id="2-基本配置"><a href="#2-基本配置" class="headerlink" title="2. 基本配置"></a>2. 基本配置</h1><ol><li><p>基本配置（命令行方式配置）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">配置用户信息：（提交时的用户信息）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">不建议设置 global 的用户属性，建议只在某一本地仓库进行设置</span><br>git config --global user.name &quot;test&quot;<br>git config --global user.email &quot;test@abc.com&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置提交信息编码(值不能有引号,如果有的话在idea里面会报错)</span><br>git config --global gui.encoding utf-8<br>git config --global i18n.commitencoding utf-8<br>git config --global i18n.logoutputencoding utf-8<br>git config --global svn.pathnameencoding utf-8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看配置信息</span><br>git config --global --list<br>git config --list<br></code></pre></td></tr></table></figure></li><li><p>授权配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">生成授信证书</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第一次回车，会让输入生成的文件名，为空就是默认。</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二次回车，会让输入生成的密码，为空就是默认。</span><br>ssh-keygen -t rsa -C test@abc.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">到证书目录查看生成的证书。<span class="hljs-built_in">ls</span> 即可查看到生成的文件。id_rsa 和 id_rsa.pub，.pub文件是公钥，另一个是私钥。</span><br>cd ~/.ssh/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看公钥内容并复制</span><br>cat id_rsa.pub<br></code></pre></td></tr></table></figure><p>然后将git证书配置到代码托管平台（如：github或者gitlab），使得Linux服务器与github之间可以连通。</p><ul><li><p>配置github</p><ol><li><p><a href="https://github.com/">登陆github</a>。</p></li><li><p>点击用户头像 &gt; settings &gt; SSH and GPG keys &gt; 选择 New SSH key。title 自定义，key 为 id_rsa.pub 中的内容，然后单击add。</p></li><li><p>测试连接，回到Linux服务器，命令行输入：ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a></p><p>连接成功后会提示 Hi xxx! You’ve successfully authenticated…</p></li></ol></li><li><p>配置gitlab</p><ol><li><p>进入gitlab平台。</p><p><img src="/20200805120000/image-20230308234558076.png" alt="image-20230308234558076"></p><p><img src="/20200805120000/image-20230308234619650.png" alt="image-20230308234619650"></p></li><li><p>连接测试：ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#108;&#x61;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#x74;&#64;&#x67;&#105;&#x74;&#108;&#x61;&#98;&#x2e;&#x63;&#111;&#x6d;</a></p></li></ol></li></ul></li></ol><h1 id="3-两种Git连接方式"><a href="#3-两种Git连接方式" class="headerlink" title="3. 两种Git连接方式"></a>3. 两种Git连接方式</h1><ol><li><p>SSH链接和HTTPS链接。</p></li><li><p>SSH链接和HTTPS链接的不同：</p><ul><li><p>通过SSH连接获取代码、提交代码的时候不需要输入密码，需要事先配置公钥。</p></li><li><p>通过HTTPS连接获取代码、提交代码的时候需要输入密码。并且：使用该方式进行提交代码的时候，用户需要配有相关权限。</p></li></ul></li></ol><h1 id="4-基本使用命令"><a href="#4-基本使用命令" class="headerlink" title="4. 基本使用命令"></a>4. 基本使用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">初始化当前文件夹为git目录</span><br>git init<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关联远程仓库</span><br>git remote add origin https://gitlab.com/RainbowRing/test.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">推送以建立连接</span><br>git push -u origin master<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看git状态（文件提交状态）</span><br>git status<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加文件到暂存区</span><br>git add 文件路径<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交到本地仓库</span><br>git commit -m &#x27;提交信息&#x27;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">提交代码到远程仓库</span><br>git push<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拉取远程代码到本地（本地新建一个远程仓库的副本）</span><br>git clone git@gitlab.com:xxx/yyy.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>git clone https://gitlab.com/xxx/yyy.git<br><br></code></pre></td></tr></table></figure><h2 id="git中一些参数选项解释"><a href="#git中一些参数选项解释" class="headerlink" title="git中一些参数选项解释"></a>git中一些参数选项解释</h2><table><thead><tr><th align="center">参数</th><th align="center">参数全名</th><th align="center">释意</th></tr></thead><tbody><tr><td align="center">-f</td><td align="center">–force</td><td align="center">强制</td></tr><tr><td align="center">-d</td><td align="center">–delete</td><td align="center">删除</td></tr><tr><td align="center">-D</td><td align="center">–delete –force</td><td align="center">强制删除</td></tr><tr><td align="center">-m</td><td align="center">–move</td><td align="center">移动或重命名</td></tr><tr><td align="center">-M</td><td align="center">–move –force</td><td align="center">强制移动或重命名</td></tr><tr><td align="center">-r</td><td align="center">–remote</td><td align="center">远程</td></tr><tr><td align="center">-a</td><td align="center">–all</td><td align="center">所有</td></tr></tbody></table><h1 id="5-仓库的关联命令"><a href="#5-仓库的关联命令" class="headerlink" title="5. 仓库的关联命令"></a>5. 仓库的关联命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">改变原有关联的远程仓库地址</span><br>git remote set-url origin git@gitlab.com:RainbowRing/fromGithub.git<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示远程origin地址</span><br>git remote show origin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果遇到“fatal: 远程 origin 已经存在。”问题，解决方案：将远程配置删除，重新添加即可</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程配置</span><br>git remote rm origin<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加远程配置</span><br>git remote add origin https://github.com/xxx/xxx.git<br></code></pre></td></tr></table></figure><h1 id="6-分支的基本操作"><a href="#6-分支的基本操作" class="headerlink" title="6. 分支的基本操作"></a>6. 分支的基本操作</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地所有分支</span><br>git branch<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看远程所有分支</span><br>git branch -r  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看本地和远程的所有分支</span><br>git branch -a<br><span class="hljs-meta prompt_"># </span><span class="language-bash">新建分支</span><br>git branch &lt;branchname&gt;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除本地分支</span><br>git branch -d &lt;branchname&gt; // <br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除远程分支，删除后还需推送到服务器</span><br>git branch -d -r &lt;branchname&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除后推送至服务器</span><br>git push origin:&lt;branchname&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重命名本地分支</span><br>git branch -m &lt;oldbranch&gt; &lt;newbranch&gt;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重命名远程分支：</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">1、删除远程待修改分支</span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">2、push本地新分支到远程服务器</span><br></code></pre></td></tr></table></figure><h1 id="7-Git工作模型介绍"><a href="#7-Git工作模型介绍" class="headerlink" title="7. Git工作模型介绍"></a>7. Git工作模型介绍</h1><h2 id="7-1-工作流模型（结合命令）"><a href="#7-1-工作流模型（结合命令）" class="headerlink" title="7.1. 工作流模型（结合命令）"></a>7.1. 工作流模型（结合命令）</h2><p><img src="/20200805120000/image-20230309000444555.png" alt="Git工作流模型"></p><p>Git中代码有三个大环节：暂存区 -&gt; 本地仓库 -&gt; 远程仓库</p><p>对应Git命令说明：</p><ol><li><p>git init</p><p>创建一个本地Repository（也可以通过git clone拉取代码的方式创建一个已经关联远程仓库的本地仓库）。</p></li><li><p>git remote add origin <a href="https://gitlab.com/xxx/yyy.git">https://gitlab.com/xxx/yyy.git</a></p><p>关联远程仓库。</p></li><li><p>git add</p><p>将本地 workspace 内的代码添加近版本控制（即添加进暂存区）。</p></li><li><p>git commit -m ‘提交信息’</p><p>提交到本地仓库（图中Repository）。</p></li><li><p>git push</p><p>提交代码到远程仓库（图中Remote）。</p><p>这也就是svn用户初次使用git会有”为什么要‘提交’两次”的疑惑的原因了。</p></li></ol><h2 id="7-2-版本控制模型"><a href="#7-2-版本控制模型" class="headerlink" title="7.2. 版本控制模型"></a>7.2. 版本控制模型</h2><p><img src="/20200805120000/image-20230309000842601.png" alt="Git版本控制模型"></p><h1 id="8-其他使用问题"><a href="#8-其他使用问题" class="headerlink" title="8. 其他使用问题"></a>8. 其他使用问题</h1><h2 id="git中如何将已commit的代码commit到其它分支"><a href="#git中如何将已commit的代码commit到其它分支" class="headerlink" title="git中如何将已commit的代码commit到其它分支"></a>git中如何将已commit的代码commit到其它分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示已经提交的提交编码</span><br>git log<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换分支</span><br>git checkout develop<br><span class="hljs-meta prompt_"># </span><span class="language-bash">通过版本编码更新代码</span><br>git cherry-pick [commit id]<br></code></pre></td></tr></table></figure><h2 id="git-push详解"><a href="#git-push详解" class="headerlink" title="git push详解"></a>git push详解</h2><p>👉<a href="https://www.cnblogs.com/guojuboke/p/12750842.html">参考链接</a></p><h2 id="IDEA中解决-git-pull-冲突"><a href="#IDEA中解决-git-pull-冲突" class="headerlink" title="IDEA中解决 git pull 冲突"></a>IDEA中解决 git pull 冲突</h2><p>👉<a href="https://blog.csdn.net/qq_32118691/article/details/106015780">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Git命令</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python2安装pip</title>
    <link href="/20200804120000/"/>
    <url>/20200804120000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">python2 安装pip</span><br>wget https://bootstrap.pypa.io/get-pip.py  <br>python get-pip.py  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python第三方模块使用之xlwt</title>
    <link href="/20200729140000/"/>
    <url>/20200729140000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> xlwt<br><br><span class="hljs-comment">#标题样式</span><br>titleStyle = xlwt.XFStyle()<br><span class="hljs-comment">#单元格字体设置</span><br>titleFont = xlwt.Font() <span class="hljs-comment">#字体对象</span><br>titleFont.name = <span class="hljs-string">&quot;宋体&quot;</span> <span class="hljs-comment">#字体名称</span><br>titleFont.bold = <span class="hljs-literal">True</span> <span class="hljs-comment">#加粗</span><br>titleFont.height = <span class="hljs-number">11</span>*<span class="hljs-number">20</span> <span class="hljs-comment">#字号，11表示字体大小，20是一个衡量单位</span><br>titleFont.colour_index = <span class="hljs-number">0x08</span> <span class="hljs-comment">#颜色并不是rgb表示法，可以从XFStyle对象中搜索_colour_map_text获取到</span><br>titleStyle.font = titleFont<br><span class="hljs-comment">#单元格对齐方式</span><br>cellAlign = xlwt.Alignment()<br>cellAlign.horz = <span class="hljs-number">0x02</span><br>cellAlign.vert = <span class="hljs-number">0x01</span><br>titleStyle.alignment = cellAlign<br><br><br><span class="hljs-comment">#1.创建工作簿</span><br>wb = xlwt.Workbook()<br><span class="hljs-comment">#2.创建工作表</span><br>ws = wb.add_sheet(<span class="hljs-string">&quot;Sheet1&quot;</span>)<br><span class="hljs-comment">#3.填充数据(合并单元格)</span><br>ws.write_merge(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&quot;大标题（单元格合并测试）&quot;</span>,titleStyle)<br><span class="hljs-comment">#4.数据定义</span><br>data = ((<span class="hljs-string">&quot;小标题1&quot;</span>,<span class="hljs-string">&quot;小标题2&quot;</span>,<span class="hljs-string">&quot;小标题3&quot;</span>),<br>        (<span class="hljs-string">&quot;值11&quot;</span>,<span class="hljs-string">&quot;值12&quot;</span>,<span class="hljs-string">&quot;值13&quot;</span>),<br>        (<span class="hljs-string">&quot;值21&quot;</span>,<span class="hljs-string">&quot;值22&quot;</span>,<span class="hljs-string">&quot;值23&quot;</span>)<br>        )<br><span class="hljs-comment">#5.数据写入单元格。（enumerate表示包装类，添加了索引）</span><br><span class="hljs-keyword">for</span> row, item <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data):<br>    <span class="hljs-keyword">for</span> col, val <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(item):<br>        ws.write(row + <span class="hljs-number">2</span>, col, val)<br><span class="hljs-comment">#6.保存生成文件(只支持xls格式)</span><br>wb.save(<span class="hljs-string">&quot;test.xls&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python第三方模块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python进阶</title>
    <link href="/20200729140000/"/>
    <url>/20200729140000/</url>
    
    <content type="html"><![CDATA[<h1 id="函数使用"><a href="#函数使用" class="headerlink" title="函数使用"></a>函数使用</h1><h2 id="把函数作为参数"><a href="#把函数作为参数" class="headerlink" title="把函数作为参数"></a>把函数作为参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 把函数作为参数</span><br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_sqrt</span>(<span class="hljs-params">x, y, f</span>):<br>    <span class="hljs-keyword">return</span> f(x) + f(y)<br><span class="hljs-built_in">print</span> add(<span class="hljs-number">25</span>, <span class="hljs-number">9</span>, math.sqrt)<br></code></pre></td></tr></table></figure><h2 id="python内置高级函数"><a href="#python内置高级函数" class="headerlink" title="python内置高级函数"></a>python内置高级函数</h2><h3 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># map()函数：它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</span><br><br><span class="hljs-comment"># 例1、通过map()函数将不规范的英文名字列表转规范</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">format_name</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>].upper() + s[<span class="hljs-number">1</span>:].lower()<br><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">map</span>(format_name, [<span class="hljs-string">&#x27;adam&#x27;</span>, <span class="hljs-string">&#x27;LISA&#x27;</span>, <span class="hljs-string">&#x27;barT&#x27;</span>])<br><br><span class="hljs-comment"># 例2、把list的每个元素都作平方</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x*x<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">map</span>(fn, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br><span class="hljs-comment"># 结果：[1, 4, 9, 10, 25, 36, 49, 64, 81]</span><br></code></pre></td></tr></table></figure><h3 id="reduce-函数"><a href="#reduce-函数" class="headerlink" title="reduce()函数"></a>reduce()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># reduce()函数：接收参数为一个函数 f，一个list。reduce()对list的每个元素反复调用函数f，并返回最终结果值。</span><br><span class="hljs-comment"># 例1：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><span class="hljs-built_in">print</span> reduce(f, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>])<br><span class="hljs-comment"># 计算过程：</span><br><span class="hljs-comment"># 先计算头两个元素：f(1, 3)，结果为4；</span><br><span class="hljs-comment"># 再把结果和第3个元素计算：f(4, 5)，结果为9；</span><br><span class="hljs-comment"># 再把结果和第4个元素计算：f(9, 7)，结果为16；</span><br><span class="hljs-comment"># 再把结果和第5个元素计算：f(16, 9)，结果为25；</span><br><span class="hljs-comment"># 由于没有更多的元素了，计算结束，返回结果25。</span><br><br><span class="hljs-comment"># reduce()还可以接收第3个可选参数，作为计算的初始值。</span><br>reduce(f, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], <span class="hljs-number">100</span>)<br><span class="hljs-comment"># 第一轮计算就是：f(100, 1)</span><br></code></pre></td></tr></table></figure><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># filter()函数：接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。</span><br><span class="hljs-comment"># 例1，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_odd</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">filter</span>(is_odd, [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">17</span>])<br><span class="hljs-comment"># 结果：[1, 7, 9, 17]</span><br><br><br><span class="hljs-comment"># 例2，删除 None 或者空字符串： s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。当rm为空时，默认删除空白符（包括&#x27;\n&#x27;, &#x27;\r&#x27;, &#x27;\t&#x27;, &#x27; &#x27;)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_not_empty</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> s <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(s.strip()) &gt; <span class="hljs-number">0</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">filter</span>(is_not_empty, [<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;  &#x27;</span>, <span class="hljs-string">&#x27;END&#x27;</span>])<br><span class="hljs-comment"># 结果：[&#x27;test&#x27;, &#x27;str&#x27;, &#x27;END&#x27;]</span><br><br><br><span class="hljs-comment"># 用filter()过滤出1~100中平方根是整数的数</span><br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_sqr</span>(<span class="hljs-params">x</span>):<br>    r = <span class="hljs-built_in">int</span>(math.sqrt(x))<br>    <span class="hljs-keyword">return</span> r*r==x<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">filter</span>(is_sqr, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>))<br></code></pre></td></tr></table></figure><h3 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted()函数"></a>sorted()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sorted()函数:可以接收一个list和一个自定义的排序函数</span><br><span class="hljs-built_in">sorted</span>([<span class="hljs-number">36</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">21</span>])<br><br><span class="hljs-comment"># 自定义比较函数：传入两个待比较的元素 x, y，如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0。</span><br><span class="hljs-comment"># 注意：字符串默认按照ASCII码大小来比较，&#x27;Z&#x27;的ASCII码比&#x27;a&#x27;小，即大写的字母会排在前面。</span><br><span class="hljs-comment"># 倒序排序</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">reversed_cmp</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">if</span> x &gt; y:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> x &lt; y:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-built_in">sorted</span>([<span class="hljs-number">36</span>, <span class="hljs-number">5</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>, <span class="hljs-number">21</span>], reversed_cmp)<br><br><span class="hljs-comment"># 返回函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_prod</span>(<span class="hljs-params">lst</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lazy_prod</span>():<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x,y</span>):<br>            <span class="hljs-keyword">return</span> x * y<br>        <span class="hljs-keyword">return</span> reduce(f, lst, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> lazy_prod<br><br>f = calc_prod([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><span class="hljs-built_in">print</span> f()<br></code></pre></td></tr></table></figure><h3 id="python-中的闭包"><a href="#python-中的闭包" class="headerlink" title="python 中的闭包"></a>python 中的闭包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python 中的闭包</span><br><span class="hljs-comment"># 希望一次返回3个函数，分别计算1x1,2x2,3x3。但实际结果：全部都是 9，原因就是当count()函数返回了3个函数时，这3个函数所引用的变量 i 的值已经变成了3。由于f1、f2、f3并没有被调用，所以，此时他们并未计算 i*i</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>():<br>    fs = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>():<br>             <span class="hljs-keyword">return</span> i*i<br>        fs.append(f)<br>    <span class="hljs-keyword">return</span> fs<br>f1, f2, f3 = count()<br><span class="hljs-comment"># 修改后：f函数可以正确地返回一个闭包g，g所引用的变量j不是循环变量，因此将正常执行。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>():<br>    fs = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">j</span>):<br>            <span class="hljs-keyword">def</span> <span class="hljs-title function_">g</span>():<br>                <span class="hljs-keyword">return</span> j*j<br>            <span class="hljs-keyword">return</span> g<br>        r = f(i)<br>        fs.append(r)<br>    <span class="hljs-keyword">return</span> fs<br>f1, f2, f3 = count()<br><span class="hljs-built_in">print</span> f1(), f2(), f3()<br></code></pre></td></tr></table></figure><h3 id="python-中的匿名函数-lambda-表达式"><a href="#python-中的匿名函数-lambda-表达式" class="headerlink" title="python 中的匿名函数 lambda 表达式"></a>python 中的匿名函数 lambda 表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python 中的匿名函数 lambda 表达式</span><br><span class="hljs-comment"># 匿名函数有个限制，就是只能有一个表达式，不写return，返回值就是该表达式的结果。</span><br><span class="hljs-comment"># 以map()函数为例：lambda x: x * x  实际上代替了一个计算 x*x 的函数</span><br><span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x * x, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>])<br></code></pre></td></tr></table></figure><h3 id="无参数decorator"><a href="#无参数decorator" class="headerlink" title="无参数decorator"></a>无参数decorator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 无参数decorator</span><br><span class="hljs-comment"># decorator 本质上就是一个高阶函数，它接收一个函数作为参数，然后，返回一个新函数。使用 decorator 用Python提供的 @ 语法</span><br><span class="hljs-comment"># 即：对于加了@xxx 的函数本身进行功能扩展</span><br><br><span class="hljs-comment"># 例子1</span><br><span class="hljs-comment"># 定义一个 @logCallMethodName 来记录被调用的函数名</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logCallMethodName</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;call &#x27;</span> + f.__name__ + <span class="hljs-string">&#x27;()...&#x27;</span><br>        <span class="hljs-keyword">return</span> f(x)<br>    <span class="hljs-keyword">return</span> fn<br><br><span class="hljs-comment"># 对一个实现阶乘的函数添加 @logCallMethodName</span><br><span class="hljs-meta">@logCallMethodName</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x,y: x*y, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>))<br><br><span class="hljs-comment"># 调用函数</span><br><span class="hljs-built_in">print</span> factorial(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 输出内容</span><br>call factorial()...<br><span class="hljs-number">3628800</span><br><br><span class="hljs-comment"># 但是被加@logCallMethodName 的函数必须是只能有一个参数，以下的代码就会报错</span><br><span class="hljs-meta">@logCallMethodName</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-keyword">return</span> x + y<br><span class="hljs-built_in">print</span> add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 如果要自适应任何参数定义的函数，可以利用Python的 *args 和 **kw，保证任意个数的参数总是能正常调用：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">*args, **kw</span>):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;call &#x27;</span> + f.__name__ + <span class="hljs-string">&#x27;()...&#x27;</span><br>        <span class="hljs-keyword">return</span> f(*args, **kw)<br>    <span class="hljs-keyword">return</span> fn<br><br><br><span class="hljs-comment"># 例子2</span><br><span class="hljs-comment"># @performance，它可以打印出函数调用的时间。</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># 声明@</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">performance</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">*args, **kw</span>):<br>        startTime = time.time()<br>        r = f(*args, **kw)<br>        endTime = time.time()<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;call %s() in %fs&#x27;</span> %(f.__name__, (endTime - startTime))<br>        <span class="hljs-keyword">return</span> r<br>    <span class="hljs-keyword">return</span> fn<br><br><span class="hljs-comment"># 给函数添加 @</span><br><span class="hljs-meta">@performance</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x,y: x*y, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>))<br><span class="hljs-comment"># 函数调用</span><br><span class="hljs-built_in">print</span> factorial(<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h3 id="带参数decorator"><a href="#带参数decorator" class="headerlink" title="带参数decorator"></a>带参数decorator</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 带参数decorator</span><br><span class="hljs-comment"># 对于以下的装饰函数，可以发现，对于被装饰的函数，log打印的语句是不能变的（除了函数名）。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">x</span>):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;call &#x27;</span> + f.__name__ + <span class="hljs-string">&#x27;()...&#x27;</span><br>        <span class="hljs-keyword">return</span> f(x)<br>    <span class="hljs-keyword">return</span> fn<br><span class="hljs-comment"># 希望打印出&#x27;[INFO] call xxx()...&#x27;，有的函数不太重要，希望打印出&#x27;[DEBUG] call xxx()...&#x27;，这时，log函数本身就需要传入&#x27;INFO&#x27;或&#x27;DEBUG&#x27;这样的参数</span><br><span class="hljs-comment"># 类似于：</span><br><span class="hljs-meta">@log(<span class="hljs-params"><span class="hljs-string">&#x27;DEBUG&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    ...<br><br>上面的写法简单翻译过来就是：<br>log_decorator = log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>)<br>my_func = log_decorator(my_func)<br>又相当于：<br>log_decorator = log(<span class="hljs-string">&#x27;DEBUG&#x27;</span>)<br><span class="hljs-meta">@log_decorator</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_func</span>():<br>    ...<br><br><span class="hljs-comment"># 于是有了如下的三层嵌套的代码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">prefix</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">log_decorator</span>(<span class="hljs-params">f</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kw</span>):<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;[%s] %s()...&#x27;</span> % (prefix, f.__name__)<br>            <span class="hljs-keyword">return</span> f(*args, **kw)<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> log_decorator<br><br><span class="hljs-meta">@log(<span class="hljs-params"><span class="hljs-string">&#x27;DEBUG&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-built_in">print</span> test()<br><br><span class="hljs-comment"># 拆分开就是：</span><br><span class="hljs-comment"># 标准decorator:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log_decorator</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kw</span>):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;[%s] %s()...&#x27;</span> % (prefix, f.__name__)<br>        <span class="hljs-keyword">return</span> f(*args, **kw)<br>    <span class="hljs-keyword">return</span> wrapper<br><span class="hljs-keyword">return</span> log_decorator<br><span class="hljs-comment"># 返回decorator:</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">prefix</span>):<br>    <span class="hljs-keyword">return</span> log_decorator(f)<br><span class="hljs-comment"># 拆开之后调用会失败，因为在3层嵌套的decorator定义中，最内层的wrapper引用了最外层的参数prefix，所以，把一个闭包拆成普通的函数调用会比较困难。</span><br><br><span class="hljs-comment"># 例子2</span><br><span class="hljs-comment"># 将 无参数decorator 中例子2修改为参数输入 &#x27;s&#x27;或&#x27;ms&#x27; 来控制输出的调用时间单位。</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">performance</span>(<span class="hljs-params">unit</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perf_decorator</span>(<span class="hljs-params">f</span>):<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kw</span>):<br>            startTime = time.time()<br>            r = f(*args, **kw)<br>            endTime = time.time()<br>            costTime = (endTime - startTime) * <span class="hljs-number">1000</span> <span class="hljs-keyword">if</span> unit == <span class="hljs-string">&#x27;ms&#x27;</span> <span class="hljs-keyword">else</span> endTime - startTime<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;call %s() in %f %s&#x27;</span> % (f.__name__, costTime, unit)<br>            <span class="hljs-keyword">return</span> r<br>        <span class="hljs-keyword">return</span> wrapper<br>    <span class="hljs-keyword">return</span> perf_decorator<br><br><span class="hljs-meta">@performance(<span class="hljs-params"><span class="hljs-string">&#x27;ms&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">return</span> reduce(<span class="hljs-keyword">lambda</span> x,y: x*y, <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>))<br><br><span class="hljs-built_in">print</span> factorial(<span class="hljs-number">10</span>)<br><br><span class="hljs-comment"># 需要注意的是：decorator 装饰函数返回的函数是不同于原有函数的，</span><br><span class="hljs-comment"># 我们可以在上面最终调用的地方输出函数名：</span><br><span class="hljs-built_in">print</span> factorial.__name__<br><span class="hljs-comment"># 会发现，实际输出的是 wrapper，即：我们在装饰函数内所返回的函数名。</span><br><span class="hljs-comment"># 这时Python内置的 functools 可以把原函数的一些属性复制到新函数中（@functools.wraps应该作用在返回的新函数上。）</span><br><span class="hljs-keyword">import</span> time, functools<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">performance</span>(<span class="hljs-params">unit</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">perf_decorator</span>(<span class="hljs-params">f</span>):<br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">f</span>)</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">wrapper</span>(<span class="hljs-params">*args, **kw</span>):<br>            ...<br></code></pre></td></tr></table></figure><h3 id="偏函数functools-partial"><a href="#偏函数functools-partial" class="headerlink" title="偏函数functools.partial"></a>偏函数functools.partial</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 偏函数functools.partial</span><br><span class="hljs-comment"># 当一个函数有很多参数时，调用者就需要提供多个参数。如果减少参数个数，就可以简化调用者的负担。</span><br><span class="hljs-comment"># 比如，int()函数可以把字符串转换为整数，当仅传入字符串时，int()函数默认按十进制转换：</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12345&#x27;</span>)<br><span class="hljs-comment"># 但int()函数还提供额外的base参数，默认值为10。如果传入base参数，就可以做 N 进制的转换：</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12345&#x27;</span>, base=<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;12345&#x27;</span>, <span class="hljs-number">16</span>)<br><span class="hljs-comment"># 假设要转换大量的二进制字符串，每次都传入int(x, base=2)非常麻烦，于是，我们想到，可以定义一个int2()的函数，默认把base=2传进去：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">int2</span>(<span class="hljs-params">x, base=<span class="hljs-number">2</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(x, base)<br><span class="hljs-built_in">print</span> int2(<span class="hljs-string">&#x27;1000000&#x27;</span>)<br><span class="hljs-comment"># functools.partial就是帮助我们创建一个偏函数的，不需要我们自己定义int2()，可以直接使用下面的代码创建一个新的函数int2：</span><br><span class="hljs-keyword">import</span> functools<br>int2 = functools.partial(<span class="hljs-built_in">int</span>, base=<span class="hljs-number">2</span>)<br>int2(<span class="hljs-string">&#x27;1000000&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><h2 id="区分包和普通目录"><a href="#区分包和普通目录" class="headerlink" title="区分包和普通目录"></a>区分包和普通目录</h2><p>包下面一定要有一个__init__.py文件（且每一层都要有）,哪怕是一个空文件。</p><p><img src="/20200729140000/Image.png" alt="Image"></p><h2 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h2><p>要使用一个模块，我们必须首先导入该模块。Python使用import语句导入一个模块。例如，导入系统自带的模块 math：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br></code></pre></td></tr></table></figure><p>如果我们只希望导入用到的math模块的某几个函数，而不是所有函数，可以用下面的语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> <span class="hljs-built_in">pow</span>, sin, log<br></code></pre></td></tr></table></figure><p>如果遇到名字冲突怎么办？比如math模块有一个log函数，logging模块也有一个log函数，如果同时使用，如何解决名字冲突？</p><p>如果使用import导入模块名，由于必须通过模块名引用函数名，因此不存在冲突：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math, logging<br><span class="hljs-built_in">print</span> math.log(<span class="hljs-number">10</span>)   <span class="hljs-comment"># 调用的是math的log函数</span><br>logging.log(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;something&#x27;</span>)   <span class="hljs-comment"># 调用的是logging的log函数</span><br></code></pre></td></tr></table></figure><p>如果使用 from…import 导入 log 函数，势必引起冲突。这时，可以给函数起个“别名”来避免冲突：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> log<br><span class="hljs-keyword">from</span> logging <span class="hljs-keyword">import</span> log <span class="hljs-keyword">as</span> logger   <span class="hljs-comment"># logging的log现在变成了logger</span><br><span class="hljs-built_in">print</span> log(<span class="hljs-number">10</span>)   <span class="hljs-comment"># 调用的是math的log</span><br>logger(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;import from logging&#x27;</span>)   <span class="hljs-comment"># 调用的是logging的log</span><br></code></pre></td></tr></table></figure><p>所以导入模块的方式可总结如下四种（以导入Python的os.path模块为例，该模块提供了 isdir() 和 isfile()函数，判断指定的目录和文件是否存在）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> os.path<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> os.path <span class="hljs-keyword">import</span> isdir, isfile<br></code></pre></td></tr></table></figure><p>python中动态导入模块（导入模块时出现异常的处理）</p><p>如果导入的模块不存在，Python解释器会报 ImportError 错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>ImportError: No module named something<br></code></pre></td></tr></table></figure><p>例如：Python 2.6&#x2F;2.7提供了json 模块，但Python 2.5以及更早版本没有json模块，不过可以安装一个simplejson模块，这两个模块提供的函数签名和功能都一模一样。</p><p>所以导入方式可以以如下的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">except</span> ImportError:<br>    <span class="hljs-keyword">import</span> simplejson <span class="hljs-keyword">as</span> json<br></code></pre></td></tr></table></figure><h3 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">方式1</span><br>easy_install<br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式2(推荐,已内置到2.7+)</span><br>pip install<br></code></pre></td></tr></table></figure><p>第三方模块可以从以下地址获取到：</p><p><a href="https://pypi.org/">https://pypi.org/</a></p><h1 id="类与实例"><a href="#类与实例" class="headerlink" title="类与实例"></a>类与实例</h1><h2 id="定义类并创建实例"><a href="#定义类并创建实例" class="headerlink" title="定义类并创建实例"></a>定义类并创建实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>按照 Python 的编程习惯，类名以大写字母开头，紧接着是(object)，表示该类是从哪个类继承下来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">pass</span><br>xiaoming = Person()<br>xiaohong = Person()<br><span class="hljs-built_in">print</span> xiaoming<br><span class="hljs-built_in">print</span> xiaohong<br><span class="hljs-built_in">print</span> xiaoming == xiaohong<br></code></pre></td></tr></table></figure><p>实例赋值：（两个 Person 类的实例的 list，并给两个实例的 name 赋值，然后按照 name 进行排序。）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">pass</span><br><br>p1 = Person()<br>p1.name = <span class="hljs-string">&#x27;Bart&#x27;</span><br><br>p2 = Person()<br>p2.name = <span class="hljs-string">&#x27;Adam&#x27;</span><br><br>p3 = Person()<br>p3.name = <span class="hljs-string">&#x27;Lisa&#x27;</span><br><br>L1 = [p1, p2, p3]<br>L2 = <span class="hljs-built_in">sorted</span>(L1, <span class="hljs-keyword">lambda</span> p1, p2: cmp(p1.name, p2.name))<br><br><span class="hljs-built_in">print</span> L2[<span class="hljs-number">0</span>].name<br><span class="hljs-built_in">print</span> L2[<span class="hljs-number">1</span>].name<br><span class="hljs-built_in">print</span> L2[<span class="hljs-number">2</span>].name<br></code></pre></td></tr></table></figure><h2 id="初始化实例属性（类似与Java的构造函数）"><a href="#初始化实例属性（类似与Java的构造函数）" class="headerlink" title="初始化实例属性（类似与Java的构造函数）"></a>初始化实例属性（类似与Java的构造函数）</h2><p>在定义 Person 类时，可以为Person类添加一个特殊的__init__()方法，当创建实例时，<strong>init</strong>()方法被自动调用，我们就能在此为每个实例都统一加上以下属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, gender, birth</span>):<br>        self.name = name<br>        self.gender = gender<br>        self.birth = birth<br></code></pre></td></tr></table></figure><p>注意：<strong>init</strong>() 方法的第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法），后续参数则可以自由指定，和定义函数没有任何区别。相应地，创建实例时，就必须要提供除 self 以外的参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">xiaoming = Person(<span class="hljs-string">&#x27;Xiao Ming&#x27;</span>, <span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-string">&#x27;1991-1-1&#x27;</span>)<br>xiaohong = Person(<span class="hljs-string">&#x27;Xiao Hong&#x27;</span>, <span class="hljs-string">&#x27;Female&#x27;</span>, <span class="hljs-string">&#x27;1992-2-2&#x27;</span>)<br></code></pre></td></tr></table></figure><p>访问属性使用 <code>.</code> 操作符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> xiaoming.name<br><span class="hljs-comment"># 输出 &#x27;Xiao Ming&#x27;</span><br><span class="hljs-built_in">print</span> xiaohong.birth<br><span class="hljs-comment"># 输出 &#x27;1992-2-2&#x27;</span><br></code></pre></td></tr></table></figure><p>定义Person类的__init__方法，除了接受 name、gender 和 birth 外，还可接受任意关键字参数，并把他们都作为属性赋值给实例：</p><p>(还可以通过 setattr(self, ‘name’, ‘xxx’) 设置属性。)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, gender, birth, **kw</span>):<br>        self.name = name<br>        self.gender = gender<br>        self.birth = birth<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> kw.iteritems():<br>            <span class="hljs-built_in">setattr</span>(self, k, v)<br>xiaoming = Person(<span class="hljs-string">&#x27;Xiao Ming&#x27;</span>, <span class="hljs-string">&#x27;Male&#x27;</span>, <span class="hljs-string">&#x27;1990-1-1&#x27;</span>, job=<span class="hljs-string">&#x27;Student&#x27;</span>)<br><span class="hljs-built_in">print</span> xiaoming.name<br><span class="hljs-built_in">print</span> xiaoming.job<br></code></pre></td></tr></table></figure><h2 id="对象属性访问控制"><a href="#对象属性访问控制" class="headerlink" title="对象属性访问控制"></a>对象属性访问控制</h2><p>Python对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头(__)，该属性就无法被外部访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, score</span>):<br>        self.name = name<br>        self.__score = score<br><br>p = Person(<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">59</span>)<br><br><span class="hljs-built_in">print</span> p.name<br><span class="hljs-built_in">print</span> p.__score<br></code></pre></td></tr></table></figure><h2 id="python中创建类属性（类似于Java中的静态变量）"><a href="#python中创建类属性（类似于Java中的静态变量）" class="headerlink" title="python中创建类属性（类似于Java中的静态变量）"></a>python中创建类属性（类似于Java中的静态变量）</h2><p>类本身也是一个对象，如果在类上绑定一个属性，则所有实例都可以访问类的属性，并且，所有实例访问的类属性都是同一个！也就是说，实例属性每个实例各自拥有，互相独立，而类属性有且只有一份。</p><p>定义类属性可以直接在 class 中定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    address = <span class="hljs-string">&#x27;Earth&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br></code></pre></td></tr></table></figure><p>获取类属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> Person.address<br><span class="hljs-comment"># =&gt; Earth</span><br></code></pre></td></tr></table></figure><p>对一个实例调用类的属性也是可以访问的，所有实例都可以访问到它所属的类的属性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">p1 = Person(<span class="hljs-string">&#x27;Bob&#x27;</span>)<br>p2 = Person(<span class="hljs-string">&#x27;Alice&#x27;</span>)<br><span class="hljs-built_in">print</span> p1.address<br><span class="hljs-comment"># =&gt; Earth</span><br><span class="hljs-built_in">print</span> p2.address<br><span class="hljs-comment"># =&gt; Earth</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">Person.address = <span class="hljs-string">&#x27;China&#x27;</span><br><span class="hljs-built_in">print</span> p1.address<br><span class="hljs-comment"># =&gt; &#x27;China&#x27;</span><br><span class="hljs-built_in">print</span> p2.address<br><span class="hljs-comment"># =&gt; &#x27;China&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="python中类属性和实例属性名字冲突"><a href="#python中类属性和实例属性名字冲突" class="headerlink" title="python中类属性和实例属性名字冲突"></a>python中类属性和实例属性名字冲突</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    address = <span class="hljs-string">&#x27;Earth&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br><br>p1 = Person(<span class="hljs-string">&#x27;Bob&#x27;</span>)<br>p2 = Person(<span class="hljs-string">&#x27;Alice&#x27;</span>)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Person.address = &#x27;</span> + Person.address<br><br>p1.address = <span class="hljs-string">&#x27;China&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;p1.address = &#x27;</span> + p1.address<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Person.address = &#x27;</span> + Person.address<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;p2.address = &#x27;</span> + p2.address<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">Person.address = Earth<br>p1.address = China<br>Person.address = Earth<br>p2.address = Earth<br></code></pre></td></tr></table></figure><p>我们发现，在设置了 p1.address &#x3D; ‘China’ 后，p1访问 address 确实变成了 ‘China’，但是，Person.address和p2.address仍然是’Earch’，怎么回事？</p><p>原因是 p1.address &#x3D; ‘China’并没有改变 Person 的 address，而是给 p1这个实例绑定了实例属性address ，对p1来说，它有一个实例属性address（值是’China’），而它所属的类Person也有一个类属性address，所以:</p><p>访问 p1.address 时，优先查找实例属性，返回’China’。</p><p>访问 p2.address 时，p2没有实例属性address，但是有类属性address，因此返回’Earth’。</p><p>可见，当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。</p><p>当我们把 p1 的 address 实例属性删除后，访问 p1.address 就又返回类属性的值 ‘Earth’了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">del</span> p1.address<br><span class="hljs-built_in">print</span> p1.address<br><span class="hljs-comment"># =&gt; Earth</span><br></code></pre></td></tr></table></figure><p><em><strong>可见，千万不要在实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。</strong></em></p><h2 id="python中定义实例方法-类似Java中的-getter-x2F-setter-方法"><a href="#python中定义实例方法-类似Java中的-getter-x2F-setter-方法" class="headerlink" title="python中定义实例方法(类似Java中的 getter&#x2F;setter 方法)"></a>python中定义实例方法(类似Java中的 getter&#x2F;setter 方法)</h2><p>一个实例的私有属性就是以__开头的属性，无法被外部访问，那这些属性定义有什么用？</p><p>虽然私有属性无法从外部访问，但是，从类的内部是可以访问的。除了可以定义实例的属性外，还可以定义实例的方法。</p><p>实例的方法就是在类中定义的函数，它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.__name = name<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.__name<br><br>p1 = Person(<span class="hljs-string">&#x27;Bob&#x27;</span>)<br><span class="hljs-built_in">print</span> p1.get_name()  <span class="hljs-comment"># self不需要显式传入</span><br><span class="hljs-comment"># =&gt; Bob</span><br></code></pre></td></tr></table></figure><p>例2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, score</span>):<br>        self.name = name<br>        self.__score = score<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_grade</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.__score &gt;= <span class="hljs-number">80</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;A&#x27;</span><br>        <span class="hljs-keyword">if</span> self.__score &gt;= <span class="hljs-number">60</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;B&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;C&#x27;</span><br><br>p1 = Person(<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">90</span>)<br>p2 = Person(<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-number">65</span>)<br>p3 = Person(<span class="hljs-string">&#x27;Tim&#x27;</span>, <span class="hljs-number">48</span>)<br><br><span class="hljs-built_in">print</span> p1.get_grade()<br><span class="hljs-built_in">print</span> p2.get_grade()<br><span class="hljs-built_in">print</span> p3.get_grade()<br></code></pre></td></tr></table></figure><h2 id="python中定义类方法（类似Java中的静态方法）"><a href="#python中定义类方法（类似Java中的静态方法）" class="headerlink" title="python中定义类方法（类似Java中的静态方法）"></a>python中定义类方法（类似Java中的静态方法）</h2><p>通过标记一个 @classmethod，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 cls</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    __count = <span class="hljs-number">0</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">how_many</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-keyword">return</span> cls.__count<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = name<br>        Person.__count = Person.__count + <span class="hljs-number">1</span><br><br><span class="hljs-built_in">print</span> Person.how_many()<br>p1 = Person(<span class="hljs-string">&#x27;Bob&#x27;</span>)<br><span class="hljs-built_in">print</span> Person.how_many()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python第三方模块使用之xlrd</title>
    <link href="/20200729130000/"/>
    <url>/20200729130000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> xlrd<br><span class="hljs-keyword">import</span> xlwt<br><br><br><span class="hljs-comment">#加载excel文件</span><br>data = xlrd.open_workbook(<span class="hljs-string">&quot;test.xlsx&quot;</span>)<br><br><br><span class="hljs-comment">#操作sheet</span><br><span class="hljs-comment">#判断sheet是否已加载</span><br><span class="hljs-comment"># data.sheet_loaded(0)</span><br><span class="hljs-comment">#关闭sheet</span><br><span class="hljs-comment"># data.unload_sheet(0)</span><br><br><br><span class="hljs-comment"># print(data.sheets())</span><br><span class="hljs-comment"># print(data.sheets()[0])</span><br><span class="hljs-comment"># print(data.sheet_by_index(0))</span><br><span class="hljs-comment"># print(data.sheet_by_name(&quot;Sheet1&quot;))</span><br><span class="hljs-comment"># print(data.sheet_names())</span><br><span class="hljs-comment"># print(data.nsheets)</span><br><br><br><span class="hljs-comment">#操作行</span><br>sheet = data.sheet_by_index(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#获取总有效行数</span><br>sheet.nrows<br><span class="hljs-comment">#访问第一行数据</span><br>sheet.row(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#获取行数据类型(0：空，1：字符串，2：数值)</span><br>sheet.row_types(<span class="hljs-number">0</span>)<br><span class="hljs-comment">#获取单元格value</span><br>sheet.row(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>].value<br><span class="hljs-comment">#获取指定行的所有value</span><br>sheet.row_values(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-comment">#操作列(同行操作)</span><br>sheet.ncols<br>sheet.col(<span class="hljs-number">0</span>)<br>sheet.col_values(<span class="hljs-number">0</span>)<br><br><br><span class="hljs-comment">#操作单元格</span><br><span class="hljs-built_in">print</span>(sheet.cell(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python第三方模块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python第三方模块</title>
    <link href="/20200729120000/"/>
    <url>/20200729120000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看已安装的模块</span><br>pip list<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装第三方模块</span><br>pip install 模块名<br></code></pre></td></tr></table></figure><p>Python第三方模块：</p><table><thead><tr><th align="center">模块名</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">xlrd</td><td align="center">读取excel表格数据</td></tr><tr><td align="center">xlwt</td><td align="center">写入excel表格数据（仅支持xls格式）</td></tr><tr><td align="center">xlsxwriter</td><td align="center">写入excel表格数据（支持xlsx格式，推荐）</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python第三方模块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PyCharm使用</title>
    <link href="/20200729120000/"/>
    <url>/20200729120000/</url>
    
    <content type="html"><![CDATA[<h2 id="导包-x2F-修改编译器版本"><a href="#导包-x2F-修改编译器版本" class="headerlink" title="导包&#x2F;修改编译器版本"></a>导包&#x2F;修改编译器版本</h2><p><img src="/20200729120000/Image.png" alt="导包和修改编译器版本"></p><h2 id="PyCharm常用快捷键"><a href="#PyCharm常用快捷键" class="headerlink" title="PyCharm常用快捷键"></a>PyCharm常用快捷键</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash">编码/开发类：<br><span class="hljs-built_in">shift</span> + enter 开启新的一行<br>ctrl + / 注释<br>ctrl + alt + i 自动缩进<br>ctrl + q 快速查找文档<br>ctrl + <span class="hljs-built_in">shift</span> + +/- 展开/折叠代码块<br>ctrl + alt + space 快速导入<br><br>查找/替换类：<br>ctrl + f 当前文件查找<br>ctrl + r 当前文件查找替换<br>ctrl + <span class="hljs-built_in">shift</span> + f 全局查找<br>ctrl + <span class="hljs-built_in">shift</span> + f 全局替换<br>ctrl + n 查找类的名称<br><br>运行/调试类：<br><span class="hljs-built_in">shift</span> + F10 运行<br><span class="hljs-built_in">shift</span> + F9 调试<br>alt + <span class="hljs-built_in">shift</span> + F10 运行模式配置<br>alt + <span class="hljs-built_in">shift</span> + F9 调试模式配置<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>PyCharm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PyCharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python基础</title>
    <link href="/20200727120000/"/>
    <url>/20200727120000/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-comment"># 设置编码</span><br></code></pre></td></tr></table></figure><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出多个变量(用, 隔开)：字符串, 表达式  =  &#x27;字符串+表达式的值&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;100 + 200 =&#x27;</span>, <span class="hljs-number">100</span> + <span class="hljs-number">200</span><br><br>a = <span class="hljs-string">&#x27;A&#x27;</span><br>b = <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-built_in">print</span> a, <span class="hljs-string">&#x27;--&gt;&#x27;</span>, b<br></code></pre></td></tr></table></figure><h2 id="判断分支"><a href="#判断分支" class="headerlink" title="判断分支"></a>判断分支</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># if-elif-else </span><br>score = <span class="hljs-number">85</span><br><span class="hljs-keyword">if</span> score &gt;= <span class="hljs-number">90</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;excellent&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">80</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;good&#x27;</span><br><span class="hljs-keyword">elif</span> score &gt;= <span class="hljs-number">60</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;passed&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;failed&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># list 声明</span><br>L = [<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>]<br><br><span class="hljs-comment"># list 添加元素 方式1</span><br>L.append(<span class="hljs-string">&#x27;Paul&#x27;</span>)<br><br><span class="hljs-comment"># list 添加元素 方式2</span><br>L.insert(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;Paul&#x27;</span>)<br><br><span class="hljs-comment"># list 删除元素</span><br>L.pop()  <span class="hljs-comment"># 删除最后一个</span><br>L.pop(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 删除第三个</span><br><br><span class="hljs-comment"># list 替换元素</span><br>L[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;Paul&#x27;</span><br><br><span class="hljs-comment"># tuple 中含“可变元素”：list</span><br>t = (<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>])<br>L = t[<span class="hljs-number">2</span>]<br>L[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;X&#x27;</span><br>L[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;Y&#x27;</span><br><span class="hljs-built_in">print</span> t  <span class="hljs-comment"># 可以看到list中的元素被改变了</span><br></code></pre></td></tr></table></figure><h2 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h2><p>tuple：tuple是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># tuple是另一种有序的列表，中文翻译为“ 元组 ”。tuple 和 list 非常类似，但是，tuple一旦创建完毕，就不能修改了。</span><br><span class="hljs-comment"># tuple 声明</span><br>t = (<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>)<br><span class="hljs-comment"># tuple 创建单元素(需要添加一个,)</span><br>t = (<span class="hljs-number">1</span>,)<br></code></pre></td></tr></table></figure><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>dict存储的是键值对形式的数据（无序）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># dict 的声明</span><br>d = &#123;<br>    <span class="hljs-string">&#x27;Adam&#x27;</span>: <span class="hljs-number">95</span>,<br>    <span class="hljs-string">&#x27;Lisa&#x27;</span>: <span class="hljs-number">85</span>,<br>    <span class="hljs-string">&#x27;Bart&#x27;</span>: <span class="hljs-number">59</span><br>&#125;<br><span class="hljs-comment"># 注意：一个 key-value 算一个长度。所以  len(d) 返回的是含有的键值对数</span><br><span class="hljs-comment"># 可以使用d[key] 的形式来查找对应的 value。</span><br><span class="hljs-comment"># 注意: 通过 key 访问 dict 的value，只要 key 存在，dict就返回对应的value。如果key不存在，会直接报错：KeyError。</span><br><span class="hljs-comment"># 要避免 KeyError 发生，有两个办法：</span><br><span class="hljs-comment"># 一是先判断一下 key 是否存在，用 in 操作符：</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Paul&#x27;</span> <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-built_in">print</span> d[<span class="hljs-string">&#x27;Paul&#x27;</span>]<br><span class="hljs-comment"># 二是使用dict本身提供的一个 get 方法，在Key不存在的时候，返回None：</span><br><span class="hljs-built_in">print</span> d.get(<span class="hljs-string">&#x27;Paul&#x27;</span>)<br><br><span class="hljs-comment"># dict作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，都可以作为 key。但是list是可变的，就不能作为 key。</span><br><br><span class="hljs-comment"># dict 更新值</span><br>d[<span class="hljs-string">&#x27;Paul&#x27;</span>] = <span class="hljs-number">72</span><br><br><span class="hljs-comment"># dict 遍历</span><br>d = &#123; <span class="hljs-string">&#x27;Adam&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>: <span class="hljs-number">85</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>: <span class="hljs-number">59</span> &#125;<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-built_in">print</span> key<br></code></pre></td></tr></table></figure><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><p>set存储的是一组不重复的无序元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># set 声明</span><br>s = <span class="hljs-built_in">set</span>([<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>])<br><br><br><span class="hljs-comment"># 判断元素是否存在 set 中</span><br>s = <span class="hljs-built_in">set</span>([<span class="hljs-string">&#x27;Adam&#x27;</span>,<span class="hljs-string">&#x27;Lisa&#x27;</span>,<span class="hljs-string">&#x27;Bart&#x27;</span>])<br>name = <span class="hljs-string">&#x27;Lisa&#x27;</span><br><span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;exists&#x27;</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;not exists&#x27;</span><br><br><br><span class="hljs-comment"># set 遍历</span><br>s = <span class="hljs-built_in">set</span>([<span class="hljs-string">&#x27;Adam&#x27;</span>,<span class="hljs-string">&#x27;Lisa&#x27;</span>,<span class="hljs-string">&#x27;Bart&#x27;</span>])<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span> name<br><br><br><span class="hljs-comment"># 含复杂元素的set</span><br>s = <span class="hljs-built_in">set</span>([(<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-number">95</span>), (<span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-number">85</span>), (<span class="hljs-string">&#x27;Bart&#x27;</span>, <span class="hljs-number">59</span>)])<br><span class="hljs-keyword">for</span> obj <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-built_in">print</span> obj[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;:&#x27;</span>, obj[<span class="hljs-number">1</span>]<br><br><br><span class="hljs-comment"># set 更新: s.add() 添加元素,  s.remove() 删除元素</span><br><span class="hljs-comment"># 注意：如果添加的元素已存在, 不会报错。如果要移除的元素不存在, 就会报错, 所以移除前需要做判断</span><br>s = <span class="hljs-built_in">set</span>([<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Paul&#x27;</span>])<br>L = [<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>, <span class="hljs-string">&#x27;Paul&#x27;</span>]<br><span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> L:<br>    <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> s:<br>        s.remove(name)<br>    <span class="hljs-keyword">else</span>:<br>        s.add(name)<br><span class="hljs-built_in">print</span> s<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 官方函数文档： http://docs.python.org/2/library/functions.html</span><br><span class="hljs-comment"># 命令行通过 help(abs) 可查看abs函数的帮助信息</span><br><span class="hljs-comment"># 在Python中，定义一个函数要使用 def 语句，依次写出函数名、括号、括号中的参数和冒号:，然后，在缩进块中编写函数体，函数的返回值用 return 语句返回。如果没有return语句，函数执行完毕后也会返回结果，只是结果为 None。故return None可以简写为return。另外，可以有一个返回值，也可以有多个返回值（其实就是返回一个tuple）。</span><br><br><span class="hljs-comment"># 定义函数：函数接受一个list, 返回list中每个元素平方的和</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">square_of_sum</span>(<span class="hljs-params">L</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> L:<br>        <span class="hljs-built_in">sum</span> += x * x<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><span class="hljs-built_in">print</span> square_of_sum([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><br><br><span class="hljs-comment"># 定义函数：求一元二次方程的两个解。求根公式：x = (-b±√(b²-4ac)) / 2a</span><br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">quadratic_equation</span>(<span class="hljs-params">a, b, c</span>):<br>    t = math.sqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>    <span class="hljs-keyword">return</span> (-b + t) / (<span class="hljs-number">2</span> * a), ( -b - t )/ (<span class="hljs-number">2</span> * a)<br><br><span class="hljs-built_in">print</span> quadratic_equation(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>)<br><br><br><span class="hljs-comment"># 汉诺塔(递归函数的应用)</span><br><span class="hljs-comment"># 我们对柱子编号为a, b, c，将所有圆盘从a移到c可以描述为：如果a只有一个圆盘，可以直接移动到c；如果a有N个圆盘，可以看成a有1个圆盘（底盘） + (N-1)个圆盘，首先需要把 (N-1) 个圆盘移动到 b，然后，将 a的最后一个圆盘移动到c，再将b的(N-1)个圆盘移动到c。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">n, a, b, c</span>):<br>    <span class="hljs-keyword">if</span> n ==<span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span> a, <span class="hljs-string">&#x27;--&gt;&#x27;</span>, c<br>        <span class="hljs-keyword">return</span><br>    move(n-<span class="hljs-number">1</span>, a, c, b)<br>    <span class="hljs-built_in">print</span> a, <span class="hljs-string">&#x27;--&gt;&#x27;</span>, c<br>    move(n-<span class="hljs-number">1</span>, b, a, c)<br><br>move(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>)<br><br><br><span class="hljs-comment"># 函数定义默认参数。定义一个计算 x 的 n 次方的函数(默认为平方)：</span><br><span class="hljs-comment"># 注意：因为函数的参数按从左到右的顺序匹配，所以默认参数只能定义在必需参数的后面。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">power</span>(<span class="hljs-params">x, n=<span class="hljs-number">2</span></span>):<br>    s = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> n &gt; <span class="hljs-number">0</span>:<br>        n = n - <span class="hljs-number">1</span><br>        s = s * x<br>    <span class="hljs-keyword">return</span> s<br><br>power(<span class="hljs-number">5</span>)<br>power(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>)<br><br><br><span class="hljs-comment"># 函数定义可变参数：参数的名字前面加个 * 号。</span><br><span class="hljs-comment"># 定义一个求平均数的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">average</span>(<span class="hljs-params">*args</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0.0</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(args) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> args:<br>        <span class="hljs-built_in">sum</span> += x<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span> / <span class="hljs-built_in">len</span>(args)<br><br><span class="hljs-built_in">print</span> average()<br><span class="hljs-built_in">print</span> average(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span> average(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h2 id="list切片"><a href="#list切片" class="headerlink" title="list切片"></a>list切片</h2><p>取list中指定范围符合条件的元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。如果第一个索引是0，还可以省略：L[:3]</span><br><span class="hljs-comment"># 只用一个 : ，表示从头到尾：L[:]</span><br><span class="hljs-comment"># 切片操作还可以指定第三个参数：第三个参数表示每N个取一个，上面的 L[::2] 会每两个元素取出一个来，也就是隔一个取一个。</span><br><span class="hljs-comment"># 第一个参数省略：从0开始取。 第二个参数省略：到最后一个。</span><br><br><span class="hljs-comment"># 创建一个数列：[1, 2, 3, ..., 100]</span><br>L = <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>)<br><span class="hljs-comment"># 1. 前10个数；2. 3的倍数；3. 不大于50的5的倍数。</span><br><span class="hljs-built_in">print</span> L[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>]<br><span class="hljs-built_in">print</span> L[<span class="hljs-number">2</span>::<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span> L[<span class="hljs-number">4</span>:<span class="hljs-number">50</span>:<span class="hljs-number">5</span>]<br><br><br><span class="hljs-comment"># 字符串切片</span><br><span class="hljs-comment"># 字符串可以看作是一个list</span><br><span class="hljs-comment"># 将首字母转大写的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">firstCharUpper</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> s[<span class="hljs-number">0</span>].upper() + s[<span class="hljs-number">1</span>:]<br><br><span class="hljs-built_in">print</span> firstCharUpper(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-built_in">print</span> firstCharUpper(<span class="hljs-string">&#x27;sunday&#x27;</span>)<br><span class="hljs-built_in">print</span> firstCharUpper(<span class="hljs-string">&#x27;september&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="集合迭代"><a href="#集合迭代" class="headerlink" title="集合迭代"></a>集合迭代</h2><p>集合是指包含一组元素的数据结构，已经介绍的包括：</p><ol><li>有序集合：list，tuple，str和unicode；</li><li>无序集合：set</li><li>无序集合并且具有 key-value 对：dict</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 遍历添加索引： enumerate(L)函数。索引从0开始</span><br>L = [<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>, <span class="hljs-string">&#x27;Paul&#x27;</span>]<br><span class="hljs-keyword">for</span> index, name <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(L):<br>    <span class="hljs-built_in">print</span> index, <span class="hljs-string">&#x27;-&#x27;</span>, name<br><br><br><span class="hljs-comment"># zip()函数可以把两个 list 变成一个 list</span><br>L = [<span class="hljs-string">&#x27;Adam&#x27;</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>, <span class="hljs-string">&#x27;Paul&#x27;</span>]<br><span class="hljs-keyword">for</span> index, name <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(L)+<span class="hljs-number">1</span>), L):<br>    <span class="hljs-built_in">print</span> index, <span class="hljs-string">&#x27;-&#x27;</span>, name<br><br><br><span class="hljs-comment"># dict 迭代</span><br><span class="hljs-comment"># 迭代值 values() 和 itervalues()。 values() 方法实际上把一个 dict 转换成了包含 value 的list。但是 itervalues() 方法不会转换，它会在迭代过程中依次从 dict 中取出 value，所以 itervalues() 方法比 values() 方法节省了生成 list 所需的内存。</span><br><br>d = &#123; <span class="hljs-string">&#x27;Adam&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>: <span class="hljs-number">85</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>: <span class="hljs-number">59</span> &#125;<br><br><span class="hljs-comment"># 迭代 key</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-built_in">print</span> k<br><br><span class="hljs-comment"># 迭代 value 方法1</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> d.values():<br>    <span class="hljs-built_in">print</span> v<br><br><span class="hljs-comment"># 迭代 value 方法2</span><br><span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> d.itervalues():<br>    <span class="hljs-built_in">print</span> v<br><br><span class="hljs-comment"># 迭代dict的 key 和 value。d.items() 和  iteritems()。iteritems() 不把dict转换成list，而是在迭代过程中不断给出 tuple，所以， iteritems() 不占用额外的内存。</span><br><span class="hljs-comment"># 给定 dict，打印出 name : score，最后再打印出平均分 average : score。</span><br>d = &#123; <span class="hljs-string">&#x27;Adam&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>: <span class="hljs-number">85</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>: <span class="hljs-number">59</span>, <span class="hljs-string">&#x27;Paul&#x27;</span>: <span class="hljs-number">74</span> &#125;<br><span class="hljs-built_in">sum</span> = <span class="hljs-number">0.0</span><br><span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> d.iteritems():<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span> + v<br>    <span class="hljs-built_in">print</span> k, <span class="hljs-string">&#x27;:&#x27;</span>, v<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;average&#x27;</span>, <span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-built_in">sum</span> / <span class="hljs-built_in">len</span>(d)<br></code></pre></td></tr></table></figure><h2 id="生成列表"><a href="#生成列表" class="headerlink" title="生成列表"></a>生成列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例1、生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span><br><span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)<br><br><span class="hljs-comment"># 例2、生成[1x1, 2x2, 3x3, ..., 10x10]</span><br><span class="hljs-comment"># 方式1</span><br>L = []<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>):<br>    L.append(x * x)<br><span class="hljs-comment"># 方式2(列表生成式)</span><br><span class="hljs-built_in">print</span> [x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>)]<br><br><span class="hljs-comment"># 例3、生成列表 [1x2, 3x4, 5x6, 7x8, ..., 99x100]</span><br><span class="hljs-built_in">print</span> [x * (x + <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)]<br></code></pre></td></tr></table></figure><h2 id="复杂表达式"><a href="#复杂表达式" class="headerlink" title="复杂表达式"></a>复杂表达式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 用给定数据生成表格，对于没有及格的同学，请把分数标记为红色。</span><br>d = &#123; <span class="hljs-string">&#x27;Adam&#x27;</span>: <span class="hljs-number">95</span>, <span class="hljs-string">&#x27;Lisa&#x27;</span>: <span class="hljs-number">85</span>, <span class="hljs-string">&#x27;Bart&#x27;</span>: <span class="hljs-number">59</span> &#125;<br><span class="hljs-comment"># 1、首先，定义生成行元素的方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_tr</span>(<span class="hljs-params">name, score</span>):<br>    <span class="hljs-keyword">if</span> score &lt; <span class="hljs-number">60</span>:<br>        <span class="hljs-comment"># 字符串可以通过 % 进行格式化，用指定的参数替代 %s。</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td style=&quot;color:red&quot;&gt;%s&lt;/td&gt;&lt;/tr&gt;&#x27;</span> % (name, score)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;&#x27;</span> % (name, score)<br><span class="hljs-comment"># 2、用表达式生成表格(行数据)</span><br>tds = [generate_tr(name, score) <span class="hljs-keyword">for</span> name, score <span class="hljs-keyword">in</span> d.iteritems()]<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&lt;table border=&quot;1&quot;&gt;&#x27;</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Score&lt;/th&gt;&lt;tr&gt;&#x27;</span><br><span class="hljs-comment"># 字符串的join()方法可以把一个 list 拼接成一个字符串。</span><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;\n&#x27;</span>.join(tds)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&lt;/table&gt;&#x27;</span><br><br><br><br><span class="hljs-comment"># 表达式追加添加条件：在for循环之后添加</span><br><span class="hljs-comment"># 例1、指定范围内偶数的平方</span><br>[x * x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>) <span class="hljs-keyword">if</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># 例2、编写一个函数，它接受一个 list，然后把list中的所有字符串变成大写后返回，非字符串元素将被忽略。isinstance(x, str) 可以判断变量 x 是否是字符串。字符串的 upper() 方法可以返回大写的字母。</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">toUppers</span>(<span class="hljs-params">L</span>):<br>    <span class="hljs-keyword">return</span> [x.upper() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> L <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(x, <span class="hljs-built_in">str</span>)]<br><span class="hljs-built_in">print</span> toUppers([<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>, <span class="hljs-number">101</span>])<br><br><span class="hljs-comment"># 列表生成式嵌套</span><br><span class="hljs-comment"># 例3、利用3层for循环的列表生成式，找出对称的 3 位数。例如，121 就是对称数，因为从右到左倒过来还是 121。</span><br><span class="hljs-built_in">print</span> [<span class="hljs-number">100</span> * n1 + <span class="hljs-number">10</span> * n2 + n3 <span class="hljs-keyword">for</span> n1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> n2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">for</span> n3 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">if</span> n1==n3]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins自动化部署脚本</title>
    <link href="/20200723120000/"/>
    <url>/20200723120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记录学习Jenkins时，自动化部署tomcat项目的脚本。</p></blockquote><p>新建 <code>deploy.sh</code> 脚本文件，文件内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span><br><br>: &lt;&lt; !<br><span class="hljs-comment"># 该注释内容为 Jenkins 中的shell脚本</span><br><span class="hljs-comment"># 表示部署完不kill进程，jenkins进程执行完会自动关闭，否则会把启动的server也关闭掉，</span><br>BUILD_ID=DONTKILLME<br><span class="hljs-comment"># 加载配置文件</span><br>. /etc/profile<br><br><span class="hljs-comment"># 执行.sh前需要配置(声明)如下参数</span><br><span class="hljs-comment"># 1.服务器上项目路径(不含项目名)</span><br><span class="hljs-built_in">export</span> PROJECT_PATH=/root/projects/java<br><br><span class="hljs-comment"># 2.项目名,同xxx.git</span><br><span class="hljs-built_in">export</span> PROJECT_NAME=LoginDemo<br><br><span class="hljs-comment"># 3.tomcat在服务机器上的全路径</span><br><span class="hljs-built_in">export</span> TOMCAT_PATH=/root/apache-tomcat-9.0.37<br><br><span class="hljs-comment"># 4.运行部署脚本（项目目录下的deploy.sh脚本）</span><br>sh <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span>/deploy.sh<br>!<br><br><br><span class="hljs-comment"># 以下为脚本正文：</span><br><span class="hljs-comment"># 自动部署步骤：git同步最新代码 &gt; maven 打包 &gt; 停止tomcat &gt; 部署应用 &gt; 启动tomcat</span><br><br><span class="hljs-comment">### 函数:关闭tomcat(也可以通过 Tomcat 的 shutdown.sh 停止服务器)</span><br><span class="hljs-function"><span class="hljs-title">killTomcat</span></span>()<br>&#123;<br>    pid=`ps -ef|grep tomcat|grep java|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>`<br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;tomcat Id list :<span class="hljs-variable">$pid</span>&quot;</span><br>    <span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$pid</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]<br>    <span class="hljs-keyword">then</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;no tomcat pid alive&quot;</span><br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-built_in">kill</span> -9 <span class="hljs-variable">$pid</span><br>    <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-comment"># 删除本地旧代码(文件夹)</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span><br><span class="hljs-comment"># 拉取新代码</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$PROJECT_PATH</span><br>git <span class="hljs-built_in">clone</span> git@gitlab.com:RainbowRing/LoginDemo.git<br><br><span class="hljs-comment"># 构建项目</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span><br>mvn clean install<br><br><span class="hljs-comment"># 停止tomcat</span><br>killTomcat<br><br><span class="hljs-comment"># 删除原有工程</span><br><span class="hljs-built_in">rm</span> -f <span class="hljs-variable">$TOMCAT_PATH</span>/webapps/<span class="hljs-variable">$PROJECT_NAME</span>.war<br><br><span class="hljs-comment"># 复制maven打包后的工程到tomcat的webapps目录下</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$PROJECT_PATH</span>/<span class="hljs-variable">$PROJECT_NAME</span>/target/<span class="hljs-variable">$PROJECT_NAME</span>.war <span class="hljs-variable">$TOMCAT_PATH</span>/webapps/<br><br><span class="hljs-comment"># 重命名工程(如果需要的话)</span><br><span class="hljs-comment">#cd $TOMCAT_PATH/webapps/</span><br><span class="hljs-comment">#mv LoginDemo loginDemo</span><br><br><span class="hljs-comment"># 启动Tomcat</span><br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$TOMCAT_PATH</span>/<br>sh bin/startup.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
      <tag>Jenkins脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IE浏览器部分网站中文无法正常显示问题</title>
    <link href="/20200722120000/"/>
    <url>/20200722120000/</url>
    
    <content type="html"><![CDATA[<h1 id="IE浏览器部分网站中文无法正常显示问题"><a href="#IE浏览器部分网站中文无法正常显示问题" class="headerlink" title="IE浏览器部分网站中文无法正常显示问题"></a>IE浏览器部分网站中文无法正常显示问题</h1><p>问题描述：IE浏览器部分网站中文无法正常显示，显示为英文。</p><p>问题说明：由于 IE11 中微软弃用了 zh_CN 语言，进而采用 zh_hans_CN， 造成前台请求后台数据后，前台页面不能正常国际化问题。</p><p>解决方案：</p><ul><li><p>方案1. 修改windows注册表信息。</p><p>新建一个 <code>xxx.reg</code> 文件，内容如下：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">Windows Registry Editor Version <span class="hljs-number">5.00</span><br><br><br>[HKEY_CURRENT_USER\Software\Microsoft\Internet Explorer\International]<br><span class="hljs-string">&quot;AcceptLanguage&quot;</span>=<span class="hljs-string">&quot;zh-CN;zh-Hans-CN,zh-Nans;en-US;en;&quot;</span><br></code></pre></td></tr></table></figure></li></ul><p>​保存后执行注册表文件即可。</p><ul><li><p>方案2. 如果是网站开发人员，可以修改网站的相关国际化配置来解决该问题。</p><p>可参考文章👉<a href="https://blog.csdn.net/juemodanqing/article/details/106226047">IE11 zh_HANS_CN国际化问题</a>。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>IE浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IE浏览器</tag>
      
      <tag>汉化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins使用手册</title>
    <link href="/20200717120000/"/>
    <url>/20200717120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本文介绍Jenkins的安装与使用。</p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>👉<a href="https://www.jenkins.io/">Jenkins官网</a> 的 <a href="https://www.jenkins.io/zh/download/">下载页面</a>。</p><p>windows就下载for windows版本的（这里以windows环境安装为例）。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><img src="/20200717120000/image-20230309002331438.png" alt="Jenkins安装"></p><p>安装完毕后会自动进入登陆页面：</p><p><img src="/20200717120000/image-20230309002401085.png" alt="Jenkins登陆页面"></p><h1 id="配置与使用"><a href="#配置与使用" class="headerlink" title="配置与使用"></a>配置与使用</h1><p>第一次启动你可能会有这样的问题：它会一直在这个登录页面自动刷新。</p><p>主要原因是Jenkins在启动的时候会去加载相关镜像文件，默认的镜像文件配置地址对我们比较不友好（你懂的），这就需要我们手动修改这个文件。</p><h2 id="镜像配置"><a href="#镜像配置" class="headerlink" title="镜像配置"></a>镜像配置</h2><p>在Jenkins安装目录下，找到 <code>hudson.model.UpdateCenter.xml</code> 文件，打开并修改url为：<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></p><p><img src="/20200717120000/image-20230309002900344.png" alt="镜像配置"></p><p><img src="/20200717120000/image-20230309002914803.png" alt="镜像配置"></p><p>修改后需要重启Jenkins服务。</p><p>当然你也有可能遇到端口冲突的问题，那么来修改一下端口吧。</p><h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>在安装目录下找到 <code>Jenkins.xml</code> 文件，这个就是端口配置的文件了。</p><h2 id="启动Jenkins服务"><a href="#启动Jenkins服务" class="headerlink" title="启动Jenkins服务"></a>启动Jenkins服务</h2><p>如果是通过msi方式安装Jenkins的话（比如本安装教程），需要在系统的“服务”中找到Jenkins服务，点击重启即可（可自行百度怎么进入服务管理页面，这里直接用搜索工具进入）</p><p><img src="/20200717120000/image-20230309003131885.png" alt="windows启动Jenkins服务"></p><p><img src="/20200717120000/image-20230309003139392.png" alt="windows启动Jenkins服务"></p><p>重启后再进入登陆页面就可以正常进入了：</p><p><img src="/20200717120000/image-20230309003155681.png" alt="Jenkins首次登录页面"></p><h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><p>第一次登陆时需要修改密码，密码在页面上有提示其文件地址（在安装目录下 <code>\secrets\initialAdminPassword</code> 文件中），打开这个文件就能看到初始化密码了。</p><p><img src="/20200717120000/image-20230309003243071.png" alt="初始化密码"></p><p>将其复制进页面的输入框即可进入自定义Jenkins页面，这里选择第一个“安装推荐的插件”。</p><p><img src="/20200717120000/image-20230309003304652.png" alt="首次插件安装"></p><p><img src="/20200717120000/image-20230309003313434.png" alt="首次插件安装"></p><p>若有部分插件安装失败，可以点“重试”，或者点击“继续”以后再安装。</p><p><img src="/20200717120000/image-20230309003337074.png" alt="首次插件安装"></p><p>点击继续后就进入了初始化账户的页面：</p><p><img src="/20200717120000/image-20230309003350745.png" alt="初始化账户"></p><p>最后一步可能会提示你部分插件重启，那我们就点击重启，也可以手动重启服务。</p><p>重启后的登陆页面就变了：</p><p><img src="/20200717120000/image-20230309003406451.png" alt="登录页面"></p><p>输入刚才配置的账户密码即可进入功能页面了：</p><p><img src="/20200717120000/image-20230309003425900.png" alt="工作台"></p><h2 id="添加插件（自选）"><a href="#添加插件（自选）" class="headerlink" title="添加插件（自选）"></a>添加插件（自选）</h2><p>管理Jenkins &gt; 插件管理 &gt; 可选插件 &gt; 搜索框</p><p><img src="/20200717120000/image-20230309003444965.png" alt="插件安装"></p><p><img src="/20200717120000/image-20230309003449283.png" alt="插件安装"></p><p><img src="/20200717120000/image-20230309003453813-1678293294326-1.png" alt="插件安装"></p><p><img src="/20200717120000/image-20230309003503103.png" alt="插件安装"></p><p>这里我安装了：</p><ul><li>常用插件：Rebuilder、safe restart</li><li>Git相关插件：GitLab、GitLab API  </li><li>SSH相关插件：SSH Agent、SSH</li></ul><h2 id="用户及权限配置"><a href="#用户及权限配置" class="headerlink" title="用户及权限配置"></a>用户及权限配置</h2><h3 id="添加自定义用户"><a href="#添加自定义用户" class="headerlink" title="添加自定义用户"></a>添加自定义用户</h3><p>管理Jenkins &gt; Security &gt; 用户管理 &gt; 新建用户</p><p>新建用户后需要给该用户授权。</p><p>（这里我创建了一个test01用户）</p><h3 id="配置全局安全属性（授权）"><a href="#配置全局安全属性（授权）" class="headerlink" title="配置全局安全属性（授权）"></a>配置全局安全属性（授权）</h3><p>管理Jenkins &gt; Security &gt; Configure Global Security</p><p>在“授权策略”中选择“安全矩阵” &gt; 添加用户&#x2F;组，添加用户后，可以在表格中进行勾选，勾选后点击保存（表格最后面有个全选按钮）。例如：如果不想要给予用户访问系统管理的权限，全勾选后去掉第一项。</p><p><img src="/20200717120000/image-20230309003701457.png" alt="配置全局安全属性（授权）"></p><h2 id="将Linux注册到Jenkins上"><a href="#将Linux注册到Jenkins上" class="headerlink" title="将Linux注册到Jenkins上"></a>将Linux注册到Jenkins上</h2><h3 id="新建节点"><a href="#新建节点" class="headerlink" title="新建节点"></a>新建节点</h3><p>进入Jenkins，管理Jenkins &gt; 管理节点 &gt; 新建节点</p><p>输入name</p><p>远程工作目录：&#x2F;root&#x2F;.jenkins</p><p>​    启动方法：launch slave agents via SSH</p><p>​    主机：linux 的ip地址，</p><p>点击 credentials 下的 add 按钮，添加用户名和密码（linux的账户密码），添加完成后通过下拉框选择</p><p>​    保存</p><p><img src="/20200717120000/image-20230309003740927.png" alt="管理节点"></p><p><img src="/20200717120000/image-20230309003748084.png" alt="新建节点"></p><p>（新版本的启动方式是 launch agents via SSH，需要将 Host Key Verification Strategy 修改为 Non verifying Verification Strategy）</p><h3 id="测试节点"><a href="#测试节点" class="headerlink" title="测试节点"></a>测试节点</h3><p>在jenkins的节点页面，选择上一步新增的节点，点击节点名，进入页面后点击 launch agent 按钮(或者启动代理)即可连接。</p><p><img src="/20200717120000/image-20230309003820212.png" alt="测试节点"></p><p><img src="/20200717120000/image-20230309003825982.png" alt="测试节点"></p><p>节点配置好了，现在开始新建一个任务吧！</p><h2 id="任务创建与构建"><a href="#任务创建与构建" class="headerlink" title="任务创建与构建"></a>任务创建与构建</h2><ol><li><p>在Jenkins主页，新建一个任务 &gt; 构建一个自由风格的软件项目 &gt; OK。</p></li><li><p>在General标签页，勾选 Restrict where this project can be run，在 Label Expression中输入刚才创建的Linux环境的名称（只允许在指定环境上运行）。</p></li><li><p>在构建标签页，增加构建步骤，excute shell，输入要执行的命令（如 ifconfig）。</p></li><li><p>保存。</p></li><li><p>回到Jenkins主页，点击立即构建。</p></li><li><p>执行完毕后，点击下方的执行记录的任务名（如#1），进入任务详情页，点击 console output ，就可以看到刚才的命令（ifconfig）输出了。</p></li></ol><p><img src="/20200717120000/image-20230309003907541.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003913189.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003921720.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003928911.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309003935299.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004004086.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004014886.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004026782.png" alt="任务创建与构建"></p><p><img src="/20200717120000/image-20230309004040680.png" alt="任务创建与构建"></p><h2 id="本次分享中的构建脚本示例"><a href="#本次分享中的构建脚本示例" class="headerlink" title="本次分享中的构建脚本示例"></a>本次分享中的构建脚本示例</h2><p><img src="/20200717120000/image-20230309004059676.png" alt="构建脚本示例"></p><p>另外，Jenkins也可以实现定时任务自动构建（已演示）。</p><p><img src="/20200717120000/image-20230309004138691.png" alt="构建触发器"></p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本次分享中未涉及Jenkins与git持续集成，如果有类似“在提交代码到服务器后能够自动构建“的需求，可网上自行搜索解决方案，这里可以提供一个方案参考：webhook。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Jenkins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS的APP降级</title>
    <link href="/20200526123000/"/>
    <url>/20200526123000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>降级教程参考👉<a href="https://zhuanlan.zhihu.com/p/101541667">原文地址</a></p><p><a href="https://tools.lancely.tech/apple/app-search?country=cn">在线查询app历史版本</a></p></blockquote><h1 id="1-工具准备"><a href="#1-工具准备" class="headerlink" title="1. 工具准备"></a>1. 工具准备</h1><ul><li><p>iTunes，需要12.6.5以下的版本 ，因为12.6.5以上的版本均取消了Apple Store。</p></li><li><p>Fiddler，请求拦截工具，也可使用其他自己熟悉的工具，如HttpWatch、BurpSuite等。</p></li></ul><h1 id="2-配置-Fiddler"><a href="#2-配置-Fiddler" class="headerlink" title="2. 配置 Fiddler"></a>2. 配置 Fiddler</h1><ol><li>打开Fiddler，Tools-Fiddler options-HTTPS-全部打勾✔-导出证书， 证书导出到桌面后，直接双击打开安装即可。</li><li>打开iTunes，连接你的iPhone，登录苹果ID，同时搜索你要降级的应用，进入应用详情页面。（先不点击下载）</li><li>在版本查询网站查询所需要降级的应用的版本号，每个应用版本都对应着不同的版本号。<a href="https://tools.lancely.tech/apple/app-search?country=cn">在线查询app历史版本</a></li></ol><h1 id="3-下载历史版本"><a href="#3-下载历史版本" class="headerlink" title="3. 下载历史版本"></a>3. 下载历史版本</h1><ol><li>我们进入Fiddler工具，点击快捷键<strong>「F11」</strong>，左下角会出现一个红色的<strong>「T」</strong>，Fiddler便开始进行拦截。</li><li>返回iTunes的应用详情页面，点击<strong>「下载」</strong>或者<strong>「获取」</strong>按钮。</li><li>返回Fiddler工具，左侧界面会出现<strong>红色开头的拦截链接</strong>。 （应用链接格式基本为：“字母数字-buy”开头，我这里举例的QQ为p45-buy开头。）</li><li>点击拦截链接之后，再点击右侧界面的「<strong>Inspectors</strong>」—「<strong>TextView</strong>」选项，最后再点击下方的「<strong>Run to completion</strong>」。</li><li>这时左侧就会出现以<strong>p45-buy开头</strong>的链接（QQ为例），再点击一下该链接，出现该应用的最新版本号，我们只需<strong>将最新的版本号更改为降级的版本号</strong>即可。修改完成后，我们再次点击右侧下方的「<strong>Run to completion</strong>」，接着直接关闭Fiddler工具即可。</li><li>返回iTunes，这时可能会提示<strong>“下载错误”</strong>等提示，我们直接忽视它，在搜索栏右侧点击下载页面<strong>重新下载</strong>即可。（如果提示 “ 登陆itunes提示无法连接Apple ID服务器”就不管它，下载列表进度可能没有，但实际上是有在下载。）</li><li>下载完成后，安装包会保存在默认路径中，iTunes打开<strong>「编辑」-「偏好设置」-「高级」</strong>，即可看到应用下载的路径。</li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>APP降级</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IE弹窗可点击（模态框非模态框）</title>
    <link href="/20200513123000/"/>
    <url>/20200513123000/</url>
    
    <content type="html"><![CDATA[<h2 id="IE弹窗可-x2F-不可点击"><a href="#IE弹窗可-x2F-不可点击" class="headerlink" title="IE弹窗可&#x2F;不可点击"></a>IE弹窗可&#x2F;不可点击</h2><blockquote><p>👉<a href="https://blog.csdn.net/iteye_4398/article/details/81689102">参考原文</a></p></blockquote><ul><li><p>方法一：</p><p>设置弹出窗口的 <code>&lt;body&gt;</code>：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;body οnblur=<span class="hljs-string">&quot;self.focus()&quot;</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>方法二：</p><p>用showModalDialog方法建立模式对话框：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script&gt;<br>    function <span class="hljs-title function_">topwin</span><span class="hljs-params">()</span>&#123;<br>        window.showModalDialog(<span class="hljs-string">&quot;D:\window.html&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;dialogWidth:300px;dialogHeight:300px;scroll:no;status:no&quot;</span>)<br>    &#125;<br>&lt;/script&gt;<br>&lt;button onClick=<span class="hljs-string">&quot;topwin()&quot;</span>&gt;打开模态窗口&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>此方法的效果和方法一的效果相同，弹出窗口前端显示，但是不能在其他窗口做任何操作了，也是丢了焦点。</p></li><li><p>方法三：</p><p>用showModelessDialog方法建立无模式对话框：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;script&gt;<br>    function <span class="hljs-title function_">topwin</span><span class="hljs-params">()</span>&#123;<br>        window.showModelessDialog(<span class="hljs-string">&quot;D:\window.html&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;dialogWidth:300px;dialogHeight:300px;scroll:no;status:no&quot;</span>)<br>    &#125;<br>&lt;/script&gt;<br>&lt;button onClick=<span class="hljs-string">&quot;topwin()&quot;</span>&gt;打开非模态窗口&lt;/button&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="showModalDialog-输入参数说明"><a href="#showModalDialog-输入参数说明" class="headerlink" title="showModalDialog() 输入参数说明"></a>showModalDialog() 输入参数说明</h2><p>👉<a href="https://www.cnblogs.com/tianxiaoxiao/p/7486174.html">参考文档</a></p><h2 id="非模态父子窗口交互"><a href="#非模态父子窗口交互" class="headerlink" title="非模态父子窗口交互"></a>非模态父子窗口交互</h2><p>模态窗口可以通过回调函数进行交互，非模态窗口可以参考：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 1.父窗口打开入参传一个window对象</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">showModalDialog</span>(url,<span class="hljs-variable language_">window</span>,<span class="hljs-string">&quot;dialogWidth:300px;dialogHeight:300px;scroll:no;status:no&quot;</span>);<br><br><span class="hljs-comment">// 2.子窗口接收参数并调用主调窗口的函数</span><br><span class="hljs-keyword">var</span> parentWindow = <span class="hljs-variable language_">window</span>.<span class="hljs-property">dialogArguments</span>;<br>parentWindow.<span class="hljs-title function_">parentFn</span>(); <span class="hljs-comment">//parentFn是主调窗口的函数</span><br></code></pre></td></tr></table></figure><h2 id="模态窗调试问题"><a href="#模态窗调试问题" class="headerlink" title="模态窗调试问题"></a>模态窗调试问题</h2><p>模态窗口无法通过F12开发者工具查看页面信息，可以尝试将其修改为新页面打开的方式进行调试。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">showDialog</span>(<span class="hljs-string">&quot;/businesss/page.jsp&quot;</span>)<br></code></pre></td></tr></table></figure><p>修改为open()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">WEB_ROOT</span>+<span class="hljs-string">&quot;/businesss/page.jsp&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>IE浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IE浏览器</tag>
      
      <tag>弹窗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler无法抓本地数据包</title>
    <link href="/20200219120000/"/>
    <url>/20200219120000/</url>
    
    <content type="html"><![CDATA[<ul><li><p>方法一：在localhost后增加.fiddler</p><p>比如请求<code>http://localhost:8080</code>改为<code>http://localhost.fiddler:8080</code>即可</p></li><li><p>方法二：在localhost或127.0.0.1后增加一个点即可</p><p>比如<code>http://localhost.:8080</code></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Fiddler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fiddler</tag>
      
      <tag>抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle中的不等于条件的注意点</title>
    <link href="/20191210120000/"/>
    <url>/20191210120000/</url>
    
    <content type="html"><![CDATA[<p>假设：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span>, t.rowid <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> t<br></code></pre></td></tr></table></figure><p>这个SQL查询出来的结果有16条，其中字段 user_id 值为空的数据 10 条，不为空的6条，</p><p>那么：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span>, t.rowid <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> t <span class="hljs-keyword">WHERE</span> t.user_id <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;123&#x27;</span><br></code></pre></td></tr></table></figure><p>如果期望查询出user_id &#x3D; ‘123’以外的数据，这个sql执行之后，会比期望的数据少10条（即：10条 user_id 值为空的数据被过滤掉）</p><p>正确写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> t.<span class="hljs-operator">*</span>, t.rowid <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> t <span class="hljs-keyword">WHERE</span> t.user_id <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-keyword">or</span> t.user_id <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>总结：</p><p><strong>null只能通过is null或者is not null来判断，其它操作符与null操作都是false</strong></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IE弹出窗口显示地址设置</title>
    <link href="/20191121123000/"/>
    <url>/20191121123000/</url>
    
    <content type="html"><![CDATA[<p>在开发中使用弹出窗口时看不到地址栏，不知道URL对开发很不方便，设置办法如下：</p><p>工具–&gt;Internet 选项–&gt;安全–&gt;自定义级别–&gt;允许网站打开没有地址栏或状态栏的窗口–&gt;禁止</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>IE浏览器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IE浏览器</tag>
      
      <tag>弹窗</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>like模糊查询下划线条件会查询出所有数据</title>
    <link href="/20191113120000/"/>
    <url>/20191113120000/</url>
    
    <content type="html"><![CDATA[<p>原来条件SQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">AND</span> user_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-operator">||</span> ? <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;%&#x27;</span><br></code></pre></td></tr></table></figure><p>根据 like 模糊查询的匹配规则， 下划线 _ 表示匹配任一字符，所以会出现查询条件 输入一个 _ 就会查询出所有的数据，与预期的结果不一致。</p><p>修改方案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">AND</span> user_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-operator">||</span> ? <span class="hljs-operator">||</span> <span class="hljs-string">&#x27;%&#x27;</span> <span class="hljs-keyword">ESCAPE</span> <span class="hljs-string">&#x27;\&#x27;</span><br></code></pre></td></tr></table></figure><p>这么写代表将 \ 作为转义字符（也可以是其他特殊字符），查询条件入参时需要将 _ 替换为 _，这样就能实现将下划线当作普通字符查询条件。</p><p>但是这么写需要考虑一个问题，即： \ 这个特殊字符就不能作为查询条件。</p><p>修改方案2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--前后模糊查询</span><br><span class="hljs-keyword">AND</span> INSTR(user_name, ?) <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment">--相当于 NOT LIKE</span><br><span class="hljs-keyword">AND</span> INSTR(user_name, ?) <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>总结：在涉及模糊查询的地方就需要注意这种情况，是否需要限制特殊字符。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle查询异常：不存在的LOB值处理方法</title>
    <link href="/20191031120000/"/>
    <url>/20191031120000/</url>
    
    <content type="html"><![CDATA[<p>问题SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">to_char(wmsys.WM_CONCAT(<span class="hljs-keyword">distinct</span> oname.org_name)) orgNameClob<br></code></pre></td></tr></table></figure><p>在PL&#x2F;SQL执行没有问题，但在JAVA后端报错。</p><p>可修改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-built_in">listagg</span>(oname.org_name,<span class="hljs-string">&#x27;,&#x27;</span>) <span class="hljs-keyword">within</span> <span class="hljs-keyword">group</span> (<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> (oname.org_name)) <span class="hljs-keyword">as</span> orgNameClob<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle分区优化分析</title>
    <link href="/20190822120000/"/>
    <url>/20190822120000/</url>
    
    <content type="html"><![CDATA[<p><img src="/20190822120000/Image.png" alt="分区ddl"></p><p>上图中对于该表做了二级分区：一级为 PROV_ORG_NO，二级为 ACCEPT_TIME，当一级分区起到作用时，二级分区才会起效，否则执行计划看到的是 PARTITION LIST ALL </p><p><img src="/20190822120000/Image-1678685413173-6.png" alt="查看执行计划"></p><p>对于有分区的表的查询SQL，优化分析时可以看看查询条件是否会走分区。</p><p>优化后：PARTITION LIST SINGLE</p><p><img src="/20190822120000/Image-1678685451642-8.png" alt="查看执行计划"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>表分区</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jsp报错the import cannot be resolved</title>
    <link href="/20190702120000/"/>
    <url>/20190702120000/</url>
    
    <content type="html"><![CDATA[<p>jsp报错 <code>the import cannot be resolved</code> 问题可以通过以下方法解决：</p><ol><li><p>clean项目，重新编译项目。</p><p>【解决】一般使用eclipse&#x2F;myeclipse的菜单 project -&gt; clean ..可以解决。同时最好选中Build Automatically选项。</p></li><li><p>若是没有解决，不要着急，继续来。重新导入jar包。</p><p>【解决】右键项目-&gt;build path -&gt; Config build path -&gt; Libraries-&gt; remove后，重新导入。</p></li><li><p>该项目有依赖项目需要重新导入依赖项目。</p><p>【解决】右键项目-&gt;build path -&gt; Config build path -&gt; project -&gt; remove后，重新导入。</p></li><li><p>自动编译的class文件夹路径问题</p><p>【解决】右键项目-&gt;build path -&gt; Config build path -&gt; source-&gt; 在对话框的最下侧有个Default output file:选项，可以选择项目再eclipse&#x2F;myeclipse中编译后的class文件的路径，一般web项目的路径为{ProjectName}&#x2F;web(WebRoot)&#x2F;WEB-INF&#x2F;classes，非web项目一般为{ProjectName}&#x2F;classes。</p></li><li><p>问题还是存在的话，就超出这个问题的界限了，意思就是说可能就是其他的问题引起的错误。</p><p>【解决】其实也不算是解决。具体是什么问题引起的可以打开Problems对话框窗口查看。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>JSP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java中List遍历时操作元素的注意点</title>
    <link href="/20190621120000/"/>
    <url>/20190621120000/</url>
    
    <content type="html"><![CDATA[<p>JAVA中循环遍历list有三种方式for循环、for-each循环、iterator遍历。</p><ol><li><p>for循环遍历list删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++)&#123;<br>    <span class="hljs-keyword">if</span>(list.get(i).equals(<span class="hljs-string">&quot;del&quot;</span>))&#123;<br>        list.remove(i);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式的问题在于，删除某个元素后，list的大小发生了变化，而你的索引也在变化，所以会导致你在遍历的时候漏掉某些元素。比如当你删除第1个元素后，继续根据索引访问第2个元素时，因为删除的关系后面的元素都往前移动了一位，所以实际访问的是第3个元素。因此，这种方式可以用在删除特定的一个元素时使用，但不适合循环删除多个元素时使用。</p></li><li><p>for-each循环删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(String str : list)&#123;<br>    <span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;del&quot;</span>))&#123;<br>        list.remove(str);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式的问题在于，删除元素后继续循环会报错误信息ConcurrentModificationException，因为元素在使用的时候发生了并发的修改，导致异常抛出。但是删除完毕马上使用break跳出，则不会触发报错。</p></li><li><p>iterator遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;String&gt; it = list.iterator(); <br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> it.next();<br>    <span class="hljs-keyword">if</span>(str.equals(<span class="hljs-string">&quot;del&quot;</span>))&#123;<br>        it.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式可以正常的循环及删除。但要注意的是，使用iterator的remove方法，如果用list的remove方法同样会报上面提到的ConcurrentModificationException错误。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查看存储过程执行日志</title>
    <link href="/20190612120000/"/>
    <url>/20190612120000/</url>
    
    <content type="html"><![CDATA[<p>SQL查看存储过程执行日志：</p><p>&#96;&#96;&#96;sql<br>select t.sql_id,<br>    t.sql_text,<br>    s.plan_hash_value,<br>    s.optimizer_cost,</p><pre><code class="hljs">s.executions_total,s.elapsed_time_total,s.disk_reads_total,s.buffer_gets_total</code></pre><p>from DBA_HIST_SQLSTAT s, DBA_HIST_SQLTEXT t<br>where s.sql_id&#x3D;t.sql_id<br>and t.sql_text like’%存储过程名称%’;</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL优化</title>
    <link href="/20190416120000/"/>
    <url>/20190416120000/</url>
    
    <content type="html"><![CDATA[<p>1、避免在where子句中使用 is null 或 is not null 对字段进行判断。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>在这个查询中，就算我们为 name 字段设置了索引，查询分析器也不会使用，因此查询效率底下。为了避免这样的查询，在数据库设计的时候，尽量将可能会出现 null 值的字段设置默认值，这里如果我们将 name 字段的默认值设置为0，那么我们就可以这样查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>2、避免在 where 子句中使用 !&#x3D; 或 &lt;&gt; 操作符。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>数据库在查询时，对 !&#x3D; 或 &lt;&gt; 操作符不会使用索引，而对于 &lt; 、 &lt;&#x3D; 、 &#x3D; 、 &gt; 、 &gt;&#x3D; 、 BETWEEN AND，数据库才会使用索引。因此对于上面的查询，正确写法应该是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">0</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>这里我们为什么没有使用 or 来链接 where 后的两个条件呢？这就是我们下面要说的第3个优化技巧。</p><p>3、避免在 where 子句中使用 or来链接条件。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;UncleToo&#x27;</span> <span class="hljs-keyword">or</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;PHP&#x27;</span><br></code></pre></td></tr></table></figure><p>这种情况，我们可以这样写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;UncleToo&#x27;</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;PHP&#x27;</span><br></code></pre></td></tr></table></figure><p>4、少用 in 或 not in。</p><p>虽然对于 in 的条件会使用索引，不会全表扫描，但是在某些特定的情况，使用其他方法也许效果更好。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure><p>像这种连续的数值，我们可以使用 BETWEEN AND，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> id <span class="hljs-keyword">between</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>5、注意 like 中通配符的使用。</p><p>下面的语句会导致全表扫描，尽量少用。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%UncleToo%&#x27;</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%UncleToo&#x27;</span><br></code></pre></td></tr></table></figure><p>而下面的语句执行效率要快的多，因为它使用了索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> tabel <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;UncleToo%&#x27;</span><br></code></pre></td></tr></table></figure><p>6、避免在 where 子句中对字段进行表达式操作。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">/</span><span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>正确的写法应该是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>7、避免在 where 子句中对字段进行函数操作。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">substring</span>(name,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;UncleToo&#x27;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> datediff(<span class="hljs-keyword">day</span>,datefield,<span class="hljs-string">&#x27;2014-07-17&#x27;</span>) <span class="hljs-operator">&gt;=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>这两条语句中都对字段进行了函数处理，这样就是的查询分析器放弃了索引的使用。正确的写法是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span><span class="hljs-string">&#x27;UncleToo%&#x27;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> datefield <span class="hljs-operator">&lt;=</span> <span class="hljs-string">&#x27;2014-07-17&#x27;</span><br></code></pre></td></tr></table></figure><p>也就是说，不要在 where 子句中的 &#x3D; 左边进行函数、算术运算或其他表达式运算。</p><p>8、在子查询中，用 exists 代替 in 是一个好的选择。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> b) <br></code></pre></td></tr></table></figure><p>如果我们将这条语句换成下面的写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> b <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span> a.id)<br></code></pre></td></tr></table></figure><p>这样，查询出来的结果一样，但是下面这条语句查询的速度要快的多。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
      <tag>SQL</tag>
      
      <tag>SQL优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取抖音无水印视频（捷径）</title>
    <link href="/20190326120000/"/>
    <url>/20190326120000/</url>
    
    <content type="html"><![CDATA[<p><img src="/20190326120000/IMG_1238.JPG" alt="捷径内容"></p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>iOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
      <tag>抖音</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>资源分享（更新中）</title>
    <link href="/20190101000000/"/>
    <url>/20190101000000/</url>
    
    <content type="html"><![CDATA[<blockquote></blockquote><h1 id="1-软件分享"><a href="#1-软件分享" class="headerlink" title="1. 软件分享"></a>1. 软件分享</h1><h2 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h2><h3 id="蓝灯"><a href="#蓝灯" class="headerlink" title="蓝灯"></a>蓝灯</h3><p>📝软件简介：科学上网工具，每个月有限流，速度不快，不是很稳定，可以临时应急用。</p><p>👉获取方式：<a href="https://github.com/getlantern/download">下载地址</a>。</p><p>👉适用平台：安卓、iOS、Windows、Mac等。</p><h3 id="v2rayN"><a href="#v2rayN" class="headerlink" title="v2rayN"></a>v2rayN</h3><h3 id><a href="#" class="headerlink" title></a><img src="/20190101000000/image-20230313170943214.png" alt="v2rayN"></h3><p>📝软件简介：科学上网工具，只是个工具，需要自行获取节点。</p><p>👉获取方式：<a href="https://github.com/2dust/v2rayN/releases">下载地址</a>。</p><h2 id="Everything"><a href="#Everything" class="headerlink" title="Everything"></a>Everything</h2><p> <img src="/20190101000000/image-20230313171431066.png" alt="image-20230313171431066"></p><p>📝软件简介：可以快速搜索本地文件，比windows自带的搜索快很多很多。</p><p>👉获取方式：<a href="https://www.voidtools.com/zh-cn/downloads/">下载地址</a>。</p><h2 id="Chrome离线版"><a href="#Chrome离线版" class="headerlink" title="Chrome离线版"></a>Chrome离线版</h2><p>📝软件简介：Chrome离线版，不是在线安装的版本（主要差别在于url参数不同）。</p><p>📆收录时间：2019-07-08</p><p>👉获取方式：<a href="https://www.google.cn/chrome/browser/desktop/index.html?standalone=1&platform=win64">下载地址</a>。</p><p><img src="/20190101000000/image-20230313145931649.png" alt="Chrome离线版下载"></p><h1 id="2-资源站点"><a href="#2-资源站点" class="headerlink" title="2. 资源站点"></a>2. 资源站点</h1><blockquote><p>本章主要分享一些好用的网站，比如在线工具、资源获取、操作手册等…</p></blockquote><h2 id="吾爱破解"><a href="#吾爱破解" class="headerlink" title="吾爱破解"></a>吾爱破解</h2><p>📝网站简介：获取一些破解软件、学习app破解、网站破解等。部分内容需要登录，但注册是限时开放。</p><p>📆收录时间：2023-03-13</p><p>👉获取方式：<a href="https://www.52pojie.cn/">网站地址</a>。</p><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>📝网站简介：</p><p>📆收录时间：</p><p>👉获取方式：</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>📝网站简介：</p><p>📆收录时间：</p><p>👉获取方式：</p><h1 id="3-Chrome插件"><a href="#3-Chrome插件" class="headerlink" title="3. Chrome插件"></a>3. Chrome插件</h1><h2 id="ChromeGO"><a href="#ChromeGO" class="headerlink" title="ChromeGO"></a>ChromeGO</h2><p>📝插件简介：一键式科学上网，需要先安装Chrome浏览器。实际是一个压缩包，包含了一些主流的科学上网的软件与配置。</p><p>📆收录时间：2022-03-31</p><p>👉获取方式：<a href="https://github.com/bannedbook/fanqiang/wiki/Chrome%E4%B8%80%E9%94%AE%E7%BF%BB%E5%A2%99%E5%8C%85#chromego-xia-zai-di-zhi">Github</a>。</p><h2 id="GitZip-for-github"><a href="#GitZip-for-github" class="headerlink" title="GitZip for github"></a>GitZip for github</h2><p>📝插件简介：用于 github 下载单个文件。</p><p>📆收录时间：2022-03-31</p><p>👉获取方式：Chrome商店下载，如果无法访问可以尝试其他网站获取。</p><h2 id="JSON-Formatter"><a href="#JSON-Formatter" class="headerlink" title="JSON Formatter"></a>JSON Formatter</h2><p>📝插件简介：适用于开发人员。在调试后端返回数据的时候，可以将后端返回的json数据进行格式化并展示在页面上。</p><p>📆收录时间：2022-12-05</p><p>👉获取方式：Chrome商店下载，如果无法访问可以尝试其他网站获取。</p><h2 id="IDM"><a href="#IDM" class="headerlink" title="IDM"></a>IDM</h2><p>📝插件简介：多线程下载器。</p><p>📆收录时间：2022-06-05</p><p>👉获取方式：</p><h2 id="Tampermonkey"><a href="#Tampermonkey" class="headerlink" title="Tampermonkey"></a>Tampermonkey</h2><p>📝插件简介：脚本管理插件，可以在社区（如：<a href="https://greasyfork.org/zh-CN">greasyfork</a>）下载各种脚本后，通过该软件进行管理。</p><p>📆收录时间：2018-11-09</p><p>👉获取方式：Chrome商店下载，如果无法访问可以尝试其他网站获取。</p><h1 id="4-IDEA插件"><a href="#4-IDEA插件" class="headerlink" title="4. IDEA插件"></a>4. IDEA插件</h1><p>📝插件简介：</p><p>📆收录时间：</p><p>👉获取方式：</p><h1 id="5-Eclipse插件"><a href="#5-Eclipse插件" class="headerlink" title="5. Eclipse插件"></a>5. Eclipse插件</h1><h2 id="OpenExplorer"><a href="#OpenExplorer" class="headerlink" title="OpenExplorer"></a>OpenExplorer</h2><p>📝插件简介：打开文件所在位置（资源管理器打开）。</p><p>📆收录时间：2018-11-09</p><p>👉获取方式：<a href="https://github.com/samsonw/OpenExplorer/downloads">下载地址</a>。如果下载地址失效请自行搜索。</p><p>📕使用方式：</p><ol><li>将jar包放到eclipse的plugin目录中，重启eclipse。</li><li>选中要查看目录的文件，点击上方横向工具栏中的Open Explorer图标可以实现在window资源管理器中查看目录。<img src="/20190101000000/Image.png" alt="插件图标"></li></ol>]]></content>
    
    
    <categories>
      
      <category>资源分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软件</tag>
      
      <tag>在线工具</tag>
      
      <tag>资源</tag>
      
      <tag>插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows中通过命令行解决Tomcat端口被占用问题</title>
    <link href="/20180907130000/"/>
    <url>/20180907130000/</url>
    
    <content type="html"><![CDATA[<p>1、找到被占用端口的pid(最右边那一列)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">netstat -ano<br></code></pre></td></tr></table></figure><p>2、通过本地地址的端口号即可查找到进程的pid(8023为找到的pid)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tasklist|findstr &quot;8023&quot;<br></code></pre></td></tr></table></figure><p>3、通过进程名kill掉进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">taskkill /f /t /im javaw.exe<br></code></pre></td></tr></table></figure><p>（附：其实直接执行第三步就行，被占用一般就是因为之前的java进程没有完全关闭。）</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse中为Tomcat配置内存</title>
    <link href="/20180907120000/"/>
    <url>/20180907120000/</url>
    
    <content type="html"><![CDATA[<p>【问题描述】</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">运行Tomcat出现异常：<br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.OutOfMemoryError</span>: PermGen space<br></code></pre></td></tr></table></figure><p>【解决方案】</p><p>双击下方Servers标签的Tomcat，选择 Open launch configuration，在打开的窗口中选择Arguments标签，在VM Arguments的内容中追加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-Xms512m -Xmx1024m -XX:<span class="hljs-attribute">MaxNewSize</span>=256m -XX:<span class="hljs-attribute">MaxPermSize</span>=512m<br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-Xms：java Heap初始大小。 默认是物理内存的1/64。</span><br><span class="hljs-deletion">-Xmx：java heap最大值。建议均设为物理内存的一半。不可超过物理内存。</span><br><span class="hljs-deletion">-XX:PermSize:设定内存的永久保存区初始大小，缺省值为64M。（我用visualvm.exe查看的）</span><br><span class="hljs-deletion">-XX:MaxPermSize:设定内存的永久保存区最大 大小，缺省值为64M。（我用visualvm.exe查看的）</span><br><span class="hljs-deletion">-XX:SurvivorRatio=2 :生还者池的大小,默认是2，如果垃圾回收变成了瓶颈，您可以尝试定制生成池设置</span><br><span class="hljs-deletion">-XX:NewSize: 新生成的池的初始大小。 缺省值为2M。</span><br><span class="hljs-deletion">-XX:MaxNewSize: 新生成的池的最大大小。  缺省值为32M。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Tomcat</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA编译Java文件报错</title>
    <link href="/20180906120000/"/>
    <url>/20180906120000/</url>
    
    <content type="html"><![CDATA[<p>【问题描述】</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-literal">Error</span><span class="hljs-operator">:</span>(1,10) java<span class="hljs-operator">:</span>需要<span class="hljs-keyword">class</span>,integerface或<span class="hljs-built_in">enum</span>.<br>以及 java<span class="hljs-operator">:</span>非法字符<span class="hljs-operator">:</span>\<span class="hljs-operator">...</span><br></code></pre></td></tr></table></figure><p>【问题原因】</p><p>java文件编码有问题。（.java只识别不带BOM的UTF-8编码）</p><p>【解决方案】</p><p>用EmEditor、Editplus、ULtraEdit或Notepad++之类的工具另存为UTF-8（无BOM）。</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>修改OracleXE默认端口</title>
    <link href="/20180905120000/"/>
    <url>/20180905120000/</url>
    
    <content type="html"><![CDATA[<p>OracleXE默认端口号为8080，与Tomcat默认端口号冲突，修改OracleXE默认端口：</p><p>步骤一：运行cmd，输入sqlplus &#x2F; as sysdba;   </p><p>步骤二：输入exec dbms_xdb.sethttpport(1521); （1521为更改后的端口）</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>OracleXE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OracleXE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse中为Tomcat配置内存</title>
    <link href="/20180904130000/"/>
    <url>/20180904130000/</url>
    
    <content type="html"><![CDATA[<p>Eclipse中HttpServlet类找不到。</p><p>【问题原因】</p><p>没有导入Servlet-api.jar包。</p><p>【解决方法】</p><p>这个包在所安装在的tomcat的lib文件下，所以只需要导入即可。在需要导入的工程上右键进入properties，选择Java Build Path，Libraries 选项卡中 Add External JARS，选择你所安装 Tomcat 目录下 lib 文件夹中的 Servlet-api.jar 包即可。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Eclipse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PL/SQL 自动补全设置</title>
    <link href="/20180904120000/"/>
    <url>/20180904120000/</url>
    
    <content type="html"><![CDATA[<p>1、在安装目录的 PlugIns 文件下创建 <em><strong>AutoReplace.txt</strong></em> 文件（文件名可自定义，最好是英文名）。</p><p>文件内容如下（可自定义）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">sf</span> = <span class="hljs-string">SELECT * FROM</span><br><span class="hljs-attr">sc</span> = <span class="hljs-string">SELECT COUNT(*) FROM t</span><br><span class="hljs-attr">st</span> = <span class="hljs-string">SELECT t.*, t.ROWID FROM t</span><br><span class="hljs-attr">w</span> = <span class="hljs-string">WHERE</span><br><span class="hljs-attr">b</span> = <span class="hljs-string">BETWEEN AND</span><br><span class="hljs-attr">l</span> = <span class="hljs-string">LIKE &#x27;%%&#x27;</span><br><span class="hljs-attr">o</span> = <span class="hljs-string">ORDER BY</span><br><span class="hljs-attr">f</span> = <span class="hljs-string">FOR UPDATE</span><br><span class="hljs-attr">u</span> = <span class="hljs-string">UPDATE t SET t. WHERE t</span><br></code></pre></td></tr></table></figure><p>2、打开PL&#x2F;SQL，进行设置</p><p>PL&#x2F;SQL 版本12：Configure -&gt; Perferences -&gt; Editor -&gt; AutoReplaces，勾选 Enable，然后选择刚才创建的文件，确定后重启即可。</p><p>PL&#x2F;SQL 版本12以下的：Tools -&gt; Perferences -&gt; Editor -&gt; AutoReplaces，勾选 Enable，然后选择刚才创建的文件，确定后重启即可。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>PLSQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PLSQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Win7环境下的VPN连接</title>
    <link href="/20180903120000/"/>
    <url>/20180903120000/</url>
    
    <content type="html"><![CDATA[<h1 id="Win7环境下的VPN连接"><a href="#Win7环境下的VPN连接" class="headerlink" title="Win7环境下的VPN连接"></a>Win7环境下的VPN连接</h1><p>1、”网络和共享中心”</p><p>2、”设置新的连接”</p><p>3、”连接到工作区”</p><p>4、”创建新的连接”</p><p>5、”使用我的Internet连接(VPN)”</p><p>6、输入相关网站上取得的服务器IP地址(或网址)，下一步</p><p>7、输入在相关网站上注册的帐号和密码</p><p>更改服务器地址：</p><p>选中vpn连接，右键-属性-在常规选项卡直接修改即可</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Win7</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Win7</tag>
      
      <tag>VPN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eclipse快捷键</title>
    <link href="/20180902120000/"/>
    <url>/20180902120000/</url>
    
    <content type="html"><![CDATA[<h1 id="Eclipse快捷键"><a href="#Eclipse快捷键" class="headerlink" title="Eclipse快捷键"></a>Eclipse快捷键</h1><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">alt</span> <span class="hljs-operator">+</span> <span class="hljs-operator">/</span>  补充代码<br><br>输入<span class="hljs-variable">syso</span>后<span class="hljs-variable">alt</span><span class="hljs-operator">+/</span>可以直接补充完整<span class="hljs-variable">System</span><span class="hljs-operator">.</span><span class="hljs-variable">out</span><span class="hljs-operator">.</span><span class="hljs-variable">println</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span><span class="hljs-operator">;</span><br><br>输入<span class="hljs-variable">main</span>后<span class="hljs-variable">alt</span><span class="hljs-operator">+/</span>可以直接补充完整<span class="hljs-variable">public</span> <span class="hljs-variable">static</span> <span class="hljs-variable">void</span> <span class="hljs-variable">main</span><span class="hljs-punctuation">(</span><span class="hljs-built_in">String</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span> <span class="hljs-variable">args</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+/:</span> 对一行注释或取消注释。对于多行也同样适用。<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-number">1</span> 快速修复<span class="hljs-punctuation">(</span>最经典的快捷键<span class="hljs-operator">,</span>就不用多说了<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-built_in">D</span><span class="hljs-operator">:</span> 删除当前行<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Alt</span><span class="hljs-operator">+</span>↓ 复制当前行到下一行<span class="hljs-punctuation">(</span>复制增加<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Alt</span><span class="hljs-operator">+</span>↑ 复制当前行到上一行<span class="hljs-punctuation">(</span>复制增加<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Alt</span><span class="hljs-operator">+</span>↓ 当前行和下面一行交互位置<span class="hljs-punctuation">(</span>特别实用<span class="hljs-operator">,</span>可以省去先剪切<span class="hljs-operator">,</span>再粘贴了<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Alt</span><span class="hljs-operator">+</span>↑ 当前行和上面一行交互位置<span class="hljs-punctuation">(</span>同上<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Alt</span><span class="hljs-operator">+</span>← 前一个编辑的页面<br><br><span class="hljs-variable">Alt</span><span class="hljs-operator">+</span>→ 下一个编辑的页面<span class="hljs-punctuation">(</span>当然是针对上面那条来说了<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Alt</span><span class="hljs-operator">+</span><span class="hljs-built_in">Enter</span> 显示当前选择资源<span class="hljs-punctuation">(</span>工程<span class="hljs-operator">,</span><span class="hljs-variable">or</span> 文件 <span class="hljs-variable">or</span>文件<span class="hljs-punctuation">)</span>的属性<br><br><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-built_in">Enter</span> 在当前行的下一行插入空行<span class="hljs-punctuation">(</span>这时鼠标可以在当前行的任一位置<span class="hljs-operator">,</span>不一定是最后<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-built_in">Enter</span> 在当前行插入空行<span class="hljs-punctuation">(</span>原理同上条<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Q</span> 定位到最后编辑的地方<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">L</span> 定位在某行 <span class="hljs-punctuation">(</span>对于程序超过<span class="hljs-number">100</span>的人就有福音了<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">M</span> 最大化当前的<span class="hljs-variable">Edit</span>或<span class="hljs-variable">View</span> <span class="hljs-punctuation">(</span>再按则反之<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+/</span> 注释当前行<span class="hljs-operator">,</span>再按则取消注释<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-built_in">O</span> 快速显示 <span class="hljs-variable">OutLine</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">T</span> 快速显示当前类的继承结构<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">W</span> 关闭当前<span class="hljs-variable">Editer</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-built_in">K</span> 参照选中的<span class="hljs-built_in">Word</span>快速定位到下一个<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-built_in">E</span> 快速显示当前<span class="hljs-variable">Editer</span>的下拉列表<span class="hljs-punctuation">(</span>如果当前页面没有显示的用黑体表示<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+/</span><span class="hljs-punctuation">(</span>小键盘<span class="hljs-punctuation">)</span> 折叠当前类中的所有代码<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span>×<span class="hljs-punctuation">(</span>小键盘<span class="hljs-punctuation">)</span> 展开当前类中的所有代码<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-built_in">Space</span> 代码助手完成一些代码的插入<span class="hljs-punctuation">(</span>但一般和输入法有冲突<span class="hljs-operator">,</span>可以修改输入法的热键<span class="hljs-operator">,</span>也可以暂用<span class="hljs-variable">Alt</span><span class="hljs-operator">+/</span>来代替<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-built_in">E</span> 显示管理当前打开的所有的<span class="hljs-variable">View</span>的管理器<span class="hljs-punctuation">(</span>可以选择关闭<span class="hljs-operator">,</span>激活等操作<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">J</span> 正向增量查找<span class="hljs-punctuation">(</span>按下<span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">J</span>后<span class="hljs-operator">,</span>你所输入的每个字母编辑器都提供快速匹配定位到某个单词<span class="hljs-operator">,</span>如果没有<span class="hljs-operator">,</span>则在<span class="hljs-variable">stutes</span> <span class="hljs-variable">line</span>中显示没有找到了<span class="hljs-operator">,</span>查一个单词时<span class="hljs-operator">,</span>特别实用<span class="hljs-operator">,</span>这个功能<span class="hljs-variable">Idea</span>两年前就有了<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-variable">J</span> 反向增量查找<span class="hljs-punctuation">(</span>和上条相同<span class="hljs-operator">,</span>只不过是从后往前查<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-variable">F4</span> 关闭所有打开的<span class="hljs-variable">Editer</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-variable">X</span> 把当前选中的文本全部变为小写<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-variable">Y</span> 把当前选中的文本全部变为小写<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-variable">F</span> 格式化当前代码（自动整理代码）<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-variable">P</span> 定位到对应的匹配符<span class="hljs-punctuation">(</span>譬如<span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">)</span> <span class="hljs-punctuation">(</span>从前面定位后面时<span class="hljs-operator">,</span>光标要在匹配符里面<span class="hljs-operator">,</span>后面到前面<span class="hljs-operator">,</span>则反之<span class="hljs-punctuation">)</span><br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span><span class="hljs-variable">Shift</span><span class="hljs-operator">+</span><span class="hljs-built_in">O</span> 输入工具包的关键词后快捷键即可获得该工具包<br><br><span class="hljs-variable">Ctrl</span><span class="hljs-operator">+</span>鼠标点击 查看源代码<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Eclipse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Eclipse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Struts2 和 Spring MVC 的区别</title>
    <link href="/20180828120000/"/>
    <url>/20180828120000/</url>
    
    <content type="html"><![CDATA[<p>Struts2 和 Spring MVC 的区别</p><p>【区别1】</p><p>   Struts2 的核心是基于一个 Filter 即 StrutsPreparedAndExcuteFilter。</p><p>   Spring MVC 的核心是基于一个 Servlet 即 DispatcherServlet(前端控制器)。</p><p>【区别2】</p><p>   Struts2 是基于类开发的，传递的参数是通过类的属性传递(属性驱动和模型驱动),所以只能设计成多例。</p><p>   Spring MVC 是基于类中的方法开发的，使用 requestMapping 将 url 和方法进行映射，根据 url 找到 controller 类的方法生成一个 handler 处理器对象(只包括一个method)。传递参数是传到方法的形参上面，所以既可以是单例模式也可以是多例模式。</p><p>【区别3】</p><p>   Struts2 采用的是值栈存储请求以及响应数据，OGNL存取数据。</p><p>   Spring MVC 采用 request 来解析请求内容，然后由其内部的 getParameter 给方法中形参赋值，再把后台处理过的数据通过 ModelAndView 对象存储，Model存储数据，View存储返回的页面，再把对象通过 request 传输到页面去。</p><p>【附】</p><p>关于 intercepter 的实现机制：</p><p>   struts有以自己的interceptor机制，spring mvc用的是独立的AOP方式。这样导致struts的配置文件量还是比spring mvc大，虽然struts的配置能继承，所以我觉得论使用上来讲，spring mvc使用更加简洁，开发效率Spring MVC确实比struts2高。spring mvc是方法级别的拦截，一个方法对应一个request上下文，而方法同时又跟一个url对应，所以说从架构本身上spring3 mvc就容易实现restful url。struts2是类级别的拦截，一个类对应一个request上下文；实现restful url要费劲，因为struts2 action的一个方法可以对应一个url；而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了。</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Struts2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Struts2</tag>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis与Oracle分页</title>
    <link href="/20180806120000/"/>
    <url>/20180806120000/</url>
    
    <content type="html"><![CDATA[<p>selectByPage(Integer offset, Integer limit );</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span><br>    (<span class="hljs-keyword">select</span> t.*,rownum rownu <span class="hljs-keyword">from</span> STUDENT t <span class="hljs-keyword">where</span> rownum &amp;lt;=<span class="hljs-meta">#&#123;param1&#125;*#&#123;param2&#125;) tt</span><br><span class="hljs-keyword">where</span> tt.rownum&gt;(<span class="hljs-meta">#&#123;param1&#125;-1)*#&#123;param2&#125;</span><br></code></pre></td></tr></table></figure><p>注意：这里的*是乘号</p><p>原句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span><br> (<span class="hljs-keyword">select</span> rownum rn, col1,col2,col3 <span class="hljs-keyword">from</span> (<br>  (<span class="hljs-keyword">select</span> rownum, col1, col2, col3 <span class="hljs-keyword">from</span> t_tablename <span class="hljs-keyword">where</span> rownum<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> colname <span class="hljs-keyword">desc</span>) v1 <span class="hljs-comment">--1.查询出含有rownum的表数据并给别名v1,第一个rownum是不能用&gt;或&gt;=的</span><br> <span class="hljs-keyword">where</span> rn<span class="hljs-operator">&lt;=</span><span class="hljs-number">10</span>) v2) <span class="hljs-comment">--2.查询v1的</span><br><span class="hljs-keyword">where</span> rn<span class="hljs-operator">&gt;=</span><span class="hljs-number">5</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excel批量生成sql</title>
    <link href="/20180718130000/"/>
    <url>/20180718130000/</url>
    
    <content type="html"><![CDATA[<h1 id="Excel批量生成sql"><a href="#Excel批量生成sql" class="headerlink" title="Excel批量生成sql"></a>Excel批量生成sql</h1><p>单元格设置公式：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">=<span class="hljs-string">&quot;update tab_organization_info t set t.mchid = &#x27;&quot;</span>&amp;<span class="hljs-symbol">C:C</span>&amp;<span class="hljs-string">&quot;&#x27;, t.terminal_no = &#x27;&quot;</span>&amp;<span class="hljs-symbol">D:D</span>&amp;<span class="hljs-string">&quot;&#x27; where id = &quot;</span>&amp;<span class="hljs-symbol">A:A</span>&amp;<span class="hljs-string">&quot;;&quot;</span><br></code></pre></td></tr></table></figure><p>（注意引用）</p><p>然后双击单元格右下方的填充柄实现自动填充。（注意：自动填充需要满足前一列的单元格为非空，如果前一列的单元格为空值，那么自动填充会终止，需要手动跃过）</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot启动项目时报错问题</title>
    <link href="/20180710120000/"/>
    <url>/20180710120000/</url>
    
    <content type="html"><![CDATA[<p>SpringBoot启动项目时报错：</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><span class="hljs-comment">&quot;XML fragments parsed from previous mappers already contains value for ...&quot;</span><br></code></pre></td></tr></table></figure><p>【解决方案1】</p><p>确保 Mapper.xml 中没有重复的 id 后，Maven clean 一下项目，然后重启。</p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>查询表中完全重复的数据</title>
    <link href="/20180710120000/"/>
    <url>/20180710120000/</url>
    
    <content type="html"><![CDATA[<p>查询表中完全重复的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--查询完全重复的数据</span><br><br><span class="hljs-keyword">select</span> t.student_id_new, t.student_id_old <span class="hljs-keyword">from</span> STUDENT_REL t <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> t.student_id_new, t.student_id_old <span class="hljs-keyword">having</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>把 &gt; 改成 &#x3D; 就是查询非重复的数据</p>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于上线初始化脚本管理方案</title>
    <link href="/20180706120000/"/>
    <url>/20180706120000/</url>
    
    <content type="html"><![CDATA[<blockquote><p>结合工作过的两家公司的上线脚本管理方案做的简单总结。</p></blockquote><h1 id="关于上线初始化脚本管理方案"><a href="#关于上线初始化脚本管理方案" class="headerlink" title="关于上线初始化脚本管理方案"></a>关于上线初始化脚本管理方案</h1><p>参考结构：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs markdown">database<br><br>  | -bs（系统名）<br><br><span class="hljs-code">     | -design</span><br><span class="hljs-code"></span><br><span class="hljs-code">       | -DDL</span><br><span class="hljs-code"></span><br><span class="hljs-code">         | -20180101</span><br><span class="hljs-code"></span><br><span class="hljs-code">           create_table_工单号.sql</span><br><span class="hljs-code"></span><br><span class="hljs-code">           alter_table_工单号.sql</span><br><span class="hljs-code"></span><br><span class="hljs-code">           create_sequence_工单号.sql</span><br><span class="hljs-code"></span><br><span class="hljs-code">           pkg_名字不变.pck（存储过程包非增量，直接替换）</span><br><span class="hljs-code"></span><br><span class="hljs-code">         | -20180202</span><br><span class="hljs-code"></span><br><span class="hljs-code">       | -DML</span><br><span class="hljs-code"></span><br><span class="hljs-code">         | -20180101</span><br><span class="hljs-code"></span><br><span class="hljs-code">           dml_表名_工单号.sql</span><br><span class="hljs-code"></span><br><span class="hljs-code">         | -20180202</span><br><span class="hljs-code"></span><br><span class="hljs-code">     | -develop</span><br><span class="hljs-code"></span><br><span class="hljs-code">      | -DDL</span><br><span class="hljs-code"></span><br><span class="hljs-code">      | -DML</span><br></code></pre></td></tr></table></figure><blockquote><p>database</p><blockquote><p>-bs（系统名）</p><blockquote><p>-design</p><blockquote><p>-DDL</p><blockquote><p>-20180101</p><blockquote><p>create_table_工单号.sql</p><p>alter_table_工单号.sql</p><p>create_sequence_工单号.sql</p><p>pkg_名字不变.pck（存储过程包非增量，直接替换）</p></blockquote></blockquote><p>-DML</p><blockquote><p>-20180101</p><blockquote><p>dml_表名_工单号.sql</p></blockquote><p>-20180202</p></blockquote></blockquote><p>-develop</p><blockquote><p>-DDL</p><p>-DML</p></blockquote></blockquote></blockquote></blockquote><p>建议结构：</p><blockquote><p>database</p><blockquote><p>-ERP（系统1）</p><blockquote><p>-所属迭代（版本号）</p><blockquote><p>-DDL</p><blockquote><p>-20180101</p><blockquote><p>create_table_task_1234.sql</p></blockquote></blockquote><p>-DML</p><blockquote><p>-20180101</p><blockquote><p>insert_task_1234.sql</p><p>update_task_1234.sql</p><p>delete_task_1234.sql</p></blockquote><p>-20180202</p></blockquote></blockquote></blockquote><p>-TA（系统2）</p><p>-HRM（系统3）</p></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术分享</category>
      
      <category>管理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>脚本管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
